%!PS-Adobe-3.1
%ADO_DSC_Encoding: MacOS Roman
%%Title: ADSP-BF606_607_608_609.pdf
%%Creator: Adobe Acrobat 9.5.3
%%For: angel
%%CreationDate: 06/05/2014, 08:24:25
%%BoundingBox: 32 0 760 612
%%HiResBoundingBox: 32.2238 0 759.7764 612
%%CropBox: 32.2238 0 759.7764 612
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq{pop}{setblackgeneration}ifelse
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq{pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1310 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-13:18:53        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreatorTool="FrameMaker 11.0"
   xmp:ModifyDate="2013-06-12T11:20:32-04:00"
   xmp:CreateDate="2009-04-08T16:32:54Z"
   xmp:MetadataDate="2013-06-12T11:20:32-04:00"
   dc:format="application/pdf"
   pdf:Producer="Acrobat Distiller 10.0.0 (Windows)"
   xmpMM:DocumentID="uuid:a4fee6d4-be05-4718-9e3f-1d0ab919d761"
   xmpMM:InstanceID="uuid:82f7ab84-5919-4b2a-a6d1-bdc6886dacea">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Data Sheet Preliminary - ADSP-BF60x Blackfin Embedded Processor Data Sheet, Revision PrA</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Analog Devices, Inc.</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">ADSP-BF60x Blackfin Embedded Processor</rdf:li>
    </rdf:Alt>
   </dc:description>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
<</PageSize [792 612 ] >> setpagedevice
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
<< /0 
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]

/CSA add_res
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
true set_gvm
%%BeginResource: CIDFont HANBAA+SymbolMT-Identity-H
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (HANBAA+SymbolMT)
%%Title: (HANBAA+SymbolMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /HANBAA+SymbolMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {0 -220 1113 1005} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 192 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 193 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B7C3C9ED920C533BFCEF627DC3963E487931C80D1235BDD70
699E096A6312D> |
1 <001C60D8A8C9C4A637> |
2 <001C60D8A8C9B8F0A561> |
3 <001C60D8A8C9B8707C25> |
4 <001C60D8A8C9B81F2CC3> |
5 <001C60D8A8C9B63C4350> |
6 <001C60D8A8C9B7A73D40> |
7 <001C60D8A8C9B796760D> |
8 <001C60D8A8C9B6B41C42> |
9 <001C60D8A8C9B6FF860C> |
10 <001C60D8A8C9B7642729> |
11 <001C60D8A8C9B81F2C3AD88BE944FF80318D8AF8350026B5EFE87FE68764
0AF4A47547388792B22F6DB8B11FE56DE72D1A141C3CCB5CDB12F640DEFF9A6D
3F1A686471C682D0F16FF3566BA8C987CE4F15A3A503FF4814FD7B> |
12 <001C60D8A8C9B81F2C3AA92CC6997C003EEB299D29C718A8A6BCF0E8A765
C1B5FF867F31B4D88A3D7B6BCFF578B7D351C94320922B2E7FDB620754441B20
B2299DD3C52447CAF34E7470ADA555A3FE58BD72E3FC77877CB8C5B6> |
13 <001C60D8A8C9B7A73D40> |
14 <001C60D8A8C9B796760D> |
15 <001C60D8A8C9B8707C25> |
16 <001C60D8A8C9B796760D> |
17 <001C60D8A8C9B8707C25> |
18 <001C60D8A8C9B854D00D> |
19 <001C60D8A8C9B7A73D40> |
20 <001C60D8A8C9B7A73D40> |
21 <001C60D8A8C9B7A73D40> |
22 <001C60D8A8C9B7A73D40> |
23 <001C60D8A8C9B7A73D40> |
24 <001C60D8A8C9B7A73D40> |
25 <001C60D8A8C9B7A73D40> |
26 <001C60D8A8C9B7A73D40> |
27 <001C60D8A8C9B7A73D40> |
28 <001C60D8A8C9B7A73D40> |
29 <001C60D8A8C9B854D00D> |
30 <001C60D8A8C9B854D00D> |
31 <001C60D8A8C9B796760D> |
32 <001C60D8A8C9B796760D> |
33 <001C60D8A8C9B796760D> |
34 <001C60D8A8C9B77FE237> |
35 <001C60D8A8C9B796760D> |
36 <001C60D8A8C9B6079F9B> |
37 <001C60D8A8C9B64EDF0D> |
38 <001C60D8A8C9B6079F9B> |
39 <001C60D8A8C9B7D7E8D37714888B3A9969C9B649A6AE211DE5892AE2A871
F281F62C724D805D2A> |
40 <001C60D8A8C9B7D8BEEF> |
41 <001C60D8A8C9B6EEDB45> |
42 <001C60D8A8C9B7C054E0> |
43 <001C60D8A8C9B6079F9B> |
44 <001C60D8A8C9B81F2CC3> |
45 <001C60D8A8C9B66A6B53> |
46 <001C60D8A8C9B6079F9B> |
47 <001C60D8A8C9B6232BE1> |
48 <001C60D8A8C9B59F851E> |
49 <001C60D8A8C9B6079F9B> |
50 <001C60D8A8C9B6079F9B> |
51 <001C60D8A8C9B6F5761D> |
52 <001C60D8A8C9B6184A42> |
53 <001C60D8A8C9B7EF32D2> |
54 <001C60D8A8C9B7CB359F> |
55 <001C60D8A8C9B7D8BEEF> |
56 <001C60D8A8C9B62752C5> |
57 <001C60D8A8C9B7642729> |
58 <001C60D8A8C9B6F576EA70CDB8EEE2CB58DFA4035EC7CA2C41F31962CE06
AFD08C80B3CABE1F5CC03DBBA1CE00FE4F85E9562684A79B078A02E333BF2B34
4A58384B7F13CA2B27E5FF7C61FBA472F06543AD776218421BF27D0A9B4560F3
81CA2FD345A3955AA5D2F881BDA6EC6D81C29B2B127D6CDF7CAF3CDE4BFCDFC3
DA72FF3AD806BD5645B5A71AC60832CD79EAE945F3448F885464C86BF9BB9648
1600E1847E02C589BE1B560DBE2327F3164DB3834544F5B26CB99EA6D1267AE8
1F73C0FF3B> |
59 <001C60D8A8C9B678BDE0> |
60 <001C60D8A8C9B6CE04594DD0B731B8A0B2F0E84876E6EA3227DDF7B6EC75
00A256A559723A9EF8F96EE625CA1DF072BECBAEB00EB16399237B6EECDEA64A
0349D5B562CFCCF99B27F9AA912F1F18EDD76A84BAD77BF15C2F3FF19E8342CC
E5E28E8A000F2804B44A6DF8CD2029D15A0881392D17D5DB43A7F2FEF2172BF6
25C8D6E598E0BC2E17A4E7CCF641C7075B76CE26188662C7E6C9E650F50A66F3
BAF67AD108A13255D1DA8E7510D6F37B0920438CBE30534C399BCE64F33D75CE
858667961E2089E05CF9DD71EE5734B3A5DB1365FF17DD78970DF64C9BB11DCA
A5EB2ECB0E62BBF54A26F7FB37DC48A1DF4F428A081505C9ED5FA6D09A5BED16
1B48234E4FE2A92FE34A3691ADBCA3CE0331> |
61 <001C60D8A8C9B7D8BEEF> |
62 <001C60D8A8C9B81F2CC3> |
63 <001C60D8A8C9B692AA45> |
64 <001C60D8A8C9B81F2CC3> |
65 <001C60D8A8C9B64720C9> |
66 <001C60D8A8C9B7A73D40> |
67 <001C60D8A8C9B7A73D40> |
68 <001C60D8A8C9B66A6B53> |
69 <001C60D8A8C9B796760D> |
70 <001C60D8A8C9B796760D> |
71 <001C60D8A8C9B7AD0AC2> |
72 <001C60D8A8C9B7642729> |
73 <001C60D8A8C9B7B20253> |
74 <001C60D8A8C9B7008AA4> |
75 <001C60D8A8C9B7C054E0> |
76 <001C60D8A8C9B823561B> |
77 <001C60D8A8C9B7C054E0> |
78 <001C60D8A8C9B796760D> |
79 <001C60D8A8C9B796760D> |
80 <001C60D8A8C9B7FBE1CEF90ADFEE69DD2DD9D352B10CB42426EE82DC52C5
2D4F8699E0A310464D7FB1FA805D8CC4DAB824E1C70115C99A4D0C4724CCCD00
246EE5727B763DCCC1EF93F4F836F440B68CBB4BA9924DABB089DDC3F318794A
04D0CC8D5CBFA71E33ABDD1062939BBB2EF2A57DB0B26627DF9F16DB477D13BA
9B64308D9B28E9254BFC154A0BCA92D3CE9FAF30F5A21030ED7A722CD4D7FF3F
80EC6836885BE3B1F2C1291EADA749447A3397B77736C040716B308AF7942AB8
13E31A36FB9E2F49D3817C6B7D80057676EF942208B0DC64D84FF73D34BE1D> |
81 <001C60D8A8C9B7B20253> |
82 <001C60D8A8C9B796760D> |
83 <001C60D8A8C9B796760D> |
84 <001C60D8A8C9B7B2028D4737513764ECC7CFAE55E9EC00FFC4AFF6F26C2E
95EB0C14EBAC3AB5A6BE88FB49EE94C57B1016680D4124565FA444F884F152F8
93C9834D6128B3A3C36FC7C6B53F68898E9C54410A02D317C20275204D9CC72E
A672E5837E3B404119BFCC480B28845211915F62873C85F24F154472462A1EFF
F0BE17D6A2B129E1D27596F3C7AEC188DE3DD3C3A389BB6FCDEB32412A42891D
559459890010C0B7E1D77210FC51F248C555CEB229E25F3FC3B07B7A2801> |
85 <001C60D8A8C9B796760D> |
86 <001C60D8A8C9B7C054E0> |
87 <001C60D8A8C9B7642729> |
88 <001C60D8A8C9B7FBE138> |
89 <001C60D8A8C9B63C4350> |
90 <001C60D8A8C9B6232BE1> |
91 <001C60D8A8C9B7AED88D> |
92 <001C60D8A8C9B6232BE1> |
93 <001C60D8A8C9B7AD0AC2> |
94 <001C60D8A8C9B75BE5E0> |
95 <001C60D8A8C9B8A2CE7C> |
96 <001C60D8A8C9B75BE5E0> |
97 <001C60D8A8C9B796760D> |
98 <001C60D8A8C9B66129B6> |
99 <001C60D8A8C9B87574B5> |
100 <001C60D8A8C9B796760D> |
101 <001C60D8A8C9B8C5F1C9> |
102 <001C60D8A8C9B63C4350> |
103 <001C60D8A8C9B7A73D40> |
104 <001C60D8A8C9B6E4CB52> |
105 <001C60D8A8C9B6E4CB52> |
106 <001C60D8A8C9B6E4CB52> |
107 <001C60D8A8C9B6E4CB52> |
108 <001C60D8A8C9B5344C81> |
109 <001C60D8A8C9B5FD5949> |
110 <001C60D8A8C9B7C054E0> |
111 <001C60D8A8C9B5FD5949> |
112 <001C60D8A8C9B7C054E0> |
113 <001C60D8A8C9B70B6B43> |
114 <001C60D8A8C9B796760D> |
115 <001C60D8A8C9B7008AA4> |
116 <001C60D8A8C9B796760D> |
117 <001C60D8A8C9B79676C4A6316745696378FB3480C9E66CD4CC219635DBB
2087DE76E59F40D66DEAD4C38FAD622052CEF7A84ACE22E1EDB5A7CC2BE6283D
A97C1> |
118 <001C60D8A8C9B63C4350> |
119 <001C60D8A8C9B7AD0AC2> |
120 <001C60D8A8C9B74F369B> |
121 <001C60D8A8C9B796760D> |
122 <001C60D8A8C9B796760D> |
123 <001C60D8A8C9B796760D> |
124 <001C60D8A8C9B796760D> |
125 <001C60D8A8C9B5EE31F4> |
126 <001C60D8A8C9B7C054E0> |
127 <001C60D8A8C9B5EE31F4> |
128 <001C60D8A8C9B64720C9> |
129 <001C60D8A8C9B6AA0C53> |
130 <001C60D8A8C9B6232BE1> |
131 <001C60D8A8C9B6CE04AF> |
132 <001C60D8A8C9B5FD5949> |
133 <001C60D8A8C9B6F5761D> |
134 <001C60D8A8C9B6F5761D> |
135 <001C60D8A8C9B6AA0C53> |
136 <001C60D8A8C9B6F5761D> |
137 <001C60D8A8C9B6F5761D> |
138 <001C60D8A8C9B63C4350> |
139 <001C60D8A8C9B63C4350> |
140 <001C60D8A8C9B63C4350> |
141 <001C60D8A8C9B63C4350> |
142 <001C60D8A8C9B63C4350> |
143 <001C60D8A8C9B63C4350> |
144 <001C60D8A8C9B63C4350> |
145 <001C60D8A8C9B6F5761D> |
146 <001C60D8A8C9B63C4350> |
147 <001C60D8A8C9B6CB90BB> |
148 <001C60D8A8C9B6CB90BB> |
149 <001C60D8A8C9B59C10E7> |
150 <001C60D8A8C9B6AA0C53> |
151 <001C60D8A8C9B796760D> |
152 <001C60D8A8C9B8707C25> |
153 <001C60D8A8C9B63C4350> |
154 <001C60D8A8C9B7C054E0> |
155 <001C60D8A8C9B7C054E0> |
156 <001C60D8A8C9B5344C81> |
157 <001C60D8A8C9B5FD5949> |
158 <001C60D8A8C9B7C054E0> |
159 <001C60D8A8C9B5FD5949> |
160 <001C60D8A8C9B7C054E0> |
161 <001C60D8A8C9B7AD0AC2> |
162 <001C60D8A8C9B823561B> |
163 <001C60D8A8C9B6CB90BB> |
164 <001C60D8A8C9B6CB90BB> |
165 <001C60D8A8C9B6C769D7> |
166 <001C60D8A8C9B63C4350> |
167 <001C60D8A8C9B73B178B> |
168 <001C60D8A8C9B73B178B> |
169 <001C60D8A8C9B73B178B> |
170 <001C60D8A8C9B73B178B> |
171 <001C60D8A8C9B73B178B> |
172 <001C60D8A8C9B73B178B> |
173 <001C60D8A8C9B7AD0AC2> |
174 <001C60D8A8C9B7AD0AC2> |
175 <001C60D8A8C9B7AD0AC2> |
176 <001C60D8A8C9B7AD0AC2> |
177 <001C60D8A8C9B6CB90BB> |
178 <001C60D8A8C9B823561B> |
179 <001C60D8A8C9B8581AA5> |
180 <001C60D8A8C9B6232BE1> |
181 <001C60D8A8C9B6232BE1> |
182 <001C60D8A8C9B6232BE1> |
183 <001C60D8A8C9B73B178B> |
184 <001C60D8A8C9B73B178B> |
185 <001C60D8A8C9B73B178B> |
186 <001C60D8A8C9B73B178B> |
187 <001C60D8A8C9B73B178B> |
188 <001C60D8A8C9B73B178B> |
189 <001C60D8A8C9B7AD0AC2> |
190 <001C60D8A8C9B7AD0AC2> |
191 <001C60D8A8C9B7AD0AC2> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /HANBAA+SymbolMT-Identity-H /Identity-H 0 [/HANBAA+SymbolMT] ct_ComposeFont pop end end
%%EndResource
reset_gvm
/NTCUZP+SymbolMT /HANBAA+SymbolMT-Identity-H findfont ct_VMDictPut
true set_gvm
%%BeginResource: font XSVBAA+MinionPro-Regular
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /XSVBAA+MinionPro-Regular def
/FontInfo 8 dict dup begin
/Notice (Copyright 2000 Adobe Systems Incorporated.  All Rights Reserved. U.S. Patent Des. 337,604.Minion is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def
/Weight (Regular) def
/ItalicAngle 0 def
/BaseFontName (MinionPro-Regular) def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 37 /percent put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 61 /equal put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 91 /bracketleft put
dup 92 /backslash put
dup 93 /bracketright put
dup 95 /underscore put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 169 /quotesingle put
dup 170 /quotedblleft put
dup 177 /endash put
dup 183 /bullet put
dup 186 /quotedblright put
dup 208 /emdash put
def
/UniqueID 45549 def
/FontBBox {-289 -360 1684 917} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 650 670 437 455 623 640 700 716 459 475] def
/OtherBlues [-258 -240] def
/BlueScale 0.0437917 def
/BlueShift 5.1 def
/StdHW [32] def
/StdVW [79] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
93 dict dup begin
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364C
BBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0
D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917
B17192> |-
/space <1C60D8A8C9B889970A> |-
/percent <1C60D8A8C9B6E9C392045F33900BE44C7F894DD9BFE534A1886DB7
A8FB54AA9F6209F0CC37434971E02AC97D800C217956BDBF07FF9D185F9F4F43
554C373962438405476488A59633B15591DF21544A07831715F5D14EFBCCE1D1
79EF33CEF0BC43CBFD3CF58C58334ED8E01DBBFD4E0A711C6732B9AEB8AE3FF0
AA4643319A5B6EA773BD0222DD36DDB59F2D721229E7805C77830223EC9A9E7D
3735B09DC831A4DD49D4937BA9BF4F0B6A77C9D7FAD4B3B2F36C8B1581B41ECA
6B18D8E0951A3D79990A8D3B680B04D4367AD6C4167691D29BB016EF855ACC66
0B42C181D2A3C9856C2D622DE27F152C0718> |-
/quoteright <1C60D8A8C9B88DD95F5A65062C81109A915430713DF38BD8303
B74308F9960EC04103E99A5BED232C1A4AC8BAD3DCC1104221DC213A364DEE4C
36C5E8FA52D> |-
/parenleft <1C60D8A8C9B81005B6FE0F3AE7082C7127191E9C5CC877E985D0
5C78067C0BE329574C5459193E748682A87ACCA1227D83CC76D72F995C19FBAD
1E13418DB859C5> |-
/parenright <1C60D8A8C9B81005B6FE0F3AC1670DD2E1D3B57295258D54246
CF1C765374F0BB34512C55EA7E961ABE833293F0B712EF1C7E5BA7630F05C330
48007C66416A8F99E19> |-
/plus <1C60D8A8C9B7F7BFC2BFE5BAF51098490BA6CE860AA7CB3F1BE8C685D
8484E04920BCC31AB76A88F73E4562CBAFB94AFE137EE3DB22DB8> |-
/comma <1C60D8A8C9B886222609768578F4199B8D0A5B29D197CB6EBB8B5770
4AF536C8D25099E26B9927B2CD911FA9F098995B6AE32DC872475C8E618512EC
9362> |-
/hyphen <1C60D8A8C9B806F53A509032CFD1D5DFB277DAA8FD0E829C73A9AB5
83E61E93E> |-
/period <1C60D8A8C9B88622A20BEE6FE758C6EA81AC58F948B82FF4AEDF6FD
AEAA11545D5FED21207885C98E179> |-
/slash <1C60D8A8C9B821B3277D9101AC5E8DF431DE36A40CD2FE1D6D96EF0D
997CE630> |-
/zero <1C60D8A8C9B75BE5919947CB2EEB8E5EDD3554F80D5A5EB8D43768FA2
BCA09B7FC126C641D7099818F5775B34429A96AD0A1971F95384185745E5492E
87DB5BC3192EFA49E69C729D43CEFAD80EA68D521EF0AFBD58698E36CE1533E8
5> |-
/one <1C60D8A8C9B75BE5651F5D132308A19202442754D2A30883D8EAF95351
A8C134949F323EDB0D22B0EDDAD0A217D9FC289224E88C98750AC3AC8D0BC169
FB4FDB6CA987339936ED> |-
/two <1C60D8A8C9B75BE5656D406C6ABC516BEA8DD92DEB8A665E8A0A461A79
263E9A5C33F01EAF74A4BD5D64AB56C18232A9032368B467E13F256E87B200F1
21FCE5F82A1F1CD52D1FE97D1FE2826CBAB70DB9E8C1C695F5B4A87BAA18FF52
650CCDDF10D950C66B8AE4> |-
/three <1C60D8A8C9B75BE5918BFD7A3723E4D7BC5AA79B284D74FAD091E22D
6505E7130A2C4825374583699709E3DCA3CD562EF56D4112DD212DE70FD5A270
946BBA978D7FE4F44F08AAA2874C498DBCDE94F08A60967979B0FC498363AC7C
4AA1D694EF6B6BB0111AAED320145E26A79B7E2069778F4166A35C7F516F70FB
6BD667127753C5A3675B9EA1188B86EBDF261A3602A16153687C277BD908E8A6
A9E05B01F8427744375550B1DB1782AC41CC> |-
/four <1C60D8A8C9B75BE5651F5D1C65E8307EA378AB7070081E67782E03888
63678DE0DF92A363BCE5CF05EC5198E2CC9ED7E2FBFAAD368B09794DEEBDE1A6
AB90AE03BB20E945609195D0978D8EFEC2CCDB3FA19C32A87A25B344BE28AA93
07A07EC> |-
/five <1C60D8A8C9B75BE5918A2C96CD6820A113A1BFF3149D48DB17B211714
43F63168E0069646E9F8CD8F50BE7FC4D861316622BD070669900E2D906CAD63
7166FE1327E6B0E4CF30A4DF48CE0752D04D3C4E655179EC92E26B8E48012C18
40BC7D78F779B235C968CDCBF32EFCA49E236196BD5C4AF0205C252329B71C36
B718D22C170E511AB44D79C5EC8944F5E3A2B9C6A80026E15D0508B3ED84B6A4
554C6F8> |-
/six <1C60D8A8C9B75BE5919947C4FE04164B96DAD0D84C79BA3D86E22F463F
5911CB25181AB20AECD30D913D02EFA377D49E0C62226DB6F2780F5373AB902B
BDFAA0E6DC1870D9E24E8765480786AF8F5D0BD3C263A02D61D4F02960EFB251
198B8D55A9DDE5B0EA5FC743A7B1B6D917C706E9FE208067FAFD883845F16BA7
88AC0A> |-
/seven <1C60D8A8C9B75BE571108146A43A1BE967C88B55DC5E612102179BA6
6A883370A1418D997632F0395BD2AE7E7D9C5D29B331E15562A2C09CC41FDD5F
F53980B2839FB9A4FBF655FE197A1571B2D4FD21414E1BA9857FF7F0> |-
/eight <1C60D8A8C9B75BE5919F1D0BEABEFD1A841AFD0C0E56B3E871D3B349
0022158AE5C6404ECF0DE73DDF7F52A880E69F22DD99E35065E2CEAA3395DF44
4682BFE31A4EE3C26F812E79F99B20E6572047929F3B30FC825D434EE20863AC
630B81F9FF0686470CDE9ED5D21FA7CF6A17A589919686697E2F7E8E3E422772
65D67B56021FD7FFE92E83ED74E035946315FF2FF289D67ADB77BC2C775AE4B6
27FB7F26141D7F4D64C62860DD6700665AC5C21FFB9DB41E89C6076727D19C4E
432015266F885C0ED04A558F782630B4023C921D27AF56574E73> |-
/nine <1C60D8A8C9B75BE57FC6B532F2A170A90EEE950441ACAE53955C11F48
6D973B7BAE1145F52673F13119D98FB189A59A733A62939ABF8D935453157EC5
94131331DCA2C8CAAA1F4FC9E6F1037FD9D7DD6F7DC00DB99B656A2A79BEAE6C
A63157CF7EC77A63484F62A679490DEF82A14327C1978E1271609C78C42B118E
3B0AD> |-
/colon <1C60D8A8C9B88622A20BEE6FD5912A3CA4EF087D7CD20430E7702EBD
62545CF0345A61B998AD9E0FD48BB5B18EBB37981E69848FAB2C4DAD6C57050C
633499D164C1FABDC173776296> |-
/semicolon <1C60D8A8C9B886222A84EEF3B5EAFE77B686242D7465068BFAE8
05AE8F690DE3FD4C099DFEF3040590053683831C394C776A4DE4F362E035837C
4B294788EFC9622D53F19C0CD708D6874D244D93C06863E8CEB31AC33AB070CA
9476434160BC057B574FBE> |-
/equal <1C60D8A8C9B7F7BF959E9E78AC4205557EE13C00C74B7229427C2985
F39872BDC59C65F4311A6DB1D58C03246D3C02> |-
/A <1C60D8A8C9B6269C57F1D89E5CFEE7012EE5E3CA3F909077AFE6986232F8
3A9819B50C0D7894DA1B2DBE2CB97760785970030C61C5B9420844D999D1ECB3
F9575D55AB737C6C3F448C0F5E3CAFC2079899AC5821FFBC6D649103DCE1F58B
B102827EB9AF5A8FDB3D818B9E01769BAAFF06187509F2ECC4A40A9AD788> |-
/B <1C60D8A8C9B7CF7CB0CD959A608F82F224D153395E8E92D1463C31EF7284
95D35F0F4188BCC1822E0AEC881BA4554FAAEEFEE77A7725A272E836D2A69C0F
869A34F4633666D42D92E9FB5C0CD9AF801580663B848B037C6B1B39C431E912
3BC344B16AA7CAFCE18D1AC3DC3B226BB80A9CE31516746368F4D4DDE13B78A7
F14FB87DFF2934C1454A54E5EF6E321D66B69AD5A775B79F7E3517FFF43BEE67
ED5B3587A0511D47B665FAC2CE61835A55D0BC5C2C152AEA897DD7305305C838
E39337036B11F8AB7CE621E79636C9C5A850B900D5A5EF0664D0EA7838212E09
F1F95292F33159B7380EFF43D9002C222EB5D94FD458> |-
/C <1C60D8A8C9B64C38590AEE9853D22E0618C5A396800E4891AADFB5660F5A
2849D835111B9BFA866CAA4FE8247685835B23D4236F8CC3633A42E4CACBFB54
B4A55B9C4C60AE24634775ADF14A1C173481D0065169102B54C61A6B56D41E0C
E1AC9B60468060C39DB0F680992520F71AF891D70685E1691CA9E5F7EA581A4C
9659FBF1> |-
/D <1C60D8A8C9B6127D469F332F2B22C2B0B99862AEB8C78F320B962387D624
E2133AAF02CE996E579A0879A169E379FF76709E5EA18F2641863311AE640D6C
78B743A60464050C7AA7872950C01A973EEEB360BC10E8F3D3C1F4D9DB6199F0
E5180EF5C50059ABDB43FA304646661DE8AE5995CD8F929B5BD63A9D220D0786
0D87C6BD> |-
/E <1C60D8A8C9B7E39F0FC53EBE6A56A3564EB3A8DD7495F42517F5E7906B1C
62EA6617DE2CE6CCA72D7990F26F46720209824358A209F4BA8DABE470D2ABD4
C99DD7AE02C08A237777AC480423694F82D9032C0C0F4CD286F626C61B73AFDA
64EBA2A5CA37EB2AEB44A263425F1DA47B2FF39E21A770BB84559A806F8DCE05
88EF4E86F0D402B02F61E0F31706E4ABB9F81681BE9C9113EBC2BBC0BEA60D66
FD19DA233BD428825B5181DDB33AF9713058BB6EF5FC86F479F8D15847BC62AB
B90D1FFC33969538FB47> |-
/F <1C60D8A8C9B78AC356E39E16DFA81B9F820948431C941A386CD131AC929A
730CCBBD081781D26E32B2D669AE742C22204746D5C5A043ACBC6B879527AC70
941212F9F147FBBA5F3A2C2B4C73BDFFC279165BBEC8B5BFFCE82825ACDC7788
122E77196B693F19CE0B134379FFE260EB119525502793C53ADFED6EBC0F56E9
9C2C8E> |-
/G <1C60D8A8C9B63EE67EB209C8CA0B8EE9558F105288D7CBF0A4F2EA7EEC83
A966D98A5D2F1027C28573E975CF57705DECEDA096A1FE6072D7A5F2FF42142C
7629F753F72D4B8563657A17CED5FF857DD410EEE5C679860F8E6430600F9E4A
95723D5E337EB48553C0EF2C906248F723BC8C9939F31E5D8C513DED61DEEAEA
43669FCDA3A9B433CE9E84CC12AE8FFDBE85A7A8211396F0E3F417D3D39D603E
08796A5809B0C015B6C944496E55AF60DC140F8D11C68395A09C> |-
/H <1C60D8A8C9B6F3D357872DCB814C94E3D49928F3DF3AC942C5DCD73DD314
A7123DF0A23F2EECBA7AD683599EB3642178117A3CD2FD59FB4B9D78A8C8D606
19640D246218EC2B6331B7CA3F9CF1198EE8EBCC6BE375E0B65603CB776CA359
799867D8CDC2D4C648CCE11C1E1336786117A7F56DC6957CCB9AFA2B66BE8A16
323C6EA845A08137CCBCBDF205DD> |-
/I <1C60D8A8C9B817A008DB86C36D400071C0B293538D6245304B22017C078C
CDAFC1121E4DEA5C466158CE0BD3172ECAC7FECA5892D40E7664006F48B78BB7
DABBF8CFEBCDEA> |-
/J <1C60D8A8C9B82356EC89F1C4483DAA2EF05245DD0AF0FDD357809B848A17
95432888C1D07734903888FCAED334C91AE1B9A095E458B9B23D4B5E20A19924
1CDA0B20C011597DA4C14C78CDA78816E898> |-
/K <1C60D8A8C9B654A484FC9684C8FAA76C11B0A88AFC4E7D071A48170C34A4
A2AA1638D3D12DDD5BFDBEB1B8DA97E7DCD2FF8341E98FA1D83BCBC4E8875F72
AB18BC86D26F4F809CF6CFA59CE6243DECEF7AC45C6B9049DF0820CC98520013
AA3323B6E3E4F4E99D2BE43BB85FC23E59A147E1AA90560E85059B57860D9AF2
9E8425B86FF6300E01509DB263E0E5DB54BC2D0E643DDB791B2B825D3B8D50CF
9D07E4> |-
/L <1C60D8A8C9B78181BC3FC8CED30134A259C227984CB1EEDE8BF4BB656EB5
0CC1F478649CBC4607EA9A303597664F3D19E9E50DE6FDA844E230386A51B609
93CE67B0192DA9A1A1A587A0C5549AB0E6AE5C89A3BE00F8D360B8AE5BC26609
C42B68C1AAE8> |-
/M <1C60D8A8C9B59DE6994D3E9725B7F11FC54E8E098F7B2ED42CC16DDD0ED1
2EDB0042D3ED80B36F48BE5A43362C3180643DE54D981433905CACDB086EF70D
4CB6CCFCD5350BD454E8F6EE02197F9D7D1533CF1955F46AAD62EF3272B95C0A
105183CA1254DAEED631EDE48C5BCF9C59664E37B721AE94D9113892D747B7A8
095CD0E61355F0A7F9C2B935F901D3AFD129574D27BE> |-
/N <1C60D8A8C9B61AE93D5FBF22628D7625079C2F2B8BC356DA1A7736DDF1A7
C5FC48A432A2B7DE74FCDE1CAC91CCC104A2E4AC4F159DFF78D9A6CF21BCF76F
84EA684D38CC3CAB69DFC58A026B88E2F2D5345DA98C908415A799EA4A5B105C
2B0E69370D8F6D81087F40A26DCB643BA5D401847E86226796B0937E3CBC13B4
3AD5BDA2623331B3F92B861AA4D832EA30B1F8F1786C0A80411D29C8CF4B4235
23B56F04> |-
/O <1C60D8A8C9B61E13ED6D6CFCCA9B81193C8C24D5ECD93E33B45EBF805B91
C29D40C362789C89B2933A384CEB442716F63B79BF6DDCB3D3B83F9B36352278
EBAB0AD0A4208028560F4FF2E794F8F39E5A760B0F462489AF37861FE0F97AAF
855F78D22FF9> |-
/P <1C60D8A8C9B7E8979EB461EDBEBD7BF056CC4B0A21A6CFF1C8C044DE5520
207830E6F1CCB20D735F7125E00D1163EB6D25FF718A9B334573D743B03B6F86
344BE3C2E009909B20A7F9E2AF4A99AEE912CE6BDFC3EE5FF1A127B1269FA7D3
63334B3D06DB3E513021E3C9CBB35CD163671ADF4D7062A3EF51CCA03E24B247
5DFED8F768A355304D2134EA> |-
/Q <1C60D8A8C9B61C8C152A71E87B50D5B2FB6BA355751A40C6E9477C10E54B
F68C438799A83F7B61E67945A9B80ED5D3A81EF9261FB1276C6CF4482B086BAF
79884E238997B315456CB9C4F4C86D49CF141A50A90ECE49A1B5748BF6283FD9
1F06D8016EB342F1E00FAA1F94761A02E26346D466527B04F8D59B4B0508C26B
373E154848D89351495871EF05FF90> |-
/R <1C60D8A8C9B6605BECAD4216162BD274B46DB8ADC6F3185AE524FB6A5E00
F8A88B884041BA35D5346CDAA8C5F16481A3F81DC82B6C9876C4EC6B96B774E2
17B4551AE6B98FD8558C90DE34BB87A21D5AFF71FD37694110FADAF8A93765D5
A3350E8345DC1EDC777C5875C3C1C7555042402757E7BFD604D270C1C609F3F0
4612C9534524A3F35424849C6597996835EEB08018FAD64B7DD53C83A7750C5A
0688D77B5C4527626FBEBC48766B3CC00DF0157C5839EA9AE873AFF1943FA482
FF4D498CF10791434E159AE9B89F30E24FD7D42DD7B0AEB304BCE09999148591
4CE31E5A784A2B> |-
/S <1C60D8A8C9B741FCB722C871A47085610C333DBA0BEE7319C3CFB7BC6AC5
0101C166D3E56989D2E98F399027AC003FB8F3FD1C15D2033E208032EC856886
694235A2F962993FBB9057D7BC21B3F7300FC66B51182E4225688386EFEC4226
9CB33C24DD21258F9789D32DD6176C2574F759AE667954E8AA09EF98B148284F
30F1C8309971E6> |-
/T <1C60D8A8C9B7D2D04D4B72A35A60E9B5D85BB948579076F727E7A612BDAA
C2BE7436DE1960DA44BF80544C272113B79F319D20697EF0026E1F2CC5ED2E78
D01C31E68D3DCEF17B5AB450F42EAA02F8F98252A365736017A28BA145C87448
BBF45F1E08F47CCE7193591A66959718E2CF88D29DEB4C2C942E8A78BBC2BF> |-
/U <1C60D8A8C9B615D125346DB0D3A78BB9961E6859E707AE4CD7ED619AA630
204AE3F101264FD86C7D55A0CBE4D5A966FF394D6D917709C0E380C138A6A596
B5FB19B7A4E8BACAB7FCFBD2902A8F523AF58C4EF2967B140266BC18E0E0A104
A8C28B678BE2D8346D4340C345B8E8E2F5C06C5D03A149717798FCFDA045879E
99A5FD16C274ACC0C62494B2B6> |-
/V <1C60D8A8C9B63233FA3FB04EEE9E6D2FF693313046C2DBC540D7E3C8CB18
7F448D317A66222C04D9A1384F37D91095CF7B103FA3C4EDCCE4D3BEA213A697
D22D685CA8ADCED758A16E9D3BBC9A963DC82291C5073355C8AD6118E038C536
C13D250DD6A0C68F28010EC9B2A03D725E21> |-
/W <1C60D8A8C9B5CDAD9ACFFDA1AA4CEEE677F3E4A0A2605DA8C23C87427D37
6EC6A1A1507BB1B8F2A5568D1971D441A93BEEE2242B32E18AD3559E7848096F
1E102DCA566ABF8A5A610EFE466B870FCD051F8FE074404BBA2D3D3C692D1BB0
2F20D85FB881823ECAF14CF238FF07FD5F2982C5EEC4AE5092D0DCA94EA58966
23E991AFF222BF64BC10F024B97715CCB7754095DAF9EF3F551F2CDD3760E7BD
848466E6E7E3D740DF8529AADA261903C5794490948F1C68BC075DBC0E37BF08
9BDB6EC7CAB9D9> |-
/X <1C60D8A8C9B643FEEB0DE660562CC77EC51BCFA98378E321A12A3CDE4804
96EEC540C95A9780A83984DE136B759B5ECBD21C5B9CE7C3432DA49A66216159
7375A42BF76E7297CBA4AD82381CF451D1032E4554E5189DA2E914184CD933D2
94EBF9A04A061ACE853B9C8A7F6A89355F214237F69D562C135B7445EFBBA4AD
E90C8B09D341BBEBCAFE4BD3C43E60C8943C9127A5A282B71C9AAEBEF2716309
87226435362F627184956B56461D31614CC620750BEF41F6D9181CDDE8CB4688
9535AB92109F7034F4> |-
/Y <1C60D8A8C9B66F636528EEF37443E7438FC41D5374395EF24E085588AE59
A34C33FC32FDFEC5BA7DCB163FE8D6602C1D66BB09AA99A10488DA4A3AE63AE9
7EED656D45898007ED614625DC8DDA8EC04CA7280D2A9CDCBAE794325E9B33CC
707FE71F28A91B0967ED0C63B81CF147C306FEFB5507D853A12E327B8DD1B101
291AE5DD295C42249942114597EE5446921F> |-
/Z <1C60D8A8C9B7C0546598AC590C3E4337E4033F61AF39C4D3570C382EC43B
D17152E20AA49DEE061DC3A4A3CB32978A62014316D7435D7EC91AE40FF0D4D1
31859A6941C0E01D9D8D845CF9A29AD6942ADF8FCECAB461B4094DFD348F6C5A
D3AB5ABFC1F68CD3FFB804DFAF4B06B45ECF5C576A99B713403FA617A1341561
CE44CA1C8D769492A5BD7A776B22A96305172219DCE9495F28E39E> |-
/bracketleft <1C60D8A8C9B813795C88AFA9ACBA47F5648D0405A10C8F705C
C562EEDED1A957E288F866123540FE1FEA0F55AA4A0BDFF224D540C469> |-
/backslash <1C60D8A8C9B81F2C34C8420DAC729DCF7B806B56EDFD379CF25B
AD34A9CD13138A2E> |-
/bracketright <1C60D8A8C9B813795C88AEDBF2D2697AEDE6DB115351B0784
8807AAC3705F71F9D5317B27852A7305829C77C0ECB3BC8DCB921E8CC6E> |-
/underscore <1C60D8A8C9B7A73DB5FD3C3C923B78438AA59BF7FD93A39DC24
5E1F2CAD7> |-
/a <1C60D8A8C9B764275801BCEB63915F5FF02BF8AB60333C26141CE47A66C9
853155B5668A15727FAB13D2CB1D594E0C2E7910F02EB94BD92AAE34B450D473
0CB31219287D9E090740E4323C4623FCC3B2CE4596AEE687EEC087FF9F86B777
3C4D26C9B6E7921A3EBFF19910F42F465F0A04C2F991F5CB25ADE2245E769147
4890C4ADD00175C2ADF68BE2C9C76B3E463D43E4B7D554F39B8E6F35D693E434
59E1B123631D7058F61EB7D874DBF10CBD7556> |-
/b <1C60D8A8C9B7BF86DACBBA8E0FB5FACC01463C85CCA8EFB7F7990E983262
CE115559F5F7D80C2C0E94C4005B3703945DA69C6B3A594BA6FEB51406DC638E
49998D60BB3D5A728CAF5D631D77ABA29A8AACE450D4917BC4C68AC60C2936A6
C9D3038D64E1CFCD2DA94B691239A87B4AD4F4207ECB856AA89F> |-
/c <1C60D8A8C9B714A5FFB9038BFFC7DAE3875FEE6F1BF4429EE01636ACFABC
AED88F3CD6EDDA54B256AC3E53E05D56DC080EF13E7057881C86B56D43425EA0
43B464D5872B28D6FD5CA5976F599C4E3C11A39A044DDD243FA6E041EC8C6714
E0737A47B0F5AF429AFB65> |-
/d <1C60D8A8C9B78B915909484030072D94379B81F573FD4CD945D25F17428B
6E6068D5A07EC181BF3E85DF932DD76BDCF95ABE8BF5AEC466A9CF23FB3C9C2C
22A28441D32D756F05E7A52D9241C74CC534021D8BF1C6BD65CD6BD4E5B603D3
9BBDF3E6FB4BEA566B99598089DB71C76F9510C1EF1F081198E590B8208622FF
75E04E72A457E1E1F95DF7E6E5B26D40B9E03E54133E5E0A570D6B7BDFD8C29A
CD65629A2FBF947BC8354E62CEFB41C0424FF5C4A04A97054625A64EEE89A6A1
501830B33BE22683D80559A51AF513A672C04AC061E4EECF2D99F81CDC0BD345
8618172AA3D3C3AE56CC3A15FFE8F4BB4A9E> |-
/e <1C60D8A8C9B712066A3F11A19582022B95A6D6C8A197E573E1F49AE2C4AE
D6E29C5D0DAEE66950CB2EE48F784071304143CF8E9B7810A47E522C1293EC85
93DAFC60215C805CFFEBB41E9D153692F67CC4E8E0D52335B277B9C7D42CC0BD
0DA87AFFAD25C13D3067B6C5DC78F0A844A898710F5D499CB9D8D031BCDABE3B
4BB7FF89> |-
/f <1C60D8A8C9B842571D3124F4BF0DDF05E33D7E195EDCE196EA6155C78E25
6DE3EB0D3AB0E70BCADD27915BEAE4A24132D5E415FC963ADCDAF299AC67A6DD
930295680AAFDE58A4AA5AC3A31E8AC5C544D23429899E91EF6D75F22003697A
9AF4E580D8F2DCD901D1DC5C8A1F377A1525E81CE9A0E9CB3A184640FA62E3CA
0A657A06111F8C872896DBCE16A0439AB8E0FEFC66909437FE3AC16F66CD028C
F1FDE6D008BB62383AA07EB475CB782740888DF5E5341DFE> |-
/g <1C60D8A8C9B747CAE3DEB41DC322A9BCCC24AC9D6488B3E8D447BDF8E62E
54D1F78BD37DEA7F15DEB2C589B43975F344D1C7AE03B85934E34DCDFBB8C938
C4A938CDA6FBA09DCE4747A4FF92FAD206A42776D100F1D85B8A02832B58CF70
2CA80918330DEE8E4890FF4BC3A09E1D58596057A194126F9DEC49A6E6D2AA59
C0C3EC3E1CFE029A403837D10519DE3BE407B20EA775146E270E26CF615F2048
4FAEBDB35CDB1B667DAA69347E1BE66AEF263B873BC77BC78B0B8E970CDD77A9
5923047E315AF9EC48EAFF4C3AF3E847B1D82582054F5E0C8FE6F8D3B2BC78F8
ACA4D1D715E1995E5B98D58D75083F4D6A02A9FD7F34DF0788D5E638E8D50CAF
058A66141FAB280D2568A25B2432E51581C6B8E5DF8886F68B9A814109344A41
6524999A9D2915929E6158CF576CB3614C7351E683116F4929C8173D377AD852
C24CC6048B430AFFAF0CF92B998E8AD4C3DFFCFB275A57125EE828F95979BCCE
A2185B85A43AB696251C775E00979BDFC5BFD360433AFF21AF3AE82554137153
C27D5C97247203041877EB0D0F33E6D66E90A84F53A3112089FAE364880EB357
04FF5F5FB98DAC6BCB17F0D0DA1B2CC461D9FBAF907940464473E699E6D8F7D1
C5C0364FAACCAB0B24405F5C52C8E64ED927DA6953D0F90AA865144135> |-
/h <1C60D8A8C9B785CBC7A396573909395061247BC7AE16FBE1B176AE206FE8
DF452D0EDC0F335831962925F21F558717E6FBB616FE256D01A62D32E03C7E7D
1FFAE48F02C9DD4A3FE9FE4E49D0DC72D9A0041959344A3D470C38D151F81C1C
CB39A0B959F811E281723A845320EA3039E6D2686E1983D4E138D36B79667799
8E> |-
/i <1C60D8A8C9B85EE3D6723FB027CE514ED64386C0ADDBC10CD9172CF7D322
5F1A45558C173BD067BC03C02CE3870CC91BF25882F8ED057A581271714EA4BF
AE968113FA259859BC0396E1F021C066B88C56A2154A2945166DED75004CF64D
8F808A8C26C3932E749EB9565D1A17E4DB248AC85341180DBAD8603DF372696C
5604306BCBE775BDBBC216C02259281F79> |-
/j <1C60D8A8C9B86A9678F2022C367AADA90CEDE73D1620FE896176B93DB45F
B86C8B6434393949EF3CFFA9198B5D8B3E43E9CFFCE6306BB8B1FC43FAF75D0E
5788AA71B1CB85F09B0D4422857568290D99EBD5F3351B086ED140C2D33CEB9F
CD58551DF13B926E91E936B69347D50C1273363145C2BB899789B1E20AD61DC9
CF6302C013D63500FB204D4286998DD7E48D2485CD23B61F00AA82DE4DCD96D8
E3EFCA77C8BC8C885CC724B4CFB4691D2A1CDA094D51> |-
/k <1C60D8A8C9B7AB671ED7BAEEAB9BADF35788FD96D37C5FE87EDA05F4A4D5
868E45A0E4B27635895C9CBEA5A161096AC1002E64C722870B7AF125D28A7287
38F3C41AD8D8F7267386034FBE50000D9D2E9D21B07DF173A29F33A99484D346
A5C178F78E36F0A49003ED12991FBE30DD986EE25D788D3ECABA7BC11BF95CC4
2F2C82B0BAA8858FD7B3DDAC0D1CE81544BAA5346C1160E0930FFE92FDC2D24E
EB2D8AB5C6BBBA845BB7EE39D918E17C334485E66929> |-
/l <1C60D8A8C9B86FAE6A7701562D165E9AEEA0A09AB52BF3642785128A6112
A02B02C3490CB56DFBDD20682D2A7F7B2C7581FC979ED5967985CFE9C1910865
D3> |-
/m <1C60D8A8C9B6A6CAA24FE77FA839871162A3485DDE8E64BC88F094E75CFD
A7984E3F398549821694090441A2BF1351ACAB71B8816FB6AC72255F6C7C6FF4
4DAD6646293D8968BD045656D394B4D8FFD867A7E2B2A7C574930A148C6FEBA3
B1EB709948F8D99AF8E53110163ABF60C7E6EC6880C76C22830C408B6043C37B
BAEF8AE915432F9FE19FA34ADC7E2272F56E8A5759CE015E5DF281E079352A53
3E9D41BB12182DF40F91B5B767D41247A7655BB6834B00AD07BD2F02DEDB16ED
FFE6F0C5B07EB3D53F8546E79055D689DF69EA4B3C340D7C953600C2B70319FF
6F53673AE2B78B920BF7AD1B28BC57A3> |-
/n <1C60D8A8C9B798158BFAD22E50FEAC50BD34CDF8E6B20E761AABA5FCAE84
E4108CC8277B460D6EF85E2E987C31E3CF5F9F7BC117FDB43656FEBAEEEC28C6
F8EC682D2FDD26EBB1D1E525BD905C64D14508DDE4BA4190799C9FE25120BF53
B682CF47C9A61EA8F8F9FDFDDF221149259BFB091E2A9DC206AA35CBD920058F
42D156BC075ABA4EC495A6A9545175C8C0256D840083F75C7682E8ABE5CF10E8
94> |-
/o <1C60D8A8C9B7BDE312783AA3D4E1FE3D7552E28E15DA656FDE278B642983
DBAEF5E60B6B1A17352D00745958FEA1D46D015AC7FA20BD960D3DB564E35F63
1DF2CE4D39DB41A776711888B4321218F3666FE9D8554835> |-
/p <1C60D8A8C9B78FDBC0E24B4E71F4E68FD04DF7DBCD6E9E0F2D8317A8CBC5
F4017FC4A5641995852913954F1D21711EED69F166CEC30131BD59E350563BCA
B1877277186BB38ED7BD47B37F672E385E07054B6712599CFB92E7D9F845FE7D
FB7532F058F33B1A4CF21C9FA3EBF04F028914A532D3D2681C41C30EE6038C80
3A104437D0BC200BF1752DCE57EDD18459ED78EAF7CB5308D48C0AC79A353B> |-
/q <1C60D8A8C9B7BC12B71073331B2189EA31C3411B9E6DF1CA309768F4FA7C
FE2AA2DAF7E564A509C62ABE191F5374D7303817E5999367C339107B83ED20EC
C1E3E5EACC8ACA0EF1713B4F8521617493CD0E75A4246F3E74D108963F041019
70A1839DCE65BBD13547FF9D5CF347D57F86BF035267F7DA55C035316D190CCA
C11E8FEC23517433F9F445D985AE4303585217E237914330A7CB603287FB6B47
9DBD31DB00A6DB350E4A9A6A092A443C47FB856685D0> |-
/r <1C60D8A8C9B728C5D6D7FD070ED186E520ACEC251BA04B75FE063ED37C0A
7C1BD9EB7B1389A58CF8563694690EB0DA5FB501A811124D1CB3BBE78F35E12A
AE88F2930C560E8399932A5C5E11D096330B31B92E8FD4D470F905E5EA64D214
6B597D3A542DDDD6454B39EE683F9CC219EEDDF136AAE67B30D28EEC7A1D09AE
8C2590C35A65CBCBF2> |-
/s <1C60D8A8C9B72C0F790C06E9ED440FDB7A5C0251C07B3963DE48D3B989E1
63F2E07717A9383AC8F1064DAA79F6A8F716F7EC07F56B5A3A0CD7F60FCA9F04
94B18CF204887AAA1DCEE475586553B4C39C7F974D166D27F054609A80964753
42DF2A1D462192DFD2189F7A15825BBEBBB3EE68A07255B23F7A51AE> |-
/t <1C60D8A8C9B83BB8EB4E4E159BF21AAF53F1595B35E23D07CE7D6141BCF7
DBE6ADBEB14E74896D910AB4EC044FF185ED9EAB90514DC36DD8A5568A32109F
3B2F84AD49F23F754417CECDF725D6BAFE15E3F6DCD640BD439DB1910B33490A
C21A9035CD0F05BD31B0FEBEE52EF1A118E17DD8> |-
/u <1C60D8A8C9B7883CB391968B438B332D114C4488F11B21F6B5ADE696BB33
63CDB8F71BBDD0ECC2744CEBEF1AA08F8CEAA1AEF31CCE48B632CD4C2CEF72F7
4D2DB425EF881D5F28BBDF4F21A5EFB2AC88AD0CA2A4750DA7B3A40A8197675B
AF71D9851321780970CFF786502EDED6C539F20C970FAB264E0384116E0E36B3
7C02B93A3AC73BFF645ADE56EB8C280D9980D0FBB579A4024E595085804C6E12
522239479CCFFA409D1921F18727F34A832EECB507302AC313460524FC6D666D
8E5B01CCC8C8502C93FA45C1A80B3EE77B0446E999F3B874B60294DD771D962A
3392AB1A7E83572E8F40A8B9CEA12D6D14DDAD9C5FB6> |-
/v <1C60D8A8C9B74CDDFB3DAEC98891B92C7BEB603690547CE476AA3CE8A1B1
412B43C7315417B1E065750D704DC411D42A4D6A28788E12206183080FA4E4AF
0E197A9E32E3502CC16705E6CAAD60AD0DBBAF69C89BA12ED5A6774EACDAB1B3
F068DC02AEFA1B2ABDC6412A> |-
/w <1C60D8A8C9B620B7918E6F86A312256151460DA6F092CC8D56B8FC030EB1
6EEABA4E243D640E0F25B1E1B8A6DF5832CEA80C23B0E5E115328147E9ECA4F6
BFEEBB2FAF68E32141A4680AFC46C6A94807C70FAE50120B41ABB9DF853C4059
31E5EA04CF6E834C2EDC2175AD73F481F6F95FE8D4A8CF9D0DE4908505220299
6386FB811BCF91E1D7368B8F1A5FFFD2DD91ED> |-
/x <1C60D8A8C9B74383E58747204DD7AAA89A1D7732CB7242EAC894297FEE49
701ADFC2A58554052AAFBA27064D1CDE1E4F2194877F377294D4D37B5C8C4B55
594E605B5B3902CB9A5016CAF7DED720D0E86AC1CD6A18C00B2619543C4E09D6
A2095D89DF210447B56C6DB67050BED37FBB4F19AF56141DF4735E3E77B36C66
88805E1C11A52FF23BAF0721E19E92CA3738E5C0D7651E332E8D3C3D39CCAA82
4CA6243DACE48141D012EE965E8D397406A61411A505AAC94BB34F83DA611E> |-
/y <1C60D8A8C9B770DA418ACB94A5CED41A244A133A7CB7817C84BA4333C28C
A617EB82E0194CE16F947DC8CC2E322BA8C468DE97D1BDBAA3FD0A8E2CD24520
45581AB916C0E79D9B42FC193F200D48AD0DD6F7F50AEE73058FE1FA4286B034
972DBB2E85BB2C90BC014490FC99020EC8BED49068C1289EAE166BD7A1D934D7
C2B2AE1EDFFBE400EBD71E6072A14E9E5058126A08357522> |-
/z <1C60D8A8C9B7171EF8B6D68EED4397F32F9CA5281734CF1F036860B7BE32
18BAB1A9C3DC5506C41F14B5691919D2BCE8C3960EE4B44C355170C075E656FC
BBE102F76D4E18B0198100817CF1382286EDCCEB50D958C4EA37E13AB8558CE2
1481F743C1C1178989A3BD7A600C6C4EFB88A1029B01AF84F219CF2D0245A8BA
BF1BA74E7AED020CE2D9DBFD500A715CD1EB625EF3EFFED7EF7FED9F7666670E
4CD5> |-
/quotesingle <1C60D8A8C9B8C352A45EC3D40009AE4F5CB4D862A9EABC2D8C
80BCCF46E67C1742FB96655F3CE2C1AB42B679C7F3C33A58BDE54B> |-
/quotedblleft <1C60D8A8C9B70D0E7D864744C95CCA25B5C46DCEB8A016383
57A8476F6894FAD8CB7E3E312B61BE02D2796CECA035EA03DE6B43F753D17AD8
1EDD9705973D8683E724E6D27FDA4CECACA0C02BE47B55B2B960CBE650CEBD9E
5FA7986CC2CC3955F8940BFC119807C8DE7A325465CA8B79ABEC7BB8C0947F6C
2> |-
/endash <1C60D8A8C9B7B3D0E408A30277070AF2EF678F1C34153C69BB1D43F
2ECAE> |-
/bullet <1C60D8A8C9B73549E78667C9461C1B3E9FD860BD6B52131387942DE
EF780DB4B755826A4E74D9D4857E3FD> |-
/quotedblright <1C60D8A8C9B70A9A6065BB2A49CE244D52DF06D0E471310F
FB2580D28407DA5569619DABF1E8FD805B8D8A85362E6EA2B13E48CC3D58B1C5
6368E82170ACCF8EA9CC000505E88533EFC3A3DAE564BF4E6F520B3FAA0C7166
541157560431E27DE3BACF32AEC2F9ADC52299F48BB1F1DC7BC081AB4262F005
F0A72723C700FDDF1D410F5DD7DFF8F24E82FB7B78600816D37FD54E0E5AA18C
17F7CDA48C40D4920CEEEAFC0915DB1A702219EEE95ACE58185869DA83AB88F6
E5C4F2A6726082B4F440236300691E1E> |-
/emdash <1C60D8A8C9B5BCE7647F87A0D00BB595F27C0223989833EE11765D8
BECDE> |-
/plusminus <1C60D8A8C9B7F7BFE9816A0FEFFE33C65E097ACC9D9D06F3C1B7
E59E966E88EA513E3A6CD2F3E1193EF13FF75DC2924BD81520663E03FEA45E40
B8DCC42C967BD5BB30A9> |-
/degree <1C60D8A8C9B8151C268FBDC5DE01C5A081433BDACF400CC79EF7FBB
5AC0CBF046B2C3BA8842E3EE2D24C8DF6D0B4F612ED1901B0D1015714A9DA18A
BB0E7768FF73867FE767E63C37F> |-
/registered <1C60D8A8C9B82BC33586F961CC5321FEF53E77877EF9EAF53E3
A0BF16140C16874B063914E74681E1A720948BBE1D78B3F9125C927F4583A192
7162B06473B7035B7D3C092E7AAD6E9766A263D37EFDA4F05575A9F1B763C3F7
94DB98D8B2BEFC02D88155FD25A1B51E0DA9FF6AAB17BF64B13D8AC52F2674FA
C2869C03BF2008985C49328A949E0551CECC7916FB584FCB7C8E1FAFAE2A73F8
B1D261F5AE6D40F0E696084AC1F65E0B893C2AF529C3E8DBEE9507FEE081F858
A8232CBE3711B00F14A60F2AFE47955D6F71F7A2B93D98102D26D> |-
/multiply <1C60D8A8C9B7F7BF9AD9CD24B6ACE24DDD4E780AF68C55475466A
15E9280F638FFB1387E933F96F5C523727C980EA17F3FB1BD9F3B6BBB14431C6
F9A85E43CBA84C5EAE91B91C00AA4E3519542DA4DB3CC> |-
/Omega <1C60D8A8C9B6E80D1A340804F947B3947D53B80D03CAB1A745150C65
87B13E76B33984408715091299FB5B2CC36D1F520D8D21E792BC7CA565CF15B4
05C112E78DB83E453197F722BA49FFCA746B378DFC177810BE460DF8FAD12D53
B8FE4350FBC303626F5D483A7B8CEE305A4E67E4E39E83BBD9BB2B5F5382CB26
13351FA51F17CEBB464589C5D078> |-
/Beta <1C60D8A8C9B7CF7CB0CD959A608F82F224D153395E8E92D1463C31EF7
28495D35F0F4188BCC1822E0AEC881BA4554FAAEEFEE77A7725A272E836D2A69
C0F869A34F4633666D42D92E9FB5C0CD9AF801580663B848B037C6B1B39C431E
9123BC344B16AA7CAFCE18D1AC3DC3B226BB80A9CE31516746368F4D4DDE13B7
8A7F14FB87DFF2934C1454A54E5EF6E321D66B69AD5A775B79F7E3517FFF43BE
E67ED5B3587A0511D47B665FAC2CE61835A55D0BC5C2C152AEA897DD7305305C
838E39337036B11F8AB7CE621E79636C9C5A850B900D5A5EF0664D0EA7838212
E09F1F95292F33159B7380EFF43D9002C222EB5D94FD458> |-
end put
end
dup /FontName get exch definefont pop
end
%%EndResource
reset_gvm
/NTCUZQ+MinionPro-Regular /XSVBAA+MinionPro-Regular findfont ct_VMDictPut
true set_gvm
%%BeginResource: font JAKBAA+TradeGothicLTStd-BdCn20
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /JAKBAA+TradeGothicLTStd-BdCn20 def
/FontInfo 8 dict dup begin
/Notice (Copyright 1989, 2002 Adobe Systems Incorporated. All Rights Reserved. Trade Gothic is a trademark of Heidelberger Druckmaschinen AG, exclusively licensed through Linotype Library GmbH, and may be registered in certain jurisdictions.) def
/Weight (Bold) def
/ItalicAngle 0 def
/BaseFontName (TradeGothicLTStd-BdCn20) def
/FSType 4 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 45 /hyphen put
dup 47 /slash put
dup 48 /zero put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 73 /I put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 88 /X put
dup 95 /underscore put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 117 /u put
dup 120 /x put
def
/FontBBox {-167 -236 1000 964} def
end
systemdict begin
dup /Private
15 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-10 -0 722 732 538 548] def
/OtherBlues [286 292 396 402 -170 -170] def
/FamilyBlues [-10 -0 722 732 520 530] def
/FamilyOtherBlues [286 292 408 414 -192 -192] def
/BlueScale 0.0562917 def
/StdHW [72] def
/StdVW [112] def
/StemSnapH [72 92 102 108 112] def
/StemSnapV [112 118 124] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
49 dict dup begin
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364C
BBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0
D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917
B17192> |-
/space <1C60D8A8C9B88C088B> |-
/hyphen <1C60D8A8C9B81F2C3AC833611A6F9D4528F55782FCBE4C47CD2AAB6
6E40E> |-
/slash <1C60D8A8C9B854D095EF5DCD7119D377D58AE8D660D6C0EB626C9A8B
B9464ACC88> |-
/zero <1C60D8A8C9B77FE2B88D46EB72B36EA5FA6910CFAAC73BFE1A501F07D
0EA02ED96108B03619A6824CE8655EF339532F16A84B4E236FDB2D62FF289F61
7AE0647030943B35F40874F9430192AC207776B2134590E15189F1A6A8093> |-
/three <1C60D8A8C9B77FE2B88D46E5787B782E2C5B992613915BEF887EEF88
918EA2E5415813BAF558E1E4FE6A08F65CA7ACA9F701B031499EF7F879C9EDCF
8ABAF800D599C1812A92C63F2133ECC6448E234969C7B780D88CD587D84647AB
C87623BCB872B608525E2499577F2136E55D0241591B2330D2DDC4528B87B119
6C5127D07D18DF02716F19669294291F3FA1B2CDD4A46FFB6910768FFC23739F
5E2EC711F5> |-
/four <1C60D8A8C9B77FE299176F6C33388819B92D017426B9D3CFDA924A86B
72AB82923F447A56A58CBA320FE83358E1CA02533EB7F5A3674779B276984FB7
18512BB408E23694787B652B42D> |-
/six <1C60D8A8C9B77FE2B88D46E5480F6EB9B1AB5B53C6A05DDEDBE4E5035D
39DDCEE219FE1FC0F3F8BCE46F74A0C9428C95222B7FFE7578EDE8F2AFF2AFC2
C873962966C4E63955355C99226FC6F284D0DD74981261B0741EB027329A7C09
7EDF114E4AFBD04422E8E2D1D9F6C854207B5D5959FBD2C2B3A6EA10B1C7CA1C
26D41138C6920BB9F6134FA9477FBD811D52B8ED78BD57BF0B736D671F58AB06
CD5002445DF4F68DAE54554C3FADD475D68DCAC992C1222341F0A4FD26ECEB34
720F26E0D1> |-
/seven <1C60D8A8C9B77FE299176F6260D1AF93662C527809F8BB0C2502AB33
D2B332B50A2284A59B44D032764CCD9C46DA> |-
/eight <1C60D8A8C9B77FE2B88D46E57AC48BAB48F3053F48F50A21130886D5
0272B2019909854EF3327FEA60C14883E7AB12BA511C673B62A1E06499C1E4CD
2C869158B33ECE67AB678559A056D071E037463CF356A6C51ACB8A6330170D7B
D2D2A867F3E0C53A080FB0FAD7556D1C7D602DF3ADFC73F1FE9691F530BC15EC
BBA064B6495A0B1662EBEF442A50614A0B7336B2D49CCB9EA817CD2A2978945B
5D8796D7F55DE156187C57C506F6574BA4BEADFCDBDA7AB3F865F23CAE7829FE
F96B0D27B9B71F9FE7CDC16A3CE902D40AF25044> |-
/nine <1C60D8A8C9B77FE2B88D46E50C6D0AEF72E394ECF49B845674B2B05B0
3CDBC306FF4B4DC8AF58DF9F7BA862A495F3E38BD90EFE3637B5B040383ABF09
05ABD1C3998739BE50869C631EC2ADC141B1EA0145C75495D0D47FC60C822014
C65A7E6442DCE02632F62288A9DEAD20433CC1E6E13FA1D36D20667DA0FF1F9E
78BA911E52A38B09634BC38F469B696AFD5F2DE0538D5CF4C60264A458E3D708
6842011848C9A7745FCDE37C2A00A71149F2A299BCBE6514A0270FFCC166E09F
C072CEB57> |-
/A <1C60D8A8C9B77FE299176F6C4594944E6125D25AF948BC13A887D9DF1E13
7DB55956499CB15FE263985794425A58A04C23805DC3A4DFFC1FF4F03AFDF4C9
09B3FF5E42EC637EBB> |-
/B <1C60D8A8C9B7A73DC522905B1D284A00A2C9654E06F3ADB28DA326911EAA
AF304BD298A35B2B08BC06DEF8E0324FCE400C1B4B5B2B17ECFA3711F6466433
034FF8CBA0DB0B20705896C55EBB879AFDC5C70525835191DB8B6EEDF767CC4D
ED32F645DBDE3D70C8E7B61183EABDCCB6913C43810208CB29B85DB11E7C237C
B419545BAD602CD7BF2D07B9C8A66F16281E322C502ECCE23AD3EEAA03342E01
1FDDECFDD4E2195F0E946233481408> |-
/C <1C60D8A8C9B7A73DCF144F31AEE1C77B0B2F8DCA22FE012332D8BAB053A2
A941E097440E2DDC0402D1268AAD1138588FE7D8F3B9D592957501FA5DCAAE63
431F0C2FC0F7E49B0A8D2736F5B0F9FD20409F89BE8790420A895DD48B49AE0D
75> |-
/D <1C60D8A8C9B7A73DC5229055EF617EDC83AC1BACA516A6A59A5B6A5A273B
1795F1BF36120C2A0F5EEAE70EB2E7859CE8642A1D41D59DA20BC23C34C2D07E
C6453A59D4965F80F63838862AFE> |-
/E <1C60D8A8C9B77FE2B27DC2FDF2E10F1629DA3166212012C6B05ABA358775
0D60AF4C3C8DC81D2EADC402E902AD2F974E81C26D0C1ABDD279CAF6800AEEDC
4407> |-
/F <1C60D8A8C9B77FE299176F6CA53C86B4D74CDE3E8FB040F33E20255BEF1A
8A536AD3C720E58D9290EE295FC8466B436E9455D4D0F5453B8443> |-
/G <1C60D8A8C9B7A73DCF144F31A03B09D54B6130ABBB9199DE13CAD76C4C7D
064C9475ABDC51C0B609A7372EC864C9EF3B2F32681387CDA3C2F2148852EFF2
1EE20D36FF94BDFE0F2D223535A4D23A4A76B8C4513776A11FF60B0A421E83E9
4232569173035E635E490532C52A49C327E3019AB9F33400E1440BA304DC9C3C
3099C9C7E681E3> |-
/I <1C60D8A8C9B854D0A3953AFD522A4302EADC12FD66F59A52877ECC02A33B
5E5604> |-
/K <1C60D8A8C9B77FE299176F6206F9A767E486D4F540BF595F2A10D5AB31AE
B5EFB56DCE581F9E3D9F9724BF9E6A64BB696C67A03844974B868390AB45E8BF
21BF71E980C9> |-
/L <1C60D8A8C9B7361F7E59E3A89458D5753B1143001604B1DCE035A4DC5A94
20658503718EA7E7B3AA> |-
/M <1C60D8A8C9B7D8BE41A64DAB0218C14D3DC031974D6280017BB1500F686C
87F0B98311F4598A3ED5957BDFFED98503163895BCDC66F170EFAF9BDB5B4A9A
1581536B9BDC06CC4500691846B4D19C22E0BDDEC02BF302C6CB915F2C44619A
C82AB6> |-
/N <1C60D8A8C9B7A73DEE9439F821BC5B78AF32EC0F26398C71E987A11B9374
197A5D42FA25FBCC77FC7D8DA2380D542EDF0841ECA60E77819A8D39566BA831
9206> |-
/O <1C60D8A8C9B7A73DCF144F31AEE1C77B0B2F8DCA22FE1B3CEA7BD26EF2A2
82093536B5D55FFB34DC67D484724134096B1E0E5DF91823CBBA7E47609B3A5C
BF87204DC72B2223D272E224D820028ABD02410BDCD4F7634F> |-
/P <1C60D8A8C9B7A73DEE9439F6164982C23E6A74DFBCB063CC7FEE075C3579
48CFE87B9845D16564D7A31CCEBC2CF2E4276E21FCD68EDB97FC7672D07E43FA
3689F5532A65F682B346CB59F280B078> |-
/Q <1C60D8A8C9B7A73D1B497A24FCADDD6054BAD241E8B397AAC2A07BFA3251
917859DFCE793CA479716572CBFE0F068CE2BECDDA64CFD1DFBD41D53B415E4B
04DD186AD1DAE1BEB6BA6A14BA2578B8DA8709591CA23ED9D8D3B43411A76BD0
06DE71E5C032B617C785FC6E3D713682D7EAE7ED818CE3CD24840608E2D65D79
B3F145696EAA8637CD1AB748BBFFD095F087F81635DDE71C2319A082F7F6F594
D111DFFA77C7D06E5918A4480E753DC1F9650E7B6A804FF5B321485003F11FE7
6F14> |-
/R <1C60D8A8C9B7A73DEE9439F6164982C23E6A74DFBCB063CC4D30AA593FFF
D53361EC85FA0BCAB0F34B5238D8F9BCF3FA7DF7AF580A44A9A0E364607344D0
CD93D563904A4D8210BB1E55BBFB9982C7461886E501B7EF70D5D98EBE2D7BB3> |-
/S <1C60D8A8C9B77FE2B89757CE43FDD42F0DB48DD7D2E1C63182B706304EB1
2696EDE80B6BA7F555597310EE2E6806E47F905FF75D3470B25D8FF1644BE69E
16E792DB61231638B6D7A9013B5CEA4FE2303ECE777A21701C158804D6B89393
4C5BB50208A0F6D7F88416A0928D84DF85F5F5C21EFCC7250E611E8B55D17B0C
C315769EB01FD14D9B0235ECA229B8F4BC53D6DC6370130DE8982715592F2B23
DAD17741B8FD304ED36759448ED058B78DEA099D0995244E47B102A1A9BF9D69
BD> |-
/T <1C60D8A8C9B7361F55E947F988222CA2B0EF82985E020F09F53183397D65
9D3C3BC1856F19469D74BE3A1C6068ABA9> |-
/U <1C60D8A8C9B7A73DCF144F31AE8313A5CB4005BAFDA84D5622108B807E67
A7767EC18DDDA973C3ABBDFC1C9B091E9848B3B2E30B4AFDFF801CE4AAFF98C7
E08E87C80244D71C> |-
/X <1C60D8A8C9B77FE299176F6206F9A73F2A4E00CA81209E5FDC9B53DA60B0
BE082D6BD17ADF3D75C05703CA617238AC05E514EDF09403E66C359C40C2FF58
97DE9476F4467F8F> |-
/underscore <1C60D8A8C9B7A73DB5FD3C3C923B78438AA59BF7FD93A39DC24
5E1F2CAD7> |-
/a <1C60D8A8C9B77FE2B88771D8F2B05CF2E4205CD7201AD5296861B1F739A7
14250323606CA7E1FC3A4C74016DA638FE03B6F40DD44D12C94D1935F26C50AC
8554B3522A25F1CC3778A88976E7BEDB9B613D797C908A68116037195015E4E3
FE2340CDF5D1615688C57D4A705073203767DA1B0EB3DF827B28F7399561494C
A85A9D0365D87CC30F736C3E05DD8C7F9BBBD2FC81A40E82DFA2F02A54C313C2
4F082BD84316AF10DE046771C8F7DB91979E5E> |-
/b <1C60D8A8C9B77FE2B2571F5928039BCE142D35B3652F0A40D5F73AF2E09D
4716723007C1F338382D29FFF624721AE0FAEDB6D1526CDC9C8264C0DA5B3AB6
05363C9654368B701397D6E4583654C78DD43B3076338552A349B35A0F2CFFB8
8189220F293B99EF109E0839D4B743175BE419B54D60AA83E06791CC28C46A0A
225D702DE42831FA529E74165ABD941B25EA6B4C29AC67431984A048D1992D4D
03716F93F38297E026F37BEF95F6> |-
/c <1C60D8A8C9B77FE2B88771D8F2B05CFCD441B764D20EF1AD661B6C97D2C6
E91455012628BCC3586D0BCCB0342C270316EC50412253C0174B06E9609E2F96
DCC872C39C2485C673EC125F19B0F69FF8AFC08F071B1C9C3F83B776979A99EF
EFF2> |-
/d <1C60D8A8C9B77FE2B2571F5928039BCE142D35C9B8592D176561E19DACFA
9AB32683D07B968B53C7173317B5EDC7A2F127A6A5CEEE343ABDC33F74A922E0
3E0F3137C137D348FB9C2CC6A4C675B13A43D955297C337AF4B8ABFE22E3C4EC
A03B9E4413C922D91F2054AA586C39A9A937BDAF25CD2A44C893B775F00A4F76
2241AE9C8655273787B1F9ECBC6DE1A1C10B2EC92D3EFE60F029E187B3DD8146
BCAFBDED32F5EC44E912CE7F57> |-
/e <1C60D8A8C9B77FE2B88771D75360B69D79635752920EFF4A567FFB91DEBF
1BE902A67518EDF3476FB030249751BCB9966FBC7755BC0FAEB6DCB5519A0E09
741216290A654973280A66450079DC62A517165EEED00DD25E9BE6FCCBC262AC
F85659AA1E73B1129BE4B56965> |-
/f <1C60D8A8C9B854D0A3953AFC347634041318AEB093B7FE12D4CA026EC5DB
3963F709309B34F8E2EF83467FD04991A7A72022513C30EEDC1D435DE34C0777
FFC98B> |-
/i <1C60D8A8C9B88C082599D5E967AD8655F520E58AFC7E7608AF54B79E3B12
C6A1D776B3D090FDA4E4EB2114096BE5A96760BA> |-
/k <1C60D8A8C9B77FE299176F638121E62D8DCD47C64C90DB0D3047B966F4E7
BA7428CAF2945F664C589388A69A6A03F33BDF25AC70C09F6EBBB54C5F4C6329
6B8107473DFAD7BCE4CC> |-
/l <1C60D8A8C9B88C082599D5E89C8BD9EB983CF31E6C53BEA93B3CF1985AE2
E41C57> |-
/m <1C60D8A8C9B64EDFC273833D6AF96949D5BA032007B6A0A13523E02E412B
2E654675A021129E21EA6620FAECD294B3CE905DF7A969B7D80B04DC05C82A04
1D11B815BAC8EBB590F59E5F64B422421DF540D6D270C1F86D2B8B7D0183FF2A
BA7704414F4BA536737228EF6645CE316D51377160C22450A235B603D85C9858
CC9BF4D67B8F7C53AD03CD683BC7FD8CE2BE689D12DF27FD75E98E9ECC14C310
5A13564C0F1992609E6FDC63B28987E24263BD> |-
/n <1C60D8A8C9B77FE299176F638121E61566CAA78FD826E0F1981167C0DB82
29004AF74C1B5ADFBD82A536DB05A9B9F0F9B66DFF7ED376B8657D24CB6A420C
5545B35A7897162583D65E4E5BF93C13AE275741117A58661807EA63E5B84232
31B47414F08E50F146DBDF656958> |-
/o <1C60D8A8C9B77FE2B88771D8F2B05CFCD441B764D20EF1AD6916951D7A17
0DF738A9B56BA44DFA9A8B5FC7EF5EB4CC8E5E5FF24955AD5E2269AD00005A6E
C4D6B89D59976C2C1EE4A13C3E4FD193BE18F4264B8A1F07C6FCE80096> |-
/r <1C60D8A8C9B81F2C6DADD030889E0BF841AE32115A74E6B220989EE355B7
2989B766980530C01981D9C98833F6AF59A1E9AA9EC59AE053EBF0BA0183D073
80F4B002A179F3D9EF8EB4B8DE87C348D1D1ACAD761D90C5> |-
/s <1C60D8A8C9B7361F7479A8FC6FC3D2AB3AABC404C1B7714966B1E43B9493
307D8C5FF8026ECED95D2A1901F439CEE80EF691C93659EF645CF1ECFDBD2DD6
03C868F4CCA3BF527D009D31535E2C4E4B6C4D7FC0D567597B46120C617E7E3A
7D2CB006> |-
/u <1C60D8A8C9B77FE299176F638121E61566CAA78FD826E0F19881396B021D
A2024E6A3EF93461ED3F5600185DB1F41752CF2C7A968561D8F1053531C67B21
EC0D9013B31AA3F5F8CCC54307D9A96B3B958AA04EAE02EAB560295B7E818D2F
2E552F7CDCF6912BD8C228DDB475822D> |-
/x <1C60D8A8C9B7361F55E947F9DCE6E3C12BCD2E48135A7A12B2641EB1EB5F
15D18FA4DC3A7914E8F29879FC81B9670E957427A2A04FCB43C830B9283C8978
4EF9FC8A15A8> |-
end put
end
dup /FontName get exch definefont pop
end
%%EndResource
reset_gvm
/NTCUZR+TradeGothicLTStd-BdCn20 /JAKBAA+TradeGothicLTStd-BdCn20 findfont ct_VMDictPut
true set_gvm
%%BeginResource: font IBGBAA+MyriadPro-Bold
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /IBGBAA+MyriadPro-Bold def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 2000 Adobe Systems Incorporated. All Rights Reserved. U.S. Patent Des. pending.Myriad is a registered trademark of Adobe Systems Incorporated.) def
/Weight (Bold) def
/ItalicAngle 0 def
/BaseFontName (MyriadPro-Bold) def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 37 /percent put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 95 /underscore put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 177 /endash put
dup 208 /emdash put
def
/UniqueID 44763 def
/FontBBox {-92 -250 1256 897} def
end
systemdict begin
dup /Private
15 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 -0 674 686 489 500 650 661 711 721 242 248] def
/OtherBlues [438 443 260 266 -209 -198 -153 -147 -127 -120] def
/FamilyBlues [-11 -0 674 686 484 495 650 661 710 721 241 248] def
/FamilyOtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def
/BlueScale 0.0604583 def
/StdHW [112] def
/StdVW [152] def
/StemSnapV [152 161] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
79 dict dup begin
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364C
BBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0
D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917
B17192> |-
/space <1C60D8A8C9B8A02BC0> |-
/percent <1C60D8A8C9B5964B5F218FFDFC35F8D4568A7052A0DA21732F2A5B
9F7B0BFCE7B980C6710992FFAF2F430F79CDF786D119CB4D398A4ABEAE92917B
F97C85A6DC1576CA757AEFA2546AFDC7A78D4ACCC7F36CD403389BA6E0786880
6B73BCE1CDDED9DA663B6D7BB097EC14A8DC8DD29A302D47EBAFCAF16B568499
DB5FDE19B13460CEEEB56EE271816CA4CB4875EA782EEF18EE0C4C37763DBD61
A5747D5EA9ACDE8333240C24B4C3D3F50652761594EEDEDDE29DEC8775F8123C
8309A877CA73A71DC3E31E77A86CD494B1> |-
/parenleft <1C60D8A8C9B830DBD04CB9E17D9276D9E053569A02418197151D
3B4FAC2D35F238FD6FDBC110962344EF22A9D544ED3513DD2AD610B48584E9BE
DA8B5A2E> |-
/parenright <1C60D8A8C9B830DBD04CB9E17DA2742B2054A1A054A53DB2BFE
15A622D98334D4638A382EBE976596AE20698655C0186E45591D87829305D5A2
0079DF0A287> |-
/plus <1C60D8A8C9B7C7F3FCFFFDB19D830D33E060A0EDCE2AA39C9AB617D8A
5E614C090FAC3F28913CFE7800A0FCDC37264395CD4367671AA40E3> |-
/comma <1C60D8A8C9B8666C14FEDF62568EB1FE7AA7BB9A6E3C90AC3423906D
E02A0CDCEAB435EEB4557B> |-
/hyphen <1C60D8A8C9B8286E8430F4AAF2EE30BBC6242E081B59D54BA29EEBB
DFB> |-
/period <1C60D8A8C9B8666CA9DB8529FD5448EC53C1D9CC98D1937F37ECFF1
393184F7828B8F6C8FD5EAA4C29F4DC20AE90F9F33D95C93D4A4C0929B9FDEBE
0792B> |-
/slash <1C60D8A8C9B821B32711A798E84CDA7B38266677E1C223E3DB95BB10
8FB90702CEAC> |-
/zero <1C60D8A8C9B790A8366E89150801674E7EAC3B153E643FFE0C5ED2E4A
604C26F14FFC8256939D2C82395987A6F6087F2E6827922FAD78624DB38A098A
6DCD673A36F22AD7238A9D3132BA3D41985343401377BE25448A2CAB76C84E85
D06D67E2D> |-
/one <1C60D8A8C9B790A816BA887FEC82309528336A54FBD5AB64E5E4CF1321
9C61EE67A1D88B6EB9CB59FE98489B792D844E> |-
/two <1C60D8A8C9B790A83DC936B27E296C7704835473EC921727B8925D6D8A
C877B278BA35332560F2454785A8F899F17E6116C0B34A13EDC5813033385B41
5E5EC48404497A63ED4BD5A708F7A533ED9A1EC962CCA41CCC4C4033EB> |-
/three <1C60D8A8C9B790A8366E826E8C9865C0C1AB9CED1A170CCE832B7621
C1275677C73551F30334D64FF335202C5FB42EC6362E9ADCB20C6E166ADEF393
8D6237B21A49E256D1860F5DBA5F0F9057253CF8E0D3AE64C7EAC7A49E8C4894
728DB13F77E2F44FE64A86632C343BBB26EF085491B76A622E19A4B4379A85F4
F866564694CB73B32CC324C277813E71EA9D6A4012EF71F138EF9CE449FC221D
CAD283C28B87> |-
/four <1C60D8A8C9B790A816BA887187E5CE9BC898BFD63E35B4413656A8506
03491B1088558E344F75386956E49E323BD744DEB0A9855DB2EBC8625964A20B
D03A6CF20C6E647F655806C544050EB72D34907A1EC97017C6A25F2ED3E473D> |-
/five <1C60D8A8C9B790A8366E85DA97293B7B6DE3AC89C42A9C017F9C37DA0
6C30B727EDBB8F87A9C54F655C0F5EAFAD749BB4F9705E908E6676A5BF96BE49
7E694F9C403E55AB9CE6A0DC188D109757217D8EB35DCD6FE98B9AB8F100F3FF
650967345711C2E6574E3EC4C0DF609E13E62> |-
/six <1C60D8A8C9B790A8366E8AE22FD11DDBEF5ACDB6F5528D47724684F802
665C7E9CA348D28462D150021C31E380E08CFAC2EABE1DE953090A600DF04DD4
AEBBFB5AF1BED2AC4303D59BA9175844D10805D20ECF85161975007FBC1185FE
5ACEDB15249C756B459F948341CC78783DBF7A5DDEFDBC2BEED9EF04751EB8D0
A252D6BDFED69F9C5122DB4EBA5D11FF8C46> |-
/seven <1C60D8A8C9B790A816BA887E85BBDBBBB0B170D8231AF3E57CB421BE
0C12627C8B71A305691EB5823FB507E9CB5FB810C6> |-
/eight <1C60D8A8C9B790A8366DBECE1A11B619CC37FA8DC35F28A89B3B7CB1
FC6C0D8303412538CC33F5BBF4F9B76A22B70C49BFF760A05774DCDD2D848B60
06522B99D31C8314F3187541BFD467AFB7A5DD705F3D2F39D98F6A108986A464
4B37FCF3C58F1944F032E28ED7B3C9AA06CD4355B0FB41F0B1A5BD25FF7A56EE
64BC8F10F43AE3534C14FD5A9CADFF708C499B180E94D2E8CDDD6A2F587D520F
8B6449A919E0CEFB46B46ABEDB15BC8EC2C6F5CEF76B955D29001AAF1861EF2D
EF700D2A3414B6DDDA7608EC013FC48BEBCBE593858FC8F43C060E7A7707B40F
BF> |-
/nine <1C60D8A8C9B790A8340B8EED5FD7DA2E4E82A03E7412499083D76B724
6DFF7D9AC84EE1D4DE9319885464A63E50481847C7E65E8496321A50FA3F6697
40903CCB5E4E3F6184E9DBB7B91878553989B52BE6108C44DF74F1FA9F8CEC14
601239D7090BFA081F71258E986CEF333363578574EEC05DA252B1E90EA93FBB
40C501917593A307FE30CDD4EA8A1733783E2B3456DF572> |-
/colon <1C60D8A8C9B8666CA9DB8563038F9F580A9B046A37B7D80134F1676C
2036FB6A30755CDA9942E2063937B5C03A3F95DBA0D52EA1CD01F66076C35087
0D4A3F548EA72F472A6D6EF83105B87259802347680C34DC7588D6F3A3DB3585
136631EFAB9985B574CE8AB8> |-
/A <1C60D8A8C9B6459DFE82B30F7F103A034EA28BF9992597647C226DA5790F
002105E9422CE6044FF04D8B02F1A4456798D144169585F1DBAD4F0773DF7FBA
8B8DBED01A2F07CABEE0B094D0C719C3EFDD794BC8EEFFA075F3> |-
/B <1C60D8A8C9B7DF55EBCF7D6C1B4268EE6416E2F040441B8378412642A1AD
DEE93C00181C7E353AEFB0FB54A2C460858C3BD17C156DAD22D2B732298DC75D
4780795B090BA28CC248586E29A5D9E20F60E6DA69A54744B48428F561260326
EB0B947CD1ED36506F69F8FD0E1920A380B38A1AF97B07595DEAA2144922725B
68C22C88C66DBF4E5A70EA0DEA7F192A0CA51A1E9594B0F0740D1374CCBF3938
20613ACAF31AC28DAF637CD180FEBDAC8A11F7548B9425723759AFD49FCFAF15
A37643B8B8FFFD6D194B49834F826B2D1704991015541124D8D79A> |-
/C <1C60D8A8C9B7C8C12485E4478E5BC3BCD606235A2A4AF29694EAB78C5ADC
0FCB35F3BE354AA629D52BB091B78D5D5A6093A00D5602BE6F93F97AEB3FB2D6
D8995FF53AD4850877230B6AA64F9286CF245996303BE183CBCBDA4172F7F04A
789D87CD8581926CE12AF6B53C70126178A82A91111FCF72831723> |-
/D <1C60D8A8C9B62D3B5A1EF65EAF00F76801FC7B737F5CB1FE141DF9804C75
8FE003E1B799FC8BC1726FE8C628E235C9FBC048E08362D408313C01DB19C5ED
69CEE5279F31521CCAE8419AAF3BEE6408D74E3B19AD334D413A63394BFD8DF5
C1656185D22722B80C777B8135E1AC2EC5AA2D53> |-
/E <1C60D8A8C9B785CBC7F16DAA23AFD2F01DD6D5C693CF9ED143B370BFFC69
E4802A87B899D9DFB8FC49A2D79293B4FC9DE6D759D386C60207BDE197A51931
484791BF> |-
/F <1C60D8A8C9B78C66B407DC28D3F7FA6409512B43080207E388D0B1734E2B
520F8FDFE66557B5FA1A4225A504A543EB794D5334B14C189E76> |-
/G <1C60D8A8C9B65F8A3E204B61DC5AC7CE68BFEED73A8329CFB6B63677D20F
85A0F3C5AB9FFF15E6735E38EA6C6F05F2F0A9564FFF15EAA2ADD3365464667A
DE2F5E89BC95313176346E6E7422CEC2629C873289D6E1F343B0772379D170FE
BE11E6F96841F02859F1702CF132903E6EDB73B337A1294FA08FD86727897AA0
CF9665CB60A450111E8C469F88FEF0B11BBAE4EF5862F51EB5E9C883CAD83DFE
D3F451AEFD2D949F8CF43245> |-
/H <1C60D8A8C9B624F905A02204A252ED63630152B3C705A430D7B51F52CAB2
6A1AA133A0B45594490015ACDA54361F6E4823D5EF725E2BFCDE82BDB99EEB27
280768BD0612> |-
/I <1C60D8A8C9B84FD8D21B9EBC3DB1A0F0B6BCA5C9B35FC96F3C738C06A41C
59056BB6> |-
/J <1C60D8A8C9B7008A2A59D8BF310DC3E34A76B253556A3FA518876A71A341
2742E38827E268ED163D87B936B06C9BAB9BA036A4B47D29DBF5180DBE00256D
5D13> |-
/K <1C60D8A8C9B7D54520F41AFAF0B73EC6B52B086DFBB23A705134C40F6787
00F2610EE4CB7BCC026755D4841EF881366BEED17FDFAECD399BF31D9B8A665A
81DBD23115C0CA57498165> |-
/L <1C60D8A8C9B7BC12C78C6DF309E7286A6324B305383A5B3F03DD92D4DED4
BFCD765329BBC556D7> |-
/M <1C60D8A8C9B683825E2D04460CA15635DA1A012D6EC911F7E5EE694FA467
49101BE80725F022EA04354A70F243FC325398DDC15F3121C1EC05D176D8B82B
BBD0C33D75BD428BB69DBA21CAF72AF4FD90C6748FA21DBF61396E82E9A51655
9B05D8CE7AEF375667CC905A55A0918A8B33DDB9DEC2> |-
/N <1C60D8A8C9B627526B6794DB32D7A2E95C77B6137679885DD7F582CAD8BF
48BEE08BF73F18BC91F122B3665EE2F63A0DD76AA956FB2C3CD8F5801A985808
143A54D7F63C19074A33181EFA4232BD3C0F0EED16EAF7BF49CB09D3CC1DE1C0
2B808D> |-
/O <1C60D8A8C9B600E046551CB909A851379150AA8D434B1F381CDBD0374654
E5AEBD06AE3F958E7E37A7451AB577C8CDC4A2546952604A4B5CEA4D6E006A5F
B7B127B846A0844AB05A252EF15503FE0EEDE0BEEA77DC1E30C76B606A835634
0D0E40> |-
/P <1C60D8A8C9B7F6E9050DD22BC553EE5F792DC9E15C0569841A858FAC8DEF
37C1269D0FB3CA9EBCC54794918F66028F65F843823BF14A4CC029CB47FA46AD
CFA954442ABA41C63D14840F65313A4D77B588D1E63BAD356980BFC9264D3F67
1D56A80AC89D49BB0656AD023B22BF534F> |-
/R <1C60D8A8C9B7CA647DE1C48FBA151CF8C34FD0FDD9E43DB424AA12FFD9AC
D0D643AAE2304F02F5DE8CE845BDE1983DDA18E6FF843570A640F222B1DD6B57
9451F2FF3CBECD02F1308BB8E8CE5548774D5677B3CFEF0BB71B926EC2837DA5
E74C294284CAFFA17174B848073732AB873DB79B40D7D33054CFEF1BCF5B79E3
0F> |-
/S <1C60D8A8C9B79FB0B4622905C5AEC55F2D204AEB009C638117CAD3450247
E99258EEAEE9E5CB20FB03363ED40F68D202267ABC432DC99B7C2A043E9F03E4
75B282FCDFF419388A6211DF1C0DABE65BF119323260DA2E123956AC40671876
63806238AFB38670AFC434CE818D51A2308D3B52A998DE02C73B6571D29B9DC2
622555095455D3F2A7296C38C35E9DA0EA083CDD4A950A0969B659E49D6A> |-
/T <1C60D8A8C9B7974717B730AB1C549E2F679AF3D4DCB907BDD637455E06CF
B010510B0087334E79868DC974B1B3D290> |-
/U <1C60D8A8C9B65F8A3A6A883EB44FDA73ECECC561675B4FA6FA6BEA29C7C2
37B81439BDCFE2709019B8371073BDA81AA6828120749D2D117021A7AACB2468
DB03C7CF9A21FB6D08DF> |-
/V <1C60D8A8C9B6710685C830AC57B49D91227A7B16A0EDE3FCEBAF18F05D6A
6DC3770D8ABDB94E84EAAD4E379865216C0C5D903D5268AACB0FAB9328ACCEC2
242342EF53C43A293EEC2CB51D6914B0> |-
/W <1C60D8A8C9B59EB766D8ED475BD7893C560D70EE590F845A6CCFCB3339DE
93B7C36C49D042AB185675BD21F30C2D095968E0D86398457A8327A6C15EF7AB
19E50042C3D906007247166A64386C7BCEE91420A98671CE1295775537ADA3EC
C740677FBE0FCCB401DFB58E807C18E13845AED1DE4D82BF1E7D012E6E28FABD
1241AA6B336147730FC62614AF2AB3E30CA085A322D4FC809F20A7AA72BFFB14
50F3> |-
/X <1C60D8A8C9B7D61B9C1097596770C0A0B9273BAF8BEA6BB021380F627667
CACCBC4A0D07148C5DD248A8730F512DA47DD11C7CD4FFDCCF8FD1FD3F36C93A
2B47C46E2D7D649006959A4E2A07B46D0BB574BF71F01EECB732CEC9971E2E97
A9E769F7EDA817> |-
/Y <1C60D8A8C9B7C0544EDD70934AE48DF21888EA62E60810017E4C10954FD5
CE4DB515E239BC66F4EBC1B8D83696A4A0A4D74E00ADA6074AEB6BA79B22B4B0
3B98923A8DB3BF2FE2> |-
/Z <1C60D8A8C9B7FA130BC6C9872766D7BECF10DB260C505ACD6C42D3D437A1
81E437BAED8425B62FD2C3C1BFC14732EC9BB93DAF40860E7AD2D856EE> |-
/underscore <1C60D8A8C9B7A73DB5FD3C3C923B7843323CF8B6FBF0CBA0C46
FB7> |-
/a <1C60D8A8C9B78B91867A8DC7C15FB2F1D0B4DBB0CF9C08702AAE48CB59C7
E98394BBE890DFA989DA7FCE8192B75B9F51FF32CF9D2184D12BDF5BF38DEC75
29C5E6CB5A16073066C0BF06E2FA33D31624624C4E1EC6DE057FA9F13B64F453
66C976B3A717B882FC5EF44C77EEE0D1C772803926DC01372AAFE7ADCC0C8993
CF5274CE41C58D178CC9F5A9FB82710AA686C10028B9ED6DB78ECB24EAF05178
4474613AF239CF0CFE1BC1AF44C5CD67FC588CCC9CA601E059A107A8205D2F5D
A10E66B315A5> |-
/b <1C60D8A8C9B7C56CECCA99B6CB04FCDF428FE78493EE86132F0E1C48FBBB
15A5C32DF90D811605993822D6F83B98565538022163B259D46458232124779F
7CD6550FFB9BE2BAA321C4C94981BE8EB27F99ABCAF76CB8E2C6AB7A976D532E
9B542BA425EA7743A57B3D3CD47D8E20C4B75006F891B93BA68A2736868F3919
9F39549402E1A3DC7325AB9941F1B013535912CAC954B2614D05B28CE7E2F0> |-
/c <1C60D8A8C9B7784784BBCDEE31F59E339B57DB15D5419351BDC0250E093D
0CDDE6CA426B821D8545B0B321671D911EAC46BBAC806840C784582926D680A1
2FB2C548C1DDFD512996DA9482E1DC2743A6DACF02F6380A65391FEF852CA6AE
0FC8976E9737B2296F68ECDF90BAF5D6D0B998331EAF> |-
/d <1C60D8A8C9B7C7F3FCFFFDBE74C4D9334D55A377234C326921212944F8C3
976231CC334189F4AEA2A60BD79E818D3313A69D9B7536E8716075CA99621616
7684000FDE976DBDF5B33DC9801F5354DC8E005028EC3CB787748191864D4188
27FD3BC976EBB59041CA1F54FFCFE128AE6B9CBBB19FB3355347A8514A55DC66
4B077ABA3DCFE8232EC21CA22022E0AE795F40C12F4B1DAE0A31081C1C9E3133
329BDF6F341E83E0D7EFF65F0245478897606DE4C4337CC4F5BD1BD37768ADD4
2AD2D3E51BF0C7BEAD4155546829> |-
/e <1C60D8A8C9B78B91A75FABEAF2834102048AB5127C88BDE4553E93F7DDE2
A0ABB57C4176C61FD95C77645E4D4FC1EF17749EE08652AC16E8E973815655D7
06CC33EDD86C46484E7A7D78C9F8FFB3FE00079DE57634526329E2848AC1FA57
A280044C69138C9786942E04> |-
/f <1C60D8A8C9B817A0233793C9AD1ADC382DE9BA24105126C1A2FF247C2434
A9EA7585F9D3FAD6B8737405848B02293AE5DE0CECCFAEA5DD8344D9613625AE
7CE5CCBD66DA9A6F480EA16757954A5EE7E72064CFC0FF40313BCA5EE46262D1
2FFEA58A439C53F4C6C439EB548B01C61BCD3775C98E239C7223AC1E6FB6EBE4
9332E359408C23CD87083E9C619686E75F0D2830> |-
/g <1C60D8A8C9B7F2A7FF35CBB5E924B0A04AC0B8B949DA5FA2BBB091F59D3C
2F337A91C644DD6E2925CBB8337170A6A68552CEE5930CA2C712EB7B650EF331
2349AFA1115545798C39132C7C940453BB67E583732F36811C2530BD5CABF5DB
3B2F04CDBEED36CF7ED2759F67509A53588BFD4484C4791BB928C32F630ACF28
E8FCECC3F0A31EB688EA1B4312871E07125262D38F06648D649304D9ADA152C1
9EDC2F559EC0907086B653105C6003D67F093BC5034D30213B921A87C8A4E227
B981321798E0BC5F6B3DC2F3B535F2A8D825EDFFF86A21E108> |-
/h <1C60D8A8C9B7F1D1E7783E2CED1D74FC901C96DB6F14E8FEE7F5F3457F98
9F1E15F06DCFA9B798ED04B8207D834F579A4ED439B7C9411D4C38E27B46610F
83D297CF079460F8E867D24C71AEC938BEF84CBD80E905279D97D442BD9FED64
FB> |-
/i <1C60D8A8C9B8581A0B08AEB90736162406B498E3C3936CFEBE27D7194429
0959CF2B030F317C20656798274A1B946F07AC2DFCFB171C30DC5A8C58236F30
AAB578A93F963F686ABF4EDB9D9046C872F8B1E643> |-
/j <1C60D8A8C9B849F23065336760A3E437000336131663D8346C6D3BD0A9A5
65A00926E31F00398BB903C6C4736ED9BE30DE125833835A06821244DDFB778F
8C9F988038EBD57C97277AEE6DC29AF285C94FED252353488DB3A3FC7670B811
78A3C50A2CFA0255C964C802DE90BB6358850695D72658> |-
/k <1C60D8A8C9B79D2DFFE43840BE077A53480B0227F8624BACBA32CC690891
7CED1A6160B8635B49232391C4DE9684C1A73ADB59C801C4C513109A68D28153
6E1644BB78695381293AA3041261751F9D> |-
/l <1C60D8A8C9B859EB6C7454A0C7B0A3605178A35A49BA2B26AE669261851D
DA23> |-
/m <1C60D8A8C9B691D4463F5C73AA55603A15367DA3FE0F4784133942319867
F5CF8537908CFAEFCE9485AE78A1B26CC49B907CEC04923A990E2B0709B7E78C
67F7FA1ACE40D6427D175E2BDD1DEDC9C870A31B21D05D5640984B0F03B947CA
4EFEFB0D13A103465751DDF577208C08B7A7C624BD1B35D1C81433D2600156A1
48352DDA39C2C14F70DDB771BE8CDA5F19B642C122B52601040B0AEDE164D972
9A06BD32FD5E3EBF5CE0459ADCAEF8AD1C35E66DD8200972B007DB67D54B5C36> |-
/n <1C60D8A8C9B7F1D1E7783E2C9D1FD6F7B6BC5A1F557D5B2CAE42AC1D291D
BB5D85AFC5A897D7FB1FD8167978818B2D03A998DA5986E84F964B10A7AC4A00
B2367991CCC27F283DD96AB9CDE7FCEE48F4DA920569CF4FDBC9EE1FA8E214F7
1E7DE8213D1356491F1F61BFBDE74B28BC34618B52396CBAEFE019CC03752C79
D6> |-
/o <1C60D8A8C9B7FA1300A59CB80CE4D55EBF0163D7DE0F1191BFDE76EA2927
54487B6069F95706891BC6C4D4582A67CADDF95766D4EAD8A237815E202C2958
C9DC094455B204666A8D3C95E1AD42212F796058B84E03338D> |-
/p <1C60D8A8C9B7C56CB7BACFA0134F592A1B428DF719C873B1D2CF3DAB3DFB
3D939C018588197B94BDA30C01C7350185E9FFDFE3D62827A8A8B53CB3A455BF
BE5FBE8F08F39599BF74FED48D47B8467BB44F3305353991B8D9E06F3A3F889C
BA7EBF274DDE103AD4CB6D7E63B1FA353C2676CC155F970089F25A71DF7D0755
85B19205FF51DEE14976B08CFCF6D338447495D9FED86E928E7F4EAE6B55F728
5CF0FB0D6188ADAF10C38AD576F431FACEAE11F4F42455C904ADBBEEE1D30CF2
82FC8FEE6830C2AB3091> |-
/q <1C60D8A8C9B7C8C15E73062895A3C794427CC834D409FB451263AE90DF13
5B5D3B93CE8796C5EB42630C9739986890440F951FB2E301C7A3048093EDF9EF
DFF7F3FC6D36734FF2C51DCBAB35F0B99B8B6D76BD13237687EAA40FC9E00A9C
76AD7FB7A6608CD209F4783B78F4A0503E31EA692BD394D011B2D31760F3076C
423A1936F0C32272330F3A4C94A98F0BB581BCFE6641003B9070A669F1D08F94
6F7DAB58EA111281252E912460290156AFFAC3E2> |-
/r <1C60D8A8C9B73F598778880AEFF3DCF0639B49E0D697F3FEFD6DDA8563FB
4B7EA29C7589E7D21FC2B46C0E8DB24D7E41E224F2557067A5AD99C49223AEAC
7AFF5BAFE653FEA18F6F3C6A9870A3D9E6E3FC470DF1EAAD6AB978F93801357D
68667E3332CF46C71E5A8A62E9AEF34C028BB1D94B2F78A1D15B0C0D90A51F57
85A262CE27220031F74D> |-
/s <1C60D8A8C9B7693F044515AD699E56D88EF2FBB73DBCF3026546683A5132
258154B068A4EA8755EED34985F5741460C43029FCDF57AF2639E93A6770E191
53FBB656AD1A233DFEA884B15C014B80B252FD02D3AE33025FB5D312EABD2D3A
4F750B927E40778BA142E0C4558CFA80> |-
/t <1C60D8A8C9B72C0F871D3ECA6462DDA683B9A97C0F8B54CF280561C7054F
4843AB88CDF02DAD45A8DEEF359966BA0581DDD0EBBCAFFF17C696D77B0938A6
A7C30BA5272B16E8E5274E4314E9B84E2E6811CB835661FD606E2B6B14> |-
/u <1C60D8A8C9B7F44A9B78E03EAC1EFBCA5BC31555C3431C8B3D6D6DD64257
ADA4D4826500E64AAC669B6D2FC15E051AB8DACBA8FEAC926E9A50C300EC114C
AD7721AC30FEE954E38DAC98252FCE77BB8D46F3FBD18E3ED8003FB855BE9B14
0127C9A3917B06B4DD93FB2A97B6B07CD1B027AE7263916AADA1FB81FFC2394E
61CB8657> |-
/v <1C60D8A8C9B7890D21F219072916A685EB283BAD64419B84FC4F987CD07D
4A37DBE22A18164DE8908AC8E6AEEDE12C888C7450AA70EE1D18770D0494BB4C
0CE9A3A1CBB41F3B21EB24FDBD767AA518> |-
/w <1C60D8A8C9B6EA91BD99039CB2B10E1F02803A3E3EE4E512E7CC84D19375
9E7E790DD5818AEB205AEA42C2BFA5AD1C036CCFD1B986D90C6D9EACD9DE610E
2726260E753B0BCF7E4BAD6D2B0017F09CBA146D01A784F615E934E949E19BE4
B0B86144CFC12B7ED70FDC8E23E6E7EFE7F2BA890AA5C96DE4EC62C84A9A0F86
8CE22A8F4D5261E570> |-
/x <1C60D8A8C9B7B4A1684D51776FEE366FF4169FA4BD77E5C855F8C07BB782
FC4AFE729DEE13A77951A7F93F806E25633E235DF7A329115739E28D06A37F68
A60AC4D818A424E5E8BE87CC7F2D4CC5E00D5B9831D5A1202F16C7B60C40C386
9AF2E96B> |-
/y <1C60D8A8C9B7B07F0BB44E341970E343D9CADF3339A29C1E0371E76A7195
6654805356BCDB24481C563F15322C92B5F0A066E94CDDC0C99C7D876D7E87E7
681C3D934178A0371326C41431B139A2490274CA7C4FEFFABF1DCB2DBC2D58F7
6CD0A51D97578058D705CBB7> |-
/z <1C60D8A8C9B746F4D740D09AFF2DBB773CBF24507AB0498C5414233035E4
2DB1C28D14E6D73A459794197E97438FD66AC877BC99652631A809BD5659DA04
73A825F63760BA727C4C59> |-
/endash <1C60D8A8C9B7A73DB946B2F492FED1A84562DE88FBD191286C45517
E57> |-
/emdash <1C60D8A8C9B5EE310D6CFF13963D8102D97B0C3055D300368D5B34C
2D6> |-
/degree <1C60D8A8C9B806F5351924C019C2190AD851B2373E9FB529CBE2B4F
011E30DB78E65CD9478B1F7E704D77512250F27247047C5C8A1E56070F0F20C9
E43D4EAD4E143E329F744A2B8E515E832> |-
/multiply <1C60D8A8C9B7C7F3FCFFFDB15C772BFDB4A26056814F45724A65B
53E662607B8DA6554CD809406FA859063937B32B6824FCB81AC5221396C3FA7F
30276DAB9707521B062C6961322F8EA> |-
/copyright <1C60D8A8C9B658EF5BB8CC6B3EC9CF2C743534E75FF9F157F06B
66C1194E39AC0F4922930BC769F4A7A5C303BB6D11485CF9FD6548CA34DE0C7B
62653ABE1D538BE4CB7B7B2978C5454BA32AD75094CA83A75D88F2CCFD4A9AB9
88C0024C0AABA1C86FD254F2C14D2B4C8819A6987777DBA8936DCCBA7323BD7C
AF5B233236A65557301EF4146F855F845B21A5E9D20A165B35B7D4553BC50E36
CF49FC5C285389487C9E395C23B90A4C91DA06> |-
end put
end
dup /FontName get exch definefont pop
end
%%EndResource
reset_gvm
/NTCUZS+MyriadPro-Bold /IBGBAA+MyriadPro-Bold findfont ct_VMDictPut
true set_gvm
%%BeginResource: font LZQAAA+MyriadPro-It
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /LZQAAA+MyriadPro-It def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 2000 Adobe Systems Incorporated. All Rights Reserved.Myriad is a registered trademark of Adobe Systems Incorporated.) def
/Weight (Regular) def
/ItalicAngle -11 def
/BaseFontName (MyriadPro-It) def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 37 /percent put
dup 38 /ampersand put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 61 /equal put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 95 /underscore put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 208 /emdash put
def
/UniqueID 44772 def
/FontBBox {-112 -250 1090 873} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 -0 674 686 484 495 650 661 710 721 246 253] def
/OtherBlues [400 407 259 266 -209 -198 -151 -144 -116 -111] def
/BlueScale 0.0604583 def
/StdHW [65] def
/StdVW [88] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
75 dict dup begin
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364C
BBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0
D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917
B17192> |-
/space <1C60D8A8C9B8B44BA2> |-
/percent <1C60D8A8C9B6F8EBBE172943C9A5783E47DDED5ABD651692BE8BC9
B7C155E692CC36E087EC59B8A17D3327F5251D8E4BAA3F08774981E536595079
C849B5FE5A7E9BDA5212909FD4C3CC53AFD45E675B53E143814FA34BB75F14B4
B2ED2988962B6FA65CC71839F4F0CBF4BD5EC7AD4E59C621C03442203644F27D
99A3D00E137D5A8FB9E8C767E2E2DF424FE7F0878A9B10544EE148243BC82DE3
AFB56F09E3D9DA4163B504EE00269FA3C4C1CB14516D3749A3769070A2A39E3D
C2B07ADAD5C2B5DFF15FACC329DFA27F6721181D9D9043E6F777559D7A46978F
3182C12564AA66AE80> |-
/ampersand <1C60D8A8C9B7CEAE52F64CF0E497D8269C5E2E2413AAFABB9E87
EB2C2B9B3C1E9443A42B4E5BF1F0E5235A5DB0F2819972B906789A8B70465036
3F3E2EC2C83C1B8E204AA01C8971CDC3AF8F6C9B97DB8CD431E88202BCBA65E5
720B689CED911CD0FF6342CFC7951C77786950D69994E29781A2C7A6153B25EF
F967F489BA3006C8481961C4672F0614B78C43D7372D621D8194F8A8B2FCE403
3704009999B5F5970BA549A7F1666B122D550ACBADB504F17FAC50FAAC169366
CF94E14B452C49284A188064A2F906F53F372CE28BC728B0ADBFA3E84E785E1B
3A3511BB85A86608E5CCE732892331E27D4616F1A8426A2011A88840FEE1A065
AEA371F00F3FF5D916> |-
/parenleft <1C60D8A8C9B84E0A47D1C85505BCDC9371FD3B19BF58EB456FC6
19CBE9D3CFE0157C41704CC99691820189DBD382CED958B739AA98B712D55320
4292> |-
/parenright <1C60D8A8C9B84E0A47D1C8550584DFE6F888CDDC10A8AF0A454
B12D7C1C315B4CA7EAC540D25D70DAF802AB4C84149BB048CD4147A18F3D7842
A5946> |-
/comma <1C60D8A8C9B8998CE767462A5C87AE6958CEDBB77739E86D3DD983CE
6FCE6D499E484262F84F35> |-
/hyphen <1C60D8A8C9B8391507657B8D12B6E40B1EFC2F5D0F8E39896B5116D
0C3C480> |-
/period <1C60D8A8C9B8998C5A293CC51813FB85B2F8BD718EF0ADB602D24DF
239A2CC7EBBCC49E11A36A4DB487BAE3626501BB383337D08A7E86A6B3BA194> |-
/slash <1C60D8A8C9B82424A7BD3E674E14FBFF0950E21646C5E7BE4F89D289
5EFE6FD041> |-
/zero <1C60D8A8C9B7AFA9B75D46DA29515106DA747A27722F5CBA7E54269A9
681BF4D15810154F4D6040619C28DB57E46C42E2C2162AC3CC45BB6EF1A390EE
C683F723240F8E3AE5BA8103C834F15563FD60ABB58408933628586> |-
/one <1C60D8A8C9B7AFA997B352E12A50FE2CE77A77C61A74069A9B2927CAFD
2C8EF67397BD1579B88E5DC8E48089C20747> |-
/two <1C60D8A8C9B7AFA9BC492A56DB335DB7247235E07D48B9220EE780C44A
C029DBEFA346E54F3F7778E7681EE4AFEDBBAE447CA36B3B16963B5B2FC3E109
5C353ADD67F5141CFC1106B2A74DF06D799CC2EE6F9F06063D981FDEE7> |-
/three <1C60D8A8C9B7AFA9B741B2A2FADA448D9FC44D99FE0D817B9E32DF41
A9128C2CBB180C809145EC00AA2EFC9879022485C858141506961226A14B468F
51C574B9B9D4FDCCC76E9EBFE7F59E665652AF3AD6999E10048C548F140517C0
1BE044B03DB2BD622B9DAD97341084BF2FA7CCD4916DECD020143B779F6536C5
9B49979696CD8858050C797F15EC99F52DD44179DD0BC974791E6F> |-
/four <1C60D8A8C9B7AFA997B352EF37D9A1715284A9DCAD6994877E9BE5017
4B8E61DDE20E88DD88F2A43052CFBD1C5D066DC234A8217E8A08E0F34F3662C0
2ADD842BAE0B1A8AA98ACEFC1C95B061521BECC17D09948196F5063A10ECB877
AC24532018C2833570F31202A0F87E2C2B1> |-
/five <1C60D8A8C9B7AFA9B741B2A2D8656A8FB1F5CCD37EA1CBB9F99181F09
F8D7B60550952E2BD128F087B5BFD5427D180E38E99C741F40A859B7998D88A9
77C863CD5A85E71A9731985338E056927037373B36B0EFF45D2A637261ECC720
517BCDDA87FDCDA36212AAF7168DAAB> |-
/six <1C60D8A8C9B7AFA9B75D46D5387E74D876F23382FC9A720E9B2B26F437
501DAED26DAFD9599CADEA0D9E0170E64D7CEACB43E6BD3DF644F979A71ACD23
94F1D6C861A0765C139D80B216B52B1C981C40A6E92895E2F80D6292714762D3
24352122511C4DD7EBB98B0882F8AECC6E6359623CFF180542F79A9506E42852
8F6DA42E049E1F70F48F1DB788B58B9F128FBE> |-
/seven <1C60D8A8C9B7AFA997B352E0B2E42068D07FFBF76BDFA2E4884CE74A
62795739ADE20358B505BBEF25F6FCD5DF61026A277ADDFCAAE4F15F51D78420
254EB7A0F35B> |-
/eight <1C60D8A8C9B7AFA9B7590C0C2FB2604D2C484B0D33D1CAAF56BAAB60
8D4934272F2ABBDFD0C5EAF2F44BF357AC94AAF6DA50F1E2FC884091B7F526B9
7977C7784108A929E2E984B3AEADA2CD02F2C0664A545024C53FADA2DCE7595B
9A1672F88300DD7655479750F0D876B3BD3D33036D5779740AD33F7BD84279B5
9C52D9AE64BA1087624607F36CB2878408687C56DB13003A4BDBD87B8784D295
05BC217A89C617A84A4F936E126C84DCDCE0897166397A616A9D1E1C04621D2C
1AD1C82AC6197BB7DA21A5CD01DBECF4220E6FA186175B5617A4AD460D97A8F0
9B1A703DB949> |-
/nine <1C60D8A8C9B7AFA9B612327F6D1C125B19932D2FD7254DD2499E0339B
3164109F08FBD794F8D0AECBB894E0F62F81DCF43D5960EC0F475A02AB5FB007
037BBFD59E6E7028E769A4AC3E3053062424260D5AB4F43EF0CAD6F5C4EB1F06
CC023E1854EDB770D05FC6FFA68017166337941A05CD1E079216A0957F0E5B35
540D7EB6FECAF0A21039ED4AC67B2A808FA80E9FECB> |-
/colon <1C60D8A8C9B8998C59E608CDB23C6CBB152C3A1D674B7D3E69D170C1
D7714A674D9BD86B72ADF81D7789487B0B9112D152E60D8037385EF1F61A7B01
6EE4015516546694D273606173315C7FC193E7BB811ABB205D9E8CFD239AD9C6
1D7775F5137F82F5AB02009C3BF7F53672E9C57087155C> |-
/equal <1C60D8A8C9B7C7F3AB181B811C31CCFAA4791F32751624E441AAED44
6F077B1A21A47F869C2511A1CA1EA9DF1681F0> |-
/A <1C60D8A8C9B7E39F2421AD2E70F5582C0DD6149BDBD7AB97B7BCA207DC0B
2BB7A9412F7618B19D6E8D8E50EC9EA095EC918FBE772187D328AD77DF68AD83
D5D3C8D1A47D76E815854D6D30D2D3F0FBF50F> |-
/B <1C60D8A8C9B7B4A14E8AD06F11C3C28834608B7060E6644C07EF1596D62C
1A9DF38B49673ACA5FA7DEBA9F8AD313C76FFEEC8B97320E1E6D02D085CC0A19
FFAF29124E666ECB48513705B8690C44129BA29EA844B594F34EFD0AA4A249D7
D2DDAE49441A59CB539D73075B4DBAC2371DC4E3CDFC5C2BEC8EB3F838873720
34E344FA020776727C0FE98A1F2DBCD4A95768CFE9C6571DCE75A87B2F51032C
D3561FBF60D70457633B06> |-
/C <1C60D8A8C9B790A837BA71366E7DC7853D345785FB97C890D8282C928B64
A04EBD207FD3CD9E74C788AB56A96BA83168484101F93F1BE76FC72486E8A04F
E1177D6BD55B999E9683418A50CC88B5EDB0B4C6EE2467446E694B270A0EE2FF
16688E2277E3910E9F4CA86324F49053A699E1CF7D3EA74CE84C3A50BC> |-
/D <1C60D8A8C9B67A40DE70234C12A3788CC8B6F505D8FBCFF68704E593E7CE
C720E94836BF7830207FA8F56464DCA0D90E1148AC81478AA9760909A754248B
5334F89CC90D5F50861CB9E445547E9F58275F8DAC75FCF04331FE3D08FDD8DF
C3C3A5ECB84B4A52CE6F1E7D13D4FB> |-
/E <1C60D8A8C9B745262DF78BF720822F282683FF153B115C6D3FD7ED11872D
54061D04BBD76EB8A1F85E1295F91C3A1C444F1464AB684E618B6F225D9351D7
4D81923639> |-
/F <1C60D8A8C9B74A3EA4B5440B7FBE1004E99399DB5D9EAD35100AB1B01239
93BF7D8D1FEBFB80803D913E556C51719730367F1BCA360949> |-
/G <1C60D8A8C9B662FE979A5386034C011F6CD1428E75548D366F8C49A50131
BB81D4008D5C7BF70184B8101EB3EF620375942A1DB3F9CF33CCB6226C0B56FA
D83E7E0E54367DE53EB1B15022E04D97DCD2F8F7CB8F40CBFAA356E76101669F
D2D2708B8AB618E80A59EFFD2CD87D917C98B8BD7EF5A153D868BAFEE9154255
10BF193693BED72C14AD8C98D83DF11584E8FF88DB8046AA96A055453993D4> |-
/H <1C60D8A8C9B66621E849719CDA10357788C4EC937498A090DFA0FAA76176
8443E58DB42DB858ACC4404ED4D3D367A0DEA0CC97633A8DA7DD9A6942FFB7A3
0573ABA4E6FE> |-
/I <1C60D8A8C9B883CE1F15437091F197FF4DB9598B90C7045BA29FCDE8BF8F
49D16463A5C1CBF5> |-
/J <1C60D8A8C9B72F60A5792660F7B055706E593EFD364E14072858F78279D7
600C7F93E1F6F1D7EB8E033AFCA416039B757FEC0DBC594AC628933A22F0A68D
03174CAF2259415BC688B1A32F400E3931E076E9791CCF7815F034BA4C7A> |-
/K <1C60D8A8C9B7B8EB7DC9811C8C597E50CB31995E71DCC3906A97CF7BE321
14CA1AC3BE69674D494346BA620EF636D22D41BFE6DA7B058715C2DE6A6F753A
AC6265D13E799C263D7A> |-
/L <1C60D8A8C9B761B2E6B432EFD6BE3C99F798CB1E4F4B2C23C0761144A5E7
36893D01F914AA50D3> |-
/M <1C60D8A8C9B6C180663B6EF7BC1A42EEFB3B9604123E88CFD4CFC5F974AE
0DE750A48D16B1685C7BD8BE85879F4F62516F85ED747DEC24F07B855D5D08F8
61844B35A14039665D3B2CDA3131B75A5D42465E401A9C0ACAF1C836430F95EF
23806F845965EF547C479A8F57C002D37D3238F4C99E9EDC9A6B406EDAB04532
EABE176D0474CD3866C3BE4BC662E05A837B8FFADCD28BE09DC9222E4046486B
555F89CAB184887294B40072> |-
/N <1C60D8A8C9B66DDCEB68101E4515DC29D23A016E596F149713599E29F597
053E556D3DE678D2E988FA28B0123260C721E308E37769869D2E335BFA336832
BB5F8592C868071B15A538A4F5912F5661B419C66C011D6B07805CE47D9552A5
CA9DB39CEA1685C9845A95CAECD68FFB4289481D300BE6B0> |-
/O <1C60D8A8C9B651303618B2EDE701FC5AF1370CE4322AD6863EFA2EF7EFA7
3CF4BF397CEF949F04E302DC4B2098FF29ED0DD087F6C13A2E78D247B77913FB
98937B993623C05A553F1F8BF0D71251D0055B5E60AC409A0E3CDBAD96211C0D
8ACCC2CA4CC157E320B275138EA41DE6D97F06F2FB0BC8455AA422B21C4D> |-
/P <1C60D8A8C9B7A08652016F51090A06E4F1510CA94BD882C23477A39BACBC
70C8C60C7DD620E8A84A97BC3904544DCEF4E0725DDD758ECCA53354F8501BF6
78F406D03D2C0A5DFDAF31FDAB4D09EFAFEAC3410FD384D6F39F5B1AB5A979BC
DF510ADA5E629B3A1EA8> |-
/R <1C60D8A8C9B7B07F53A15580FE596B08828EA77510646DCEE2C91C4662F4
DDA23EF5CEC2AA2C263A89EB59FE9CEC9DDFE7FFEAA3C07BDB36412C5B3535A0
C1428B67CEC1F21E7BB75D9B0536E795831C109765F48E5DD9034D46F942942E
4B5C053CE042025C62BF3C66C02071C1C355345718A43C0C20> |-
/S <1C60D8A8C9B7496997286EB07BAF5B1AECB7231487C26C7D1A31EC3E8BB8
2369FB2DD356EE66EEB7A6737D5CAA0B483439E77F2E2B4F351D12DC9E65A28A
FCF46393D3224B6089307DBFD87AFF073F43965D536EDA3C8056C09AC812B583
601E2FC7F3DE23911B1834A217A3EADFADA2FF9E2FDC0D8E28114B92886A0731
F011B6D8870BA53F4BED7EFE1AA3930A> |-
/T <1C60D8A8C9B741FC6B33A6A1DE5063D180059E446606426938C926324EC6
40401FCCBBFAFAE5EEF87848536798AD> |-
/U <1C60D8A8C9B6605BEFA66CC5DA99A4C5BC677F14EC4BFFD6BF3228AF4CE9
D6172444C0FEEA98EC1E18873EC7936487B8FCFBB95E927FF5FF260976346075
438778A1C54CE79B39A2CD43B0508984042C59CA2878DD09> |-
/V <1C60D8A8C9B780B365B2660FBA1822FDAC12144DB3651C8FDEDE9EDCFA07
0D8EF5FA4AC72F84544AF3F01980AD43F86B2E1ECD48E70BFB04DBA43B190EF5> |-
/W <1C60D8A8C9B6B0D5AF115044E3EFAEB09F3AB8548B407703B0582DA2D63E
7BD53010FB5AAEDDFC764C28877F31A041DEEDCAE836766229C7C0EA29C1E389
7709F2A5445D4396F18F859B7684F72C2C6D2AE59C8BCBA98C656A7CC5AC1680
795765DA96563B80990D76B48E735227A9D016CCC83B8E590DB7374386166D7E
B05A7E69D2BB9979D9A73091ED4FBA6F> |-
/X <1C60D8A8C9B7B202FD768D7CDD51670B0819CF1EDDDDD84D414303430591
600BAFCCA4AFBFA27542668B7F6E9B33351E4529A0758C07EB873EEF739784C4
C53280B13F3E954137D2AD729C67D9E4336469B2F580E2E0F4F6E201C83B181F
06DA311DC807> |-
/Y <1C60D8A8C9B7B6445F2D04893E032C11AFC2CBC9B4C5862B6EA48EF31B8A
9F8C8D38698BD64314D0BF4A21D9F845E824570D181DFF884928BB5CDF4F485E
D77931B40505004411> |-
/bracketleft <1C60D8A8C9B84E0A47D965EAA0C0FB01E14C1BCAC3EB3ED39A
B1B5BE21C6E28D046341E0BC8A692F3C9E8F13F5D723632A356F> |-
/bracketright <1C60D8A8C9B84E0A47D965EAA0C0FB011FBBE59D3E9A051B2
3572FB13A558494FD88980C2E8961BF19A4B84EF7AA33B06E7C23> |-
/underscore <1C60D8A8C9B7A73DB5FD3C3C491E14D3781008D9DFF8766BE59
211437BCD> |-
/a <1C60D8A8C9B7B14CCEF6773209CD25589D5756392FCA0C64A47677E647A8
28FB65B762972DCB7AB3C1118BD5B30642068342D8551C2CF5C42324F2C8EE1F
27D4342454FE44208A65603DA0599C936DDA35C3EF8E6016DAB5660E50480FB1
A81A5CF7F52C21762A84144254AD394FDAD12D0907BDEDD781F30AED964F840E
F75EDA085FE58D94650CE1FBDA82DE9F21B830D5ECC564FF3E36ED1718A9> |-
/b <1C60D8A8C9B78E0592320534AC0F2E2D5C5C1AF9765294001386EDB81228
7641007D4EA8C04B66FD2E3C26FA935D990F8B92E515CF36ACE22E533DF4DF60
FBB5E8B72A4240763F48039719BB3A0D51DAF0E9AC829192CF03B7CE55EECDA7
BB5BBC82665083CB21DE153435100A61C408FC> |-
/c <1C60D8A8C9B714A501694ACF4617DD8AF97861D54833B994D49B94C9BBBE
30FD1E227A8F6459349712F920D7131536B63523705A2A8FCE4F63D6BD95377F
1D74D9BB730923E2B2B27F92C6D18779FA7CCF5F715B75A633DFEB956656B0E1
C3AD9EFD502E9EB15368609268> |-
/d <1C60D8A8C9B78E059231377BFF3188613E4D95A378144D35BA34455F27F2
72CE24F6362B3C91835899B6D388EA9DF05893E0A12B7083BE205D9E4C2A5AAA
50022049E7573BF26E380B187A3F0718D53C68BDC5CA1F5E523981331A926988
A4E0914E90B52CD94FC394EAD9B2D4E804EB610D26693C3C0B6B15C9EFF98FE8
AC5D8B8C56230ABE5DAB7209B7E646F15322C3> |-
/e <1C60D8A8C9B776A015CE439F46CA832D245551AD3F129D92697901824231
2AB9FDC677D51EE3EDC14B17712F1645DAC341814E89D3ABF7F04F33736335CB
5F3DAA61F67B70EE44A2387B0A6D14FDA93C90F0C5BBD8454424D77197AFA840
CA28F7B8CB9BA5D9B28F5F627C8DD9615D9D98EFD7> |-
/f <1C60D8A8C9B8517F439FB3B54062FC80044B75293C1059DF42201ADDACA0
E71C10415B5B77595F4333D28B8D14B6C699366FA8575D3D483DE4F67C4475B5
F3736D43A9ACADFC77E0B7E495553C3418D83925F7C0D5BC81F37BB50339378F
FA33867A89BD8BA944D145FB9BEE3D6C9493> |-
/g <1C60D8A8C9B78FDBC003D2A8A7A246964651DB27712EB42DD376CF893324
0AF2FF7BBC3F3BA61BEDEE51C412644C17019DAB0ECEC32A0B013145D9E09706
7FD506E5BAF535997C629F43F9986FD9D29BA8379D9162042AF5B27D89B57379
9D8BE9A0B0CB695BC854C2A1B7F99D5719B689BA3F60BED902738F2BC9861BA0
3745B073BDB5065BE755> |-
/h <1C60D8A8C9B785CBECADF9A98A25C7ACCB13DE414B358053A7001D108A56
26D678D3283D0DDB0B295334716F7002A1157875E9534849FAE17A010A6DC76E
E7F645072F0DE1E1174F79DB73DD5B0441CEB56F3C8E50B16FD49ADB878C13CE> |-
/i <1C60D8A8C9B887F0338EF16A2350628F5D4D9109016CDC2D59DAD7A2673D
CE7BC92A10174971EE3DE9D1751EDF50D04D3C8F9741009A0CDCCE2E605AFB77
D96A4B3E755952369366B5C01D562685C3514931C2515D19> |-
/k <1C60D8A8C9B7734FD404E01F9EA663CC999BAF763D84AE1B64382857E415
A18819BCDD26643661A3919446040937D99A352A5F01BEA414BDED284BD64C29
1F9E0837F0D0E31AA803A5FAA8CBDD5E3A5C840EC3> |-
/l <1C60D8A8C9B887F0338EF16B73344CE5AE56931DB7C5D71B45D55BEBF9A0
A479189762F2> |-
/m <1C60D8A8C9B6DD2C4E9A8BBA1142866A2C568144D2E703E9FFB9FE1B10ED
ACBD7DF1FA14487BA3524254F97512C5220FDDF12A9E29773FDDBB650EBF9196
57A530592F80316D90EF6FAF1838DB7D0833D7109C89FE45E5A6B778473BBD1C
5B60AEA73D30B8047C20AAE8E718632A987E6F6292B96B52F4B171E4D8A4C511
155DD4B477CC2A49E0860573C4162236EA661E5C96078818CF6EC974000B17B0
F5> |-
/n <1C60D8A8C9B785CBECADF9A98A25C7AD400865F9F8D1191077E16FFE096E
B0529CA70E108655F8B5BC9A76205597B0ED8727AF4D5236D783411104013E1F
65935F2ABEDF76D47590CC1AC4ADF000512E301ABFF0480E9E97519FD1947551
630ED8D6D3721798D4CDB827DF16> |-
/o <1C60D8A8C9B7B14CEE809CF2D589F203DF3B3BDEAFA6EA7EFE3B28017B01
896492495F8C2533940450110F89FDC2E60AEADDA995E1FDC2EB7C27201D0857
F107B127D72744D005F1A4B16E26D3BE0C1AA4FCDC0D0981> |-
/p <1C60D8A8C9B78E05E960E0C52D71905A35A79FDCE4AA05B21277D774A0A9
AA90235A68F990608617570EE8379AA2DABC652240A633288D2429DF96666206
A8F7F15F8F9E8F8105781F6BA170E27A8ACCB00533AEF8032AC4244EA2F70D16
6355F4644E1A0B2210BDE86F599998BEB6A2CAC13FFF99C8833B8B173D8C819F
75C4ED3CFDE6C54B888B922B4336C5EAE9BB1C15EC0A> |-
/q <1C60D8A8C9B78E05E960E0C52D7261AEEBF0A0C144D2A07E5E28EFFB3EE3
2DC31F113B3C0CE288EF5FAFC5A5D2E38664743D93E7564954B57A8250D80F3D
50C88B31C672E09CF61A4B1936FFDDB9FB8B969793E2974948B5AD823162D2CE
07092169548E> |-
/r <1C60D8A8C9B82C91B6CFAABAD480D3AE0A324BCADFF8244EA66319460ED8
EBCE76E3E3255F9F6073E1DA0E160985851AE70A10F53397DAEC6EFDE6C771B6
0EDCE9A921F405A2F4A477457960EA5C0ACCEF2AD1644002877E9A2A747074F6
8F> |-
/s <1C60D8A8C9B7262672A4D90BD8DC4316A04B9B0A454F190CBB6F32B5FBAB
624E3206BAB9005B4CC3158C91395255FEFD57E68573676BFD5DB8A410CF7428
EF7E8A5F0C147AC326C725530819CE00305052DBF8E4EF98C716F46B345C27D2
95B3C3E1B0DBC3D2469BD9AD> |-
/t <1C60D8A8C9B8334C2A31EE29401E6CAE13964B66C39FCFBDEA1883914534
5BA87956E9AD1752D634BF9E4E49FEF80CAC13319652F4DEE755D6EEF96EDB3F
2CD2D4600C71F4EEF6CC01EC3C4A9A04D8EB018208E7E52AE99BDF3D77436B63
738CC9> |-
/u <1C60D8A8C9B78D34DD446A95E6710D1A62C4F08901E7B270E393FEDB5FB6
7FA9162355E0F4ADF046AA6A7A16B69B5FBC367F21C03340A9A18AE937741896
F96D45C99F71355A6FADBA73C1188CCB2CF765D9546A023909EE86CB8AC532CD
44B236221CD352193CB513FFC11B> |-
/v <1C60D8A8C9B7741C4FDB6C02392CEE4467673EF99FA7482462B4AC423120
CC81CECCE762550FA10A615E68B71294E4F4EE15F16D595C4CF14B8A5209709A
3BF5EFC082B5CCF9CBA71C465FFF> |-
/w <1C60D8A8C9B636759BACEA6F4DA2A645B64C8CDE6588D4E96C4A8230773C
99F0989966AB0F19A300D7EE6CE86E439B71C0F6605CCE7C016C9BA756998D8F
C2B0E9E5B1A3251CE63D47F8449B1509A9CC83008DDC2DA95A062F0C400A72E7
CA358607A7E03758A6C441B3EEFAD45D9F50541BA53FD0689E672190926A1819
38AC8414> |-
/x <1C60D8A8C9B7628016B52EED9AC53357288C1CD5EB056E8A237F7567D7C7
D9CF7A517C312E7046F48DE42522F1823548169BE0CC9CF09CC610665BABF5FB
4E0C41510B18009401D8698A292F7B6A81955A87102108F3F7D2AB19C78315A5
682CCCAF7C5E06E40A6AD6575354676A523281B5D2510581AA> |-
/y <1C60D8A8C9B762804D09DD8226BCA4DF65E1FB968EC787FAD9873D9E4AE1
E546D9FEAF7A430C6B7CCC06A65A1AAD2C033977A67288D91ED567C302E31014
2E8FB9F8BCA53B8A435E949A954A959BF2CEADE1D3441E739ADC1DA65212015F
3EECCC8C9D4D> |-
/emdash <1C60D8A8C9B5EE310D7BE960080973DB8511D09D2585BAF4282DC0A
BB3AF73> |-
end put
end
dup /FontName get exch definefont pop
end
%%EndResource
reset_gvm
/NTCUZT+MyriadPro-It /LZQAAA+MyriadPro-It findfont ct_VMDictPut
true set_gvm
%%BeginResource: font OYUBAA+Helvetica-Bold
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /OYUBAA+Helvetica-Bold def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def
/Weight (Bold) def
/ItalicAngle 0 def
/BaseFontName (Helvetica-Bold) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/FontBBox {-170 -228 1003 962} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 718 737 532 546 698 710] def
/OtherBlues [271 283 401 409 -217 -208] def
/BlueScale 0.0437917 def
/StdHW [118] def
/StdVW [140] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
75 dict dup begin
/.notdef <1C60D8A8C9B854D00D> |-
/space <1C60D8A8C9B854D00D> |-
/ampersand <1C60D8A8C9B6079FED37A1AE5AFEC29BDD1074699E83078D2A3C
7F609995A852EFBF99180932760F35F777AABA3F730E20D5585B90CCAC579CDA
206CE5EE00FB0ED839B21D035271146302FF0219ABC6FD7F749D86461405E708
374577463C556E6C139F65672EF65A50839A56468FA3723C5E87BB624469B19E
2D2EB49DED8699DD4D460C1ABC18D5FC50DF8DA72E587C989C9DD16CD5E3CE0A
0CE0D040193E2DF4D0ECB4B0CA4E19EBE148897AA3C82E932BC4ACA22A131A3C
4D95C575DF7176F18D03EA23BEE9F54D1A515972A63DC363AFCB6D03564A3315
E8B427046CC6AD7928DAE4300A483988A1DEC393AEF911F28D3E39E6DE9A3015
8BD916437CA3709EE6880E9B38D4D19A8BBAD7CFA7EC58003EBFE8918965C3F1
E2DC67B68FB045B706467BBB6664EECE08A7AAA2874E7BD1F371C490165989E9
B80DD1EBF860CB32D7C2DA8C1EC0B9E883920583F3670704C4E01C> |-
/parenleft <1C60D8A8C9B81F2C36CD048A6E31D860687F6CB6E7E670E3862E
ADA8C7B2EADA7E2FB10356BB4056C21D1A29EB75BDE282B8D3309BFB25BD88B1
C6AF2AAF8171803FE2126F> |-
/parenright <1C60D8A8C9B81F2C36CD048A6E31D860310175C8D731C3A1FB8
1B277AE54BE1179975D7AA642AA158B6076AF02E6A67802C9F1960475E3DE4E1
02A504C7AD7592FED3D0EB8> |-
/plus <1C60D8A8C9B7F37489FAA701A7D720161CDEF0FC0E34EAA31B30B3E58
A58C93AB2DD09E42BD10F7639DC812E6D176155D1A21EF8EA5285B38B97A6044
13C7FC0ACF534399036ED1CE185E9C463BAB6B21F> |-
/comma <1C60D8A8C9B854D088EA5B7F88398BFE9CE5898B785C3A4D899BB557
A9633AE7728AEE39D5A6D09B77406400DE70171BF652> |-
/hyphen <1C60D8A8C9B81F2C3AD0B0E9A313E244C8B357C46D9B6B8B485737E
2057FB05104> |-
/period <1C60D8A8C9B854D088EA5B7F88398BFE9CE5898B78ABC4C3BA5AE06
1694A9B42623D> |-
/slash <1C60D8A8C9B854D08E823E34E98D69E05EECC9E8705DB5F86B9930EA
7128BCC1A633977959> |-
/zero <1C60D8A8C9B7EF32A450E6CDC4AB44DF1AD33655FF238CAE6AD63669A
2D943ECD3231ADE89C5D24E23C94CBB0D32F5F0D671CDD46DFC397D7CD753A9F
83EC30828AAA980A054517E2CE1CEDD635EBFF3B0FAC292E5B7338B3D18762F> |-
/one <1C60D8A8C9B7EF327C10274A23FFA602162C4CA1571585B0C1E77513AA
5B7F97CD86DBDAB28AAC85EF0A29A3E89D41CB761E2BBEAEE690> |-
/two <1C60D8A8C9B7EF325767EC41CBF510D1E0C71F1F1C039215CC32A5B90F
CF87168E35C28244745FCF47A9B7CE070B35171DB218CE7C8F2D9F0726293D9E
65C3C45297780FC122CECE1C36987116C8DB6BB559F3E2FA77AEB29702EDED93
3AF70BCDE4B644F7> |-
/three <1C60D8A8C9B7EF32A450E6CDCB2DBC464D59B250EEFF297922703F7A
1C62B0E2DD902F8B4278E9F98AECCD8BD128B20B17BEC7D8A3A1A65162C82E5A
8CE9866F72C565110868FD65D8C18A62564EFD1C8C46DBAB20D378988B1BB258
9905F17AF538B8272CCD92616DC49A1F2B14BC69E7CB92C844D3EDDCF325C584
8F599A6885AB739A36AA85201B953F058DEC541E4C0988CE6835E70930BE13F0
11B2CE417AF4A7D17EA8254FD592245E27F05D85E45036335FE7B7BC51E5AB59
02EE0E8226F2F0> |-
/four <1C60D8A8C9B7EF327C1027456714FC3BC7619810153E0E0BB1AFC3AE3
16C3E66D77684AF5C288D5749B76CF93B3D20F71F5A0E3789D4E186D0FDA28BA
D7075305BC124C6C5C0D7ED2C416E872E8670A5833B01> |-
/five <1C60D8A8C9B7EF32A450E6CDCB13ACB635CC16ADD7CCAD6BEE541CB5D
1185200EC960A8AB3C993D405195DB79B04F43327837A1B529001C138A764F7A
24304287CE3BEC77DC6D8B12B5A671568AE2F5F84B155A674342640B38C48DD8
E48C0D56BED0611990A342E99DF070CDD3B740424> |-
/six <1C60D8A8C9B7EF32A450E6CDC47A46EBA62A986D8A4018CF2DEBD16CC9
7505CFB6B209B0A9FF5A258AA31DE23E1D88F734A7E48F8AF853626B7C39561C
3E52AD885CB4E560B9BBA8F7A2564D7FCB11AE5F639E6EEBCA772B6104B975CD
45A7CF9E774D11F805448B94627A866672C545B7299AC606F61FB363E9109DE6
AFC55F57428B80767B420D035D25C121384CAD9F93E64F83326C7580B961> |-
/seven <1C60D8A8C9B7EF327C10274A8C4A190284F98E7F4D8A2E34FB9FAA0D
AF29BFCB7901B84A402AA558783CE2E3583A9583D16DF190406CD6953460E6A7
14> |-
/eight <1C60D8A8C9B7EF32A450E6CDCB366155F5F03D472FB411676F42081D
C4492DDD85245986FA2F3DADEB14E070020E6294569C1265F84D5C91715377EF
17C4A3D3E421559B94976C5814F8A01A8DD499FC985F50D1510B041DF87ECE91
3CD7F73C38AA9049574C46E4385B8CB4FD15FF423CD10F952BD26206445D5694
911897036C0CDC87BED5EAB56DF2C590EF8B216428ADDBBBFC24B6A075C9714A
C0567F21E8A78165BCE1C09227E9276CEE9B8585471CB9D2591384C469484A8D
0FEC536C9B952D043ACDD1AFDAF029694776BC3824E3D65DF3593910> |-
/nine <1C60D8A8C9B7EF32A450E6CDCB9BF22FD3B044769C7FE1E404C8AAB2C
E2AFECFC2674F80AFF1C5B4D09E5FB3F024C6B9522B575C7F6DD26216B44CFB0
1CF66E89F321FAC209394CC4217963C905DEC51AB43D2443738264D3D796ECD9
96308A4CB81BAF1C43BE2BC95DC1CBDF7EAFC7C52207ECCD05A0FAF4DBB37463
AE3676AA6> |-
/colon <1C60D8A8C9B81F2C469F27D0C92F5808EB2A8ECAD6D57E134B9005B4
64633086A643EF0E9A2C98B0D5A62DB8A6F5D3297FE084F2EC7562D3E0171D35> |-
/equal <1C60D8A8C9B7F3749C02C88CB51F601569208D1F07B53F91AE044DA8
EE7F7F0EFE01EDB235E1DF877FB43C6BC9D893F3B9E8> |-
/at <1C60D8A8C9B5F1AA23A4B03265A5EA1D6BCC2EC6116BBDCA00A09B9C142
DF3AF5AC8A728B4BACAB33EAAE602A307285DA7D8EA39D7AB6008B335384686B
8FF0ADE8C762867459CDCD123AE0E0E867B788CF8804482EDB260A0C7EE078BF
8ABC12D61DEFE3492FF1AEA0A6B0FEA87851F91A596E021A4903049D1092D828
BADB5F648F2AD55501FE69EA885F488BC6AD72BCFB2103C3DC940990CC9422CD
7B6414382A41C9D6D13CEA192E3C6A11485F7DAA614656760A875D3CEE999A08
06C5EAB6C105A8EF56BE35166A335EDD3> |-
/A <1C60D8A8C9B6079F3517E07AE194467F2600CBBF80CDACFF67CA946405EC
4118A902AA9E3AD1C2ACBC1C96ADCDF278A5B068D6AD3EC85B0F1FA9ADA650BA
DCDD259A1E80F048D046> |-
/B <1C60D8A8C9B6079F1E21021F82EA7F7A31435010A538C84C74ECF8098981
C0B5BF242A1DCA5CE3A2C97884DFC17F62714226B8342BBE43B1C236B848F6DA
D8B1A83CCB9003DDE095565F71FD049FED4F0C3080B8E5C7842037D9D5FCDCE1
CEB524F2D72D976D20D844EF47A59FF26031A1B35E61B7F6B156DFE4EFA66434
D1CB027B2B1EC1B0ECCD5498BFBD8B8FB5C28BBFE92B087EB986C22713E9AD10
23259C9139FD2B0B84CFDF6AFC069A5B8368E961D17C824BB033F4C7E40B0598
13AA674E> |-
/C <1C60D8A8C9B6079FED37BD4297810A8F45ACF55D8D12634D77C5813B2BA5
52EE475FAE4879F3DD2AB20BD9945A4E8BDD86137D53ADEDD687C2FA6D371D3F
79E1AF8B21C167D0A1C13C40E843C9F29F0084A04288AE92384343780B0ACE2E
7B05F0> |-
/D <1C60D8A8C9B6079F1E21021F8DFEBC43D42A708489C7DE9C2A547484CC61
F625BCD0D05D23D83FD37C63566CFD3D632B2C7362B4C8B59094EFB4C9BBBA56
55012F391A5A4A127152E7BA46B3A700> |-
/E <1C60D8A8C9B64EDF8848CCF73D4277D726AD6058F694165E2A2CB1C1EB10
79905F8B7B0B8837025D68732518E0A712113FF7D9EF6C899EC76F60CCBE646A
C6BD5DEB> |-
/F <1C60D8A8C9B7D8BE41A64DA54F1041CAFA8003E90FAAD3AFEFB2B35892D7
DA35D646001C2EC6AAF61323D272A19EDE14BD4750A7EF9E29ADC8A12D> |-
/G <1C60D8A8C9B6FF867A376B705FE74516DAC940956C4E272A7679CD623DC2
3FE8FABD945A843B055DF3DFAE3F5DCF4089771776AFBBBB07265126AF8D3EEE
FE391F689478C6F71240E8B5BE6AC269C5EF9D22208CF9DEFD23555DEAC0A0F0
377B08C14247C658755D191CAC21D0F7D999C76C8189B44D7E8FF0AF89B5BA60
AAFA68A234F25AB5F8A6E693AE39A1E0C34D1CE68815283DAFAD95798EA8B000
374B6EEC5F757958327082E4BBCB8DC8836F6D5710D21D02B4DDF00058723B8D
8126> |-
/H <1C60D8A8C9B6079F3517E07A1F0288A4608B0FA43183D7E68F18811F040B
242CC091E998D56DEFD35230A19B3B4AA8E2E25E5D16AAB6CECF41E8CED7A64D
8333C080E6B110> |-
/I <1C60D8A8C9B854D0A3953AFD56E13A2711DDCC5AD89F7135E194E27E004E
E8C929C12A> |-
/K <1C60D8A8C9B6079F3517E07490032230DBEB9912E50DF49EB8DF1FB3D50A
EEDAE38673F2292C519F003A101C0067B0119B7BB61F2FE4D45C4CF230D6EF3D
E657E13822> |-
/L <1C60D8A8C9B7D8BE6A287B22DA0B19F05B2FBD0CC9EABFA4F6FF71D08C02
F57C33E4CDE5822439A881D2> |-
/M <1C60D8A8C9B6B41CC7E939797865C145E43F931AC19F6BE6ACDDB6D19D73
31986EFAFD75D7A5B653EC4D98CAC1D9AFD60DC2F6E9931AC429FBBFFBFFA286
881E85D8E30A3A7E6E7E02F751FC06A2336E2D4606> |-
/N <1C60D8A8C9B6079F3517E07490032202E3565C1E79DF5E2CEC4A45528FC5
016B29120A3E353AAA58C8CAA884C65BAC48C2BF75C8B630A8C2AE2DF60F19E9
5CA77542> |-
/O <1C60D8A8C9B6FF867A376B705097D3DF2A09DD418C426287289928C624EE
A3A0AA5CD32985B403C4A705D174ACDF14F2551DA95FBC1C89EE4C51CB768A6A
99DDBABA0DAB09FDABEBAD1A9440E373139F78CFB64D66E43E3F4BCCEFFF> |-
/P <1C60D8A8C9B64EDFA3F30AE4FF71B5F4ACB06C7830091ED76355AF57E563
BACE6B9F18382092F649F10A78153D9E643FCA4FB2F0EA425397CD32EF53DFCA
2A21E66880A9FE4531E700C6054694F979479334C9EA> |-
/Q <1C60D8A8C9B6FF867A376B705097D3DF2A09DD418C426287289967DC6B26
76B08C5B3259DBF98E92020D65F2D21899EB8BDFD873C632D27E272F733B3E4F
2FC5AB0745DA7F78BFCCB46A192D39F41A78A3940D144B46147CFB08594BFB4A
5325D989C890A2F255BD87418332972346C5B1485F3A3A1171C79EB6> |-
/R <1C60D8A8C9B6079F1E488480F8E68E5DD28C4CA6F2FDB05A637E428CDEE4
C22721187778E5F2B25D958D16227514110DCE6B3233C5414B45808A9D8EF6F1
51BE915BBC23B9359B9BB6EC849CBE6D12FD40BC3365C05316335547AD48C457
A49D34DA9AE5416AC2C9569D67C306A93222297043166740A51DD29D1B1114DF
68EBDE0DB312AC26E786906787> |-
/S <1C60D8A8C9B64EDF7BB34086DE0E69D005A26DA4BA735FB798EA75D21BB5
5F6C759A94D7062788EE1818A2CA42627F3ECF77AE8E6E0C7E51D6A454D23A0A
9A7EEB64A70BEE97F45AA8B3E2371AC3DB82FF7E46221DB88F49D982D34C205E
2D12707FFEB990F6572BC32BF83CE5AE033213D02C9D3ABBBF509C642807ACD2
B8C0DCA6FB993EA33F866CDBD15C99D9850FE920C5F6B7C2EE42FD386D3385DA
4F71F4FA7DB0C17082384CFE> |-
/T <1C60D8A8C9B7D8BE41A64DAA76A975BC551F108B068D01BDBBAC2AD27262
B59952A766BB13F857E80A9C1CAD3ED3A7ACB4> |-
/U <1C60D8A8C9B6079FED37B83A011931DC1977ACBC6966068B30CD81707B5A
34BF29FDCFE6B65E47EEB3833460F45B48B8D8A1A7500F8D135FF567512179ED
4B4926218477C5EA2656C91723844B6007> |-
/V <1C60D8A8C9B64EDFA3F30AEA5DF4FD0964F225B1AB77155B858795DB940F
3250ED85AB896490D7338C395E6023268D9615893A34> |-
/W <1C60D8A8C9B5D6EF3E8CC324F340E16F2C5F67E2F19E8983FB300B967D4D
08235357362B71427237F050DFD0523E4FD3E117E0F3D21DC1918972A3A48BD1
C964E96D4DDFF50C66E033A45D64E620B0F9C52117BBFAF7D9DFAC0EB801CD98
D3E4CD75615F3BA1> |-
/X <1C60D8A8C9B64EDFA3F30AEA5DF4FD0E5C9F9612B3E31F0BF2847EC02A4B
B0AF94CF18724C46D0CA78F1440D73C19939A24A0FE789BA2847FA8307436882
D824AC4D58578974DB477D> |-
/Y <1C60D8A8C9B64EDFA3F30AEA5DF4FD605F9BB7852CCA523D8D1C6483E230
D252949926C00B774B756F81CBAE9E8B380B2EE315D8D0E173E55FA07A> |-
/Z <1C60D8A8C9B7D8BE6A287E8F2ECFE63331E2C94DC5136EF9076A2E0C2F15
5A8A5A80972857A2E0E298851982C749331609C05667BC97A8BECE6333> |-
/bracketleft <1C60D8A8C9B81F2C36DA05304D09322667071983B2090D55F6
7F10A8A858665340E4F615E9DD777C8117DB9EF63C> |-
/bracketright <1C60D8A8C9B81F2C36DA05304D0932265A5D6EDAA14152109
230F22B55990A27F51303B091CD9C0D7ADC6EC1964B> |-
/underscore <1C60D8A8C9B7EF3227CDF5A45A1954DF49E9DBEFD29031420CE
E56F974FE> |-
/a <1C60D8A8C9B7EF325730A2907F61B00205C0A296C9DF32E9DC65B526E2F4
C8ADC580B897B7206A5DA59C9696BB00EA7F1A0A06C73023E46EC804A076F02D
F4BDC69A6135461545FA8A14BD27F8CF4F25F4943E37F1D1C65276DECB4E9D6A
C0EC48F60EFDBE12AA6587FCF164CC3DB45D2B5A65777B03419394CDDD24FF22
F21243F8E28ED1FF2DD09C8E2A84D298381AAD9550B39360621CE1C759F80798
D4E2E93482B63D0349BE8E88D5485F93034964B138E766D0A08074C8EC8EE58B
FBF92479BF1434BFA703> |-
/b <1C60D8A8C9B7D8BE9CC6FAB2DB847ABE04CAE7CAF1EA05B0E7D31C94AEAB
32DC11AAD9FE7C6EBC3EB4F9584C94ED17317F30EF5E26A6CD98DBB2E1F67590
2336C75969CBF0832C1A5BF2FE7F9273E6E044347C9F71542079004F57F19D41
D20F16BFB70F9CE2EE58E9300EF5BCB9AF38AC86054B169BA21FCE6C8B83EE9E
DA50EB476AFF013A48E87593674412EB216F5524B2536D0439016D91> |-
/c <1C60D8A8C9B7EF32A1CB4643D9F758FE77E8D463BA3587C906C92C06DFB4
B5EA9664C3EB7AE74722EC172B56EF65CCA8FFF074C589B30756144CBE6731AA
5E6474FEDDE0262E202640C515DE0444A603F708E3C5E4E728C6CCB962ACA3> |-
/d <1C60D8A8C9B7D8BE9CC6FAB2DB847ABE04CAE7CAF18F66C0BBD51FE97C0A
303DD1757BD410028AB0A6B0D151DE51370F41EC0906FF9823A3B56FC4C5E195
9632791667AD20258ABD3FB2D692031CD3246B770B141196D1A3ED87FE61BBC8
BDE49762DDA99E5D99A7EC80CC7FBA3D3E9DB276FA89E5D888EF39CD6CF2A662
7805B514869C63EC1CDDCAA18718AE178F21AA780004BFE8D9C5F318> |-
/e <1C60D8A8C9B7EF32A1CB45752FF6523DA5288185EF43DD045146AAD81675
EF96A1DDE9797BFF08369703AB5B932EB4FC76842B8FAFEA26499EB28D9010BF
45781D64B0753AFDAAF76627560E41BCFD847C893FE9E9680771D287E1806D72
84DB4BF9596E39109D2864B1FF> |-
/f <1C60D8A8C9B81F2C6DADD030827122CC8CF12A62C79CD3109A93F080C6AF
D2F5C080DB6BEB918C13866DA8889B8A1BB5343211952CEA2DEEF17E86E07C78
F7C276815BBE8A9FC38ED4DE8D13> |-
/g <1C60D8A8C9B7D8BE1A3055587B34EC2A3DF2B79203F4050AA0B5738ED638
04380D2E13E060816E3421AEA1DC12A32CB72F12790D0531C0BCCFA2CD650E69
BF11A8A0B494E5997E2753F4DC7CC615950DE260CBFC81E5B438A30B9D1AD997
BAB5450F1B8057E9A08FDF0718C939D7BA23C215F3022BCED0B9A537C28F8186
7362D2D294B15570F2321017B898104E0838A83FEEF95313323561CAAA94467F
81A81D82605DBD0767EF388643166EBADEB4C9811852DF8D45F955B91E9BA5C8
9189E75A5728690EB0914B68BFB3277365BBB1F1EFD1E389E99F88EB021EE238
5C968A7A43FF69> |-
/h <1C60D8A8C9B7D8BE41A64DAAD50EBDD429B42F571913832D03DAF2AA4930
4411DFC9F8FD2277F233A86F2CE4ED47794E3F9B5999EF34718E1649B74D2BA6
CF969EF190C0D72D77450A79FE656AFA0B2D92A4> |-
/i <1C60D8A8C9B854D0A3953AFCCEC8366C1D9CC8ABF9AEF18FDFFCAC314569
F9907FC5583E9D03A4D019A6CF0F25B41305D6CDC0057657713A374168748F41
BCB7F4> |-
/l <1C60D8A8C9B854D0A3953AFD56E13A3C2277C895ED2230AD4B57AED4E6F2
F61F2CD118> |-
/m <1C60D8A8C9B59F85DBED304F205490E957BA80A7CE923989279D287A3DB9
7E93876C271A2C24EB89F39ADD151395A0382BD3CF306DD3500A44E02FD331FF
5F6833EC31518A35916D67D8BC58A88311498E0D46D0A13D75376763AA882382
C8F3547A34FF4AF65F97E4FFE5FF22577B793A63A62C968C68E5E59ED9FA05A5
2E2BF36653087848C6B445B278603F0C520FEA9021ED3917FC5606815DEFC9D7
9B> |-
/n <1C60D8A8C9B7D8BE41A64DAAD50EBDD41CADFC55395F79E79D65C1305616
5B4B592635D62DE2A0394E5032302F5CFACECE059BF877A8313C2AACD1E23323
A6DC0569FC07221BACC79EF8100AE4A1FB5DDB16A4DD38E8CC77C17FB1D2CB66
0A3721D14AE87BD921727B4AFA4B53E9E311A5F7> |-
/o <1C60D8A8C9B7D8BE9CC6F749512707A5CB05AB5243B0645F9444C502F419
3FB356ABA45B4FA26E907D725C29EBD51C6E82BD7C0D8F7061BDD006EA19F724
8676AEE29D27B87199433A93CBAD6CD52EE44525E04315718039BB53845EEB> |-
/p <1C60D8A8C9B7D8BE1A134861007F288709A026F4EAD441D0DB9001EABE2D
B92C5255FB184DB483EADFB48D2A88F026A2DD6EDE516F48FD443804CF9B7403
384A077AD30002C76ABA036DBBD46EFDA92B4EE0B7CC2E41CE6F03D681AB67A6
943524EEC72E907786EFDF10215A97E25147712684BE980577BC11BFE0413A23
5E7ADDC08DE261A758229961668104357A71DDB42A5F330CD2DF0F> |-
/r <1C60D8A8C9B7361F55E947F94FA9A74271AD89AF0ACFDBA20EED9EF285A4
8659332E27E557A0A575DD525BBCE890D404508496BF16A92B81F66619D70402
C8D72AF76C7243E9544720CB7C4B40CD5D238237C30B32E563> |-
/s <1C60D8A8C9B7EF32A1C9A55715442669FEA39943230735B36BA1D69124A6
B1AA7B79900DEB09302A96DDB334556A0C50310E49F72ABD34086BE04C9F56C3
A992C64040DA71C798B57BE72592455CA5C09B1689291508F5F788120F16B56A
A673A954D30C862A8D3BDCCAC3E1B28A4D5BBF2647EF1C70B8C4A494C4A0815D
49B6D568AAAE5D2FC4870B0E463670A054A66F5523F4E6C46A91A707298504F2
A7DB1BB4A1307894F83CF1C23A4F4F83AFEB35A393B96E645A64F45A90DAAC3F
2773B226C66AF70EF1130DD00708D0F1863C10C54696AFBC5F1AA9DDDB0FFFFD
051BFA610B7D9BABF9E13927228A1E8EB0F493EFD1F3E1F1CFDE604027DC154B
24C98FDDD15B7B0C37> |-
/t <1C60D8A8C9B81F2C48F08776F2C719518D47AF26D067673C2134BFE8FF0B
E648A55033C05D6EF107FB63837C497CF67E5F2E872B1CB4B010376FE93C318F
F3946E3F8206701C10348C551353812E54> |-
/u <1C60D8A8C9B7D8BE9CC6F74951CF10478FEE82D05CD2F0140C93129E4E44
116C0A59A0D442838CCF37825901D3791684205419771B8111B2E43595C1D708
24A8D86A743C567A4A18B85F8C7448B3433592463B8D0984CEEA979FDC9EE3E8
87> |-
/v <1C60D8A8C9B7EF325767DC58E0BC691E0794E36C8FA4E528864575F2AA80
9B0F1F7A8E8F3555D4556170F14624C7336EA1AAFE988B> |-
/x <1C60D8A8C9B7EF327C102745EEC88EE4752E828DC4FB42FAEA86E00D1148
C3B04AB81A4BFAE4ADBD961AA9A6B9576B35D0C1E7B13330237DB554BB08BA0D
F19036846A466558700FFE> |-
/endash <1C60D8A8C9B7EF322B629FB76A26F6D3A12179746BD7B5B0C671E96
4DA0D84> |-
/degree <1C60D8A8C9B70B6BB592771720BA9A2D3EF485F5427FF4811591FD6
0A33B99C7819080707C9FA630BC287F6F39EAA07DB03B5D1905DB16631DAD23D
D3324FBB9CBABDD3DA7B2B741> |-
/multiply <1C60D8A8C9B7F374F2B65C6FA9554FF5DF4566D2900A2D06F03E3
BBD921B1EE23810DD6FF3BD802BB7DA8242538D3698A4FE1A5BF8D7B0879A43F
C00A3B31B93456B06F28A67> |-
end put
end
dup /FontName get exch definefont pop
end
%%EndResource
reset_gvm
/NTCUZU+Helvetica-Bold /OYUBAA+Helvetica-Bold findfont ct_VMDictPut
true set_gvm
%%BeginResource: font TFBAAA+MISCLogos
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TFBAAA+MISCLogos def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/BaseFontName (MISCLogos) def
/FSType 1 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/FontBBox {-4 -216 7777 805} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/.notdef <1C60D8A8C9B7A73DB6F0B6FAFA7BF3C28FD0A21D0FB47F319C2663
C0FF8BB5724CD1A2DA> |-
/B <1C60D8A8C9B08A951BB08A3454F7EF67801B4AC1B74858E9E23E9CB03EFC
4F7EB4FF25A0FF4876C4805AEB709462B2377C1C3998D935B6113745CF354179
15BF165E3E1E42B8B6E2D68219C36887B2497EBAEA1FC74683188ED67A3C1C3F
43D76DABFA6D3C59E1A97890509F49AA0E2073FF52C7D5276DD391F1B55EBC88
DFE68434FD9C24FD38C3DAA9ACBE4D22649BC3C3C27EDA1969E075C7B22A40C2
0475238FA338E7B523BF846961BA9053CB4D6076E0929A524C2A5B526AEB90A2
C3137B54123062156E896352B517024C525E00CDFA5E588B4C957347EE7FC3A8
82DE63616E69B94D97A6FC5899421BA316DEAA12DC60C1E879794627E6D9AC9F
64D64D046C0B4597C772D70912AB2A2EC8A464980296292AAB54BB6F762956D3
BC8E30410E7B92C42139207275D553B798F3BFBD4E0977CDBBD2CAFD7A463443
1D1B52B4B52F4D306ABC67ED33796887AD4D480A20D338CABAB21CB81201C2F4
110625AD69B8AD7F5CD73D12FD8D3F6A9141746FBA71BB5DE3DFA1C8064D7698
0BF5754BF25487024970883A0721DBA742D60A17FD516C1D94AC7F341C238715
F6C576CCB9BB36FF2C3D3836E6B271D3E066296AC5B238EFCEBFBCEA0A581C6F
634E2F89BBEB360F94FFF519AD96967A356B6177A7443C8AD77DFC6018157FAA
47F76F976B7E4FFB67D59162A29E90098199642D5D39562DED4BD9CA2F6BE578
5F4239DB0E9F83FE7232D2688DF8E9490E9049E22B402774B752D35EB528D323
CF31C3C606FA940843506B7507736E6E2C7DC628595F3B5F38958DC7FA48D817
F7BFAA2491E3C9771CB33A77A5A5C9608610891864BD2272B5B7B6F5DEE964B6
F36925572A8887A5DF1C02F2CA33796C7D403605EB3190888DF698B2B33875E7
F05402E5547037444EE6C814A41ED652AC6A5DC92657860F42FB96E2C59A1A4F
F4441155BC1853EFD3DF900E87D42B3222F7F70A391C5816C60DA417C0316B69
44419328918C4F94E93FF039BB78810CFF99F5796CCBF1C8BBD504285A0418A5
A70DCB1CC8779ED6432C85276AB24677C295F6BCC24F798383A0142C8E3EE5AD
B99B12787A7686CD64993C0F8954DB07F09115AF7036D7D3DC28AE1639B7F9DB
E08176A48D072AD4664A8E0F4035835C2251D078E34BBEB670251FE172121C94
19E709C99E357D1AFE22A66BC90E3FCF366F31455603B637D5E7E588CDED192F
815741FABB6D8E2466C4E26A1316C32B2366BCFB6A33AADC5208B5CAC47E93F0
B3A80C68F61BF88B179A685BD517DEAFD79273846D5BB0778633062277B2BA7C
B8B7F83AAA96361CEDDB5B0E6EFA2FF51CFDA7C88498BB5AF3ABC8FC861D0C2D
D34382FE20775094C98D86BE1364CEF9A406DD55798F6E3AD0DC56D390E50E21
942F5DB526E80A824244A0419D9B2901C0ED526096355ABADCE5CFC47DF4A553
737C4D9CA3B060C6FF495617FA191A5CD9885CC8EA3F874C933EDDF9480ECC8D
6E7849FF550DE748CD13D2894AB2AA3ED84116DDC824D61F4E5F100F282FFE86
BF8B39EE34CA539CC6E1F8109FBB13F76362201104B3A19047A769969810E1E0
20EF27C1ADC5726F80EB6D4EB153E4CF5298985162061A4DBF0881864AAEFCF3
13F5CE9A3CAC2E5309A5E479E22EC6ED93A87C02E5> |-
/a <1C60D8A8C9B08A95173D6E20D2B0F68E46C47770F9860D19399FBDCCE0CB
4ECCFA0269FF48B14662CCEE790847259DDCC6ECE1C6EE552D6F664483F1FFDB
055FAA55E68F2F1F7F973A53004C36C258769D9D5581DFBB53B76FAF0232BCEE
4C7B1FC38BEDFAC860173FB095893A21E6A9843DB395B1141C7FEDB33F5C5774
A9D33C1EFD5703FBB82D58822B772F2A6090185523D0D4816E7DD07AC5E249F1
55F993E36F357EC5D8C869C3261585327C9F059DB72DFEA247766850FEF0BFBD
8F9881F6C3950E0BE87D04011735ACFEC26F9B6BA7E6232C5B8CE0438194AD3F
894D0D0B555D0ED87867761B303418307B0C63E6FF315239672727D30EA17464
CD23FCBCFC6225C6D07DD53A0072AFF4BB75064CB7B65BEDD5A6FF246BF3D33B
6C80D76A2381DDD8D5A5BE3C702A560857FD5693F99473F86D2188AAD46D0274
F23FBD13F423209F5FA884CAD4484F7BAD834F5DB4BBF639BD255170B8D384CE
6BFA586A7EA0CA426A99084D77C8ADCF851F1C4D3A0EA229911B98791E39C1EB
B20FBD4C33825700CC21FB4FA42EC5F2B30C7A8B9AC0573F01FCBF7CE5B16345
C42361DC95A17F6487C08898B6FEAD48313B59D3C0F383D364992B767B259F44
43DC89DF1DE08F01FD0FCCC769229B0295979BDBB1CB5EA92F90D3ED8568CB3D
21A2630CF4617B57B6A2AA88B3FF3EB164E6FE4108EAE8A2796437AD730D8518
AD2C72B5229A4C262D84E8B4FD2C8C629C61CD59488E45F95214C92E5E7DD024
50A99BD047508F80726089D79B82C3669F58126139158069DCA6E01184B48BDA
1BDC3734E743EDCD45564B474B9BD0458896B3CE5A93E320D75F42552C43AD93
EBB9A84073201DACE9387AA301E0318E226B90B290047102380542D66CEB81B6
FAB229D4CA8705D4E4C486D0E8692D25FC3F9D7412F8B3ACAF83F7F59546E3B7
00DAD5EBD1FBC096F3CAE3C8074941F1312E870E6CDDF5A2B8D6028DB974E6A3
EDD04D1787CD181AD9C6DC20A40445B68030923C872CEB3FD80F74ED6F8CE5F7
F6CE8E4D8811DCF47C415C9C089063028B0DB0C73F5643520AFFB38273A9DCE1
C2D7D8D576D70A5D4D61D3B43441400D1800466020AC24D4797A1C56D43F4401
272FA2BB72077D07F80D113B2EC33243E280C261D4FDDDFBF7A8FB6F616478CA
B93A8D4CBAD40813DE77898E4321DFF49EBB3FA083C5647A3AF5924B38FCD87E
5F0A17DD2B7F3C9C4DF4D6B5C340DD0667DBE7DEF1039075A4844656BF2DD08C
6E861AE5D6EBBC5C1166AABA37294B83943B6A8800595FC4078F15E96DB14D> |-
end put
end
dup /FontName get exch definefont pop
end
%%EndResource
reset_gvm
/NTCUZV+MISCLogos /TFBAAA+MISCLogos findfont ct_VMDictPut
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -612 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
32.2237 0 mo
32.2237 612 li
759.776 612 li
759.776 0 li
cp
clp
[1.90908 0 0 1.90908 -197.811 -658.007 ]ct
55.2 93 mo
216.42 93 li
216.42 47.22 li
55.2 47.22 li
cp
false sop
/1 
[/DeviceGray] /CSA add_res
1 gry
f
gsave
55.2 47.22 mo
216.42 47.22 li
216.42 93 li
55.2 93 li
cp
eclp
1.005 setflat
140.07 67.716 mo
131.195 54.0651 li
131.195 67.716 li
127.143 67.716 li
127.143 47.505 li
131.291 47.505 li
139.829 60.963 li
139.829 47.505 li
143.881 47.505 li
143.881 67.716 li
140.07 67.716 li
cp
164.188 67.716 mo
164.188 47.505 li
168.191 47.505 li
168.191 64.291 li
177.212 64.291 li
177.212 67.716 li
164.188 67.716 li
cp
159.171 67.716 mo
157.628 63.23 li
150.2 63.23 li
148.849 67.716 li
144.797 67.716 li
151.598 47.505 li
155.698 47.505 li
163.32 67.716 li
159.171 67.716 li
cp
122.223 67.716 mo
120.679 63.23 li
113.251 63.23 li
111.9 67.716 li
107.849 67.716 li
114.65 47.505 li
118.75 47.505 li
126.371 67.716 li
122.223 67.716 li
cp
186.521 68.054 mo
173.545 68.054 174.028 47.119 186.665 47.216 cv
198.869 47.312 199.207 68.054 186.521 68.054 cv
cp
212.23 67.234 mo
212.23 65.304 li
211.796 65.6901 209.867 68.15 206.249 68.054 cv
193.901 67.764 193.853 47.505 206.828 47.264 cv
209.963 47.264 212.568 49.242 213.581 50.64 cv
214.787 52.2321 214.883 53.583 214.932 53.921 cv
211.507 53.921 li
210.735 52.6671 209.529 50.544 206.683 50.544 cv
199.159 50.4481 198.676 64.6771 206.635 64.822 cv
210.156 64.918 211.941 61.2531 211.941 61.204 cv
211.941 60.143 li
207.118 60.143 li
207.118 57.0081 li
215.414 57.0081 li
215.414 67.234 li
212.23 67.234 li
cp
100.179 92.944 mo
55.175 92.944 li
55.175 47.699 li
100.179 47.699 li
cp
55.175 92.944 mo
cp
152.756 92.413 mo
148.897 92.413 li
142.24 73.359 li
142.24 72.299 li
146.292 72.299 li
150.826 87.059 li
155.264 72.347 li
159.22 72.347 li
159.22 73.408 li
152.756 92.413 li
cp
185.025 92.4611 mo
185.025 72.299 li
199.352 72.299 li
199.352 75.9641 li
188.885 75.9641 li
188.885 80.113 li
198.146 80.113 li
198.146 83.731 li
188.933 83.731 li
188.933 89.036 li
199.834 89.036 li
199.834 92.4611 li
185.025 92.4611 li
cp
126.082 92.4611 mo
126.082 72.299 li
140.938 72.299 li
140.938 75.675 li
130.134 75.675 li
130.134 79.968 li
139.684 79.968 li
139.684 83.634 li
130.182 83.634 li
130.182 89.036 li
141.276 89.036 li
141.276 92.4611 li
126.082 92.4611 li
cp
115.325 92.4611 mo
107.559 92.4611 li
107.559 72.299 li
115.373 72.299 li
121.161 72.299 124.635 76.881 124.635 82.717 cv
124.635 88.554 121.548 92.4611 115.325 92.4611 cv
cp
164.767 92.413 mo
160.474 92.413 li
160.474 72.347 li
164.767 72.347 li
cp
160.474 92.413 mo
cp
175.427 92.944 mo
164.381 93.1851 162.451 71.864 175.475 72.009 cv
182.71 72.009 183.964 78.0391 184.254 78.955 cv
180.25 78.955 li
179.623 77.701 177.983 75.2891 175.957 75.145 cv
168.819 74.662 168.819 89.76 175.957 89.76 cv
179.382 89.76 180.202 86.335 180.395 85.949 cv
184.302 85.949 li
184.302 85.998 183.82 92.847 175.427 92.944 cv
cp
208.468 92.992 mo
199.93 92.992 200.027 86.432 200.027 86.432 cv
203.886 86.432 li
203.886 86.432 203.596 89.6151 207.889 89.9041 cv
208.951 89.953 212.423 89.519 212.423 87.1071 cv
212.423 84.309 208.902 84.454 206.683 83.827 cv
204.465 83.248 200.268 82.283 200.268 78.376 cv
200.268 74.952 203.066 72.009 208.468 72.009 cv
215.703 72.057 215.655 77.653 215.703 77.9901 cv
211.989 77.9901 li
211.748 77.17 211.507 75.1931 208.275 75.096 cv
206.683 75.096 204.272 75.627 204.272 77.5081 cv
204.272 79.871 206.973 80.209 209.819 80.643 cv
214.112 81.463 216.572 82.7661 216.427 86.721 cv
216.331 90.194 213.244 92.992 208.468 92.992 cv
cp
156.277 59.275 mo
153.721 51.6541 li
151.164 59.275 li
151.164 60.384 li
156.374 60.384 li
156.374 59.709 156.374 59.6121 156.277 59.275 cv
cp
119.28 59.178 mo
116.724 51.7501 li
114.457 59.13 li
114.312 60.384 li
119.329 60.384 li
119.329 59.709 119.377 59.564 119.28 59.178 cv
cp
186.376 64.6771 mo
193.853 64.725 193.853 50.7371 186.521 50.64 cv
179.237 50.592 178.996 64.629 186.376 64.6771 cv
cp
64.437 54.741 mo
64.437 87.203 li
92.654 70.61 li
64.437 54.741 li
cp
114.987 75.723 mo
111.804 75.723 li
111.804 89.326 li
115.229 89.326 li
119.763 89.326 120.438 85.467 120.39 82.525 cv
120.39 80.209 119.28 75.723 114.987 75.723 cv
0 gry
f
1 setflat
grestore
0 gry
/NTCUZQ+MinionPro-Regular*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma /.notdef /period 18{/.notdef}rp /A 
/B /.notdef /D 4{/.notdef}rp /I 23{/.notdef}rp /a /.notdef 
/c /d /e /f /g /h /i /.notdef 
/k /l /m /n /o 2{/.notdef}rp /r /s 
/t /.notdef /v 137{/.notdef}rp]
NTCUZQ+MinionPro-Regular nf
NTCUZQ+MinionPro-Regular*1 [7.5 0 0 -7.5 0 0 ]msf
54 693.36 mo
(Blackfin and the Blackfi)
[4.41148 1.89904 3.29397 3.12153 3.72152 2.22153 2.01154 4.10398 1.68003 3.29397 4.10398 3.96149 
1.68005 2.28894 4.00647 3.18903 1.68004 4.41148 1.89904 3.29397 3.17403 3.72152 2.22153 0 
]xsh
125.402 693.36 mo
(n logo are registered tradem)
[4.09498 1.74004 1.89005 3.81746 3.50252 3.81746 1.68004 3.28497 2.82001 3.18002 1.68004 2.77502 
3.18002 3.50252 2.00253 2.74504 2.27995 3.18002 2.82001 3.18002 3.9525 1.68004 2.27994 2.77501 
3.28496 3.95251 3.18001 0 ]xsh
209.88 693.36 mo
(arks of Analog Devices, Inc.)
[3.23921 2.81927 3.72676 2.69928 1.74004 3.77922 2.21928 1.74004 5.18921 4.10922 3.29922 1.90428 
3.77922 3.51675 1.68004 5.51927 3.19424 3.47925 2.01678 3.17929 3.19427 2.75928 1.71674 1.68002 
2.51926 4.13925 3.17929 0 ]xsh
49.5 107.22 mo
581.04 107.22 li
581.04 106.2 li
49.5 106.2 li
cp
f
580.02 138.66 mo
581.04 138.66 li
581.04 106.68 li
580.02 106.68 li
cp
f
49.02 138.66 mo
580.5 138.66 li
580.5 137.64 li
49.02 137.64 li
cp
f
49.02 138.12 mo
50.04 138.12 li
50.04 106.2 li
49.02 106.2 li
cp
f
/NTCUZR+TradeGothicLTStd-BdCn20*1 
[32{/.notdef}rp /space 33{/.notdef}rp /B /C /D /E 10{/.notdef}rp 
/P 16{/.notdef}rp /a /b /c /d /e /f 
2{/.notdef}rp /i /.notdef /k /l /m /n /o 
2{/.notdef}rp /r /s /.notdef /u 138{/.notdef}rp]
NTCUZR+TradeGothicLTStd-BdCn20 nf
NTCUZR+TradeGothicLTStd-BdCn20*1 [21.6665 0 0 -22.5 0 0 ]msf
429.78 66.48 mo
(Blackfin Dual Core )
[10.8029 4.77963 9.5896 9.5896 9.5896 5.99295 4.77963 9.5896 4.79913 10.8029 9.5896 9.5896 
4.77966 4.79907 10.8029 9.5896 7.18451 9.58954 0 ]xsh
409.392 93.9525 mo
(Embedded Processor)
[9.5896 14.4214 9.5896 9.5896 9.5896 9.5896 9.5896 9.58957 4.74066 10.8029 7.18445 9.5896 
9.5896 9.5896 8.39807 8.39813 9.5896 0 ]xsh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 1 colr
/NTCUZR+TradeGothicLTStd-BdCn20*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero 5{/.notdef}rp 
/six /seven /eight /nine 7{/.notdef}rp /A /B /C 
/D /E /F 9{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp 
/a /b /c /d /e /f 2{/.notdef}rp /i 
/.notdef /k /l /m /n /o 2{/.notdef}rp /r 
/s /.notdef /u 138{/.notdef}rp]
NTCUZR+TradeGothicLTStd-BdCn20 nf
NTCUZR+TradeGothicLTStd-BdCn20*1 [17.3611 0 0 -18 0 0 ]msf
251.16 127.92 mo
(ADSP-BF606/ADSP-BF607/ADSP-BF608/ADSP-BF609)
[7.66321 8.63541 7.66318 8.63541 5.73599 8.63541 7.66321 7.66318 7.66321 7.66318 4.78125 7.66318 
8.63541 7.66321 8.63541 5.73596 8.63541 7.66321 7.66318 7.66321 7.66318 4.78125 7.66321 8.63544 
7.66318 8.63541 5.73599 8.63541 7.66321 7.66321 7.66321 7.66321 4.78122 7.66321 8.63541 7.66321 
8.63538 5.73596 8.6355 7.66315 7.66321 7.66321 0 ]xsh
0 gry
/NTCUZS+MyriadPro-Bold*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero 33{/.notdef}rp /R 
18{/.notdef}rp /e 16{/.notdef}rp /v 137{/.notdef}rp]
NTCUZS+MyriadPro-Bold nf
NTCUZS+MyriadPro-Bold*1 [7.98 0 0 -7.98 0 0 ]msf
54 707.82 mo
(Rev. 0)
[4.74493 4.22621 4.24216 2.03964 1.6199 0 ]xsh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 1 colr
/NTCUZS+MyriadPro-Bold*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero 19{/.notdef}rp /D 
/.notdef /F 11{/.notdef}rp /R 14{/.notdef}rp /a /b /c 
/d /e 5{/.notdef}rp /k /.notdef /m /n /o 
4{/.notdef}rp /t /u /v 137{/.notdef}rp]
NTCUZS+MyriadPro-Bold nf
NTCUZS+MyriadPro-Bold*1 [7.98 0 0 -7.98 0 0 ]msf
223.503 707.82 mo
(Document Feedback)
[5.57402 4.56053 3.61897 4.61636 6.88277 4.23338 4.69621 2.94864 1.6199 4.22537 4.23337 4.2334 
4.77597 4.73621 4.25732 3.61896 0 ]xsh
0 gry
/NTCUZS+MyriadPro-Bold*1 
[32{/.notdef}rp /space /.notdef /copyright 9{/.notdef}rp /comma /hyphen /period 
/.notdef /zero /one /two /three /four /.notdef /six 
/seven /eight /nine /colon 6{/.notdef}rp /A /B /.notdef 
/D /.notdef /F /.notdef /H /I 3{/.notdef}rp /M 
/N /O /P /.notdef /R /S /T /U 
/.notdef /W 9{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /j /k /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /w /x /y 134{/.notdef}rp]
NTCUZS+MyriadPro-Bold nf
NTCUZS+MyriadPro-Bold*1 [6.48 0 0 -6.48 0 0 ]msf
54 716.34 mo
(Information furnished by Analog Devices is)
[1.85849 3.77654 2.22137 3.7182 2.4741 5.58447 3.43311 2.38985 1.78719 3.7182 3.77654 2.52004 
2.22137 3.78946 2.47409 3.77654 1.7872 2.82402 3.77654 3.42014 3.8413 2.52004 3.88675 3.36179 
2.52005 4.26257 3.77655 3.43309 1.79362 3.7182 3.77658 2.52005 4.50229 3.42014 3.42015 1.80016 
2.93417 3.43311 2.82402 2.46173 1.7872 0 ]xsh
184.138 716.34 mo
( believed to be accurate and reliable. )
[2.46173 3.87833 3.42467 1.7852 1.7399 3.42468 3.4765 3.42468 3.86528 2.52005 2.34254 3.78105 
2.46173 3.87833 3.42468 2.52003 3.42468 2.88039 2.92575 3.78102 2.46567 3.42468 2.38144 3.42468 
2.52002 3.42468 3.80051 3.86526 2.52008 2.46564 3.42468 1.78522 1.73987 3.42468 3.87836 1.78519 
3.42468 1.68799 0 ]xsh
54 723.837 mo
(However, no responsibility is assumed by Analog Devices for its use, nor for any )
[4.46598 3.77911 4.91963 3.42274 3.43569 3.42273 2.46373 1.68606 2.45849 3.79857 3.74022 2.40017 
2.52204 3.42274 2.76181 3.9023 3.74023 3.83745 2.81364 1.73795 3.87639 1.77682 1.7379 1.80275 
2.37949 3.35789 2.40016 1.77684 2.81364 2.40018 3.42273 2.81366 2.81366 3.77908 5.5741 3.42273 
3.86334 2.45848 3.83751 3.4227 2.40016 4.25221 3.79858 3.42273 1.78326 3.77911 3.77917 2.40015 
4.51138 3.42273 3.48105 1.73795 2.9238 3.42276 2.81363 2.40018 2.211 3.74023 2.46371 2.4585 
1.73795 2.39893 2.81366 2.40018 3.77908 2.81366 3.42273 1.68607 2.40018 3.83743 3.72079 2.46371 
2.40018 2.21097 3.77911 2.46371 2.40018 3.4227 3.79855 3.39032 0 ]xsh
54 731.335 mo
(infringements of patents or other rights of third parties that may result from its use. )
[1.76841 3.84198 2.20257 2.4553 1.7684 3.84199 3.78371 3.41431 5.56567 3.41431 3.79015 2.39698 
2.80523 1.50009 3.7318 2.20258 1.50009 3.86796 3.41431 2.39698 3.42079 3.79015 2.39698 2.80523 
1.5001 3.7318 2.45531 1.50009 3.73181 2.39699 3.79013 3.41432 2.45531 1.50009 2.45531 1.8008 
3.78372 3.79013 2.39697 2.81821 1.50008 3.7318 2.20258 1.44177 2.39697 3.77719 1.80081 2.46179 
3.90027 1.44177 3.90036 3.42078 2.45532 2.39697 1.7684 3.41431 2.80521 1.50009 2.39697 3.77719 
3.41431 2.39697 1.50009 5.52032 3.4791 3.3819 1.50006 2.45532 3.41431 2.80521 3.77066 1.80075 
2.33868 1.50009 2.20258 2.45532 3.73181 5.56567 1.50009 1.80078 2.33868 2.80524 1.50009 3.77066 
2.80524 3.41434 1.67764 0 ]xsh
54 738.832 mo
(Specifications subject to change without no)
[3.50499 3.88092 3.42727 2.92834 1.74249 2.22202 1.78136 2.8765 3.47911 2.33866 1.78136 3.74477 
3.84198 2.75986 1.43983 2.81818 3.78362 3.88092 1.89151 3.42728 2.92834 2.38402 1.43983 2.33866 
3.77717 1.38151 2.92834 3.84198 3.42728 3.8031 3.79668 3.42726 1.43983 4.92418 1.78137 2.33865 
3.84198 3.74478 3.78362 2.38402 1.43985 3.8031 0 ]xsh
180.179 738.832 mo
(tice. No license is granted by implication )
[2.39699 1.8008 2.88947 3.42079 1.74243 1.3815 4.49649 3.71886 1.43982 1.80075 1.80081 2.88945 
3.42081 3.84198 2.81818 3.42079 1.43983 1.74248 2.81819 1.43983 3.7578 2.46178 3.42079 3.84198 
2.34514 3.42079 3.90027 1.43982 3.84204 3.42078 1.43982 1.74249 5.57861 3.90036 1.80075 1.74249 
2.94128 3.42081 2.39697 1.74249 3.77716 3.76422 0 ]xsh
54 746.329 mo
(or otherwise under any patent or patent rights of Analog Devices. Trademarks and )
[3.73829 2.46178 1.85973 3.73828 2.37754 3.79662 3.42079 2.46178 4.91769 1.77489 2.81171 3.42079 
1.80141 3.77715 3.84198 3.86138 3.42079 2.46178 1.85973 3.42079 3.79662 3.38837 1.80141 3.87445 
3.42078 2.33867 3.42079 3.84198 2.33867 1.85973 3.73828 2.46179 1.85973 3.84204 3.47911 2.33865 
3.42081 3.84198 2.33867 1.85973 2.46179 1.74248 3.84204 3.77719 2.37755 2.81171 1.80142 3.73828 
2.20906 1.85973 4.25027 3.79663 3.42079 1.78133 3.73828 3.79021 1.85973 4.50943 3.42081 3.43375 
1.77489 2.92186 3.42081 2.81171 1.68413 1.80141 3.55043 2.5201 3.42079 3.86139 3.42078 5.57217 
3.42081 2.46176 3.51157 2.81174 1.80139 3.42081 3.84198 3.86139 0 ]xsh
54 753.827 mo
(registered trademarks are the property of their respective owners.)
[2.46502 3.42403 3.79344 1.77812 2.81495 2.3419 3.42403 2.46502 3.48235 3.83871 1.31995 2.3419 
2.51686 3.42403 3.86463 3.42403 5.57539 3.42403 2.46503 3.51479 2.81495 1.31995 3.42403 2.46503 
3.42403 1.31995 2.3419 3.83875 3.42403 1.31996 3.83879 2.45854 3.78041 3.83881 3.42403 2.46503 
2.38078 3.3916 1.26164 3.7804 2.21877 1.26164 2.38078 3.79987 3.48235 1.73926 2.46503 1.31993 
2.46504 3.42403 2.81496 3.87769 3.42403 2.92511 2.34189 1.79758 3.43698 3.42404 1.31995 3.74153 
4.92093 3.83873 3.41756 2.46503 2.81494 0 ]xsh
NTCUZS+MyriadPro-Bold*1 [7.5 0 0 -7.5 0 0 ]msf
331.62 736.74 mo
(One Technology Way, P.O. Box 9106, Norwood, MA  02062-9106 U.S.A.)
[5.39697 4.37698 3.94199 1.49997 4.09204 3.94199 3.41705 4.37698 4.37698 4.30948 2.04446 4.30945 
4.36957 3.95694 1.49997 6.64203 3.94199 3.90445 1.97696 1.49997 4.33945 1.97696 5.35947 1.97696 
1.49997 4.51202 4.37698 3.87448 1.55997 4.14444 4.14444 4.14444 4.19693 1.93198 1.55997 5.21701 
4.31699 2.83203 5.67453 4.30948 4.30945 4.37695 1.97696 1.49997 6.32697 4.90204 1.49994 1.5 
4.14441 4.19696 4.14447 4.14447 4.1969 2.39709 4.14441 4.14447 4.19696 4.14441 1.5 5.09705 
1.97693 4.03198 1.97693 4.90204 0 ]xsh
331.62 745.26 mo
(Tel: 781.329.4700             "2013 Analog Devices, Inc. All rights reserved.)
[4.09427 3.94427 2.09918 1.91922 1.49997 4.19919 4.1467 4.1467 1.97922 4.1467 4.14667 4.19922 
1.9342 4.19919 4.1467 4.1467 4.1467 1.55997 1.49997 1.49997 1.49997 1.55997 1.49997 1.49997 
1.49997 1.49997 1.55997 1.49997 1.49997 1.49997 5.09927 4.14667 4.1467 4.19919 4.14673 1.49994 
4.9043 4.37924 3.94424 2.09921 4.31174 4.3718 1.49997 5.20422 3.94427 3.95923 2.03925 3.41931 
3.94421 3.23932 1.9342 1.49994 2.1593 4.37921 3.36679 1.97922 1.49997 4.90427 2.04672 2.09921 
1.49994 2.83429 2.0993 4.37177 4.37921 2.73682 3.23926 1.5 2.87927 3.95929 3.23926 3.94427 
2.83429 3.95923 3.94427 4.49915 0 ]xsh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 1 colr
NTCUZS+MyriadPro-Bold*1 [7.5 0 0 -7.5 0 0 ]msf
331.62 753.72 mo
(Technical Support)
[4.09879 3.94873 3.41629 4.38373 4.38376 2.04376 3.41629 3.94873 2.05121 1.49997 4.0762 4.31619 
4.47379 4.47382 4.31622 2.83878 0 ]xsh
507.465 753.72 mo
(www.analog.com)
[5.68124 5.68127 5.68127 1.9762 3.8963 4.43622 3.94873 2.05121 4.31622 4.37628 1.93872 3.41632 
4.31616 0 ]xsh
0 gry
/NTCUZS+MyriadPro-Bold*1 
[32{/.notdef}rp /space /.notdef /copyright 9{/.notdef}rp /comma /hyphen /period 
/.notdef /zero /one /two /three /four /five /six 
/seven /eight /nine /colon 6{/.notdef}rp /A /B /C 
/D /E /F /.notdef /H /I 2{/.notdef}rp /L 
/M /N /O /P /.notdef /R /S /T 
/U /.notdef /W 9{/.notdef}rp /a /b /c /d 
/e /f /g /h /i /j /k /l 
/m /n /o /p /.notdef /r /s /t 
/u /v /w /x /y /z 133{/.notdef}rp]
NTCUZS+MyriadPro-Bold nf
NTCUZS+MyriadPro-Bold*1 [9.96 0 0 -9.96 0 0 ]msf
54 155.16 mo
(FEATURES)
[4.97993 5.33852 6.48402 5.45811 6.84259 5.81667 5.33852 0 ]xsh
NTCUZS+MyriadPro-Bold*1 [9 0 0 -9 0 0 ]msf
54 170.52 mo
(Dual-core symmetric high-performance Blackfin processor, )
[6.25949 5.24243 4.7475 2.51545 2.89355 4.05453 5.18846 3.41555 4.7475 1.79996 3.90155 4.70245 
7.6815 7.7355 4.7475 3.29855 3.41553 2.46153 4.05453 1.79997 5.26949 2.46152 5.26056 5.26949 
2.89357 5.37756 4.7475 3.41554 3.06454 5.18846 3.41554 7.6815 4.74751 5.26949 4.05453 4.7475 
1.79996 5.43153 2.47046 4.7475 4.05453 4.91856 3.05554 2.46152 5.26949 1.79996 5.37756 3.41556 
5.18848 4.0545 4.7475 3.90158 3.90155 5.18845 3.41556 2.33548 0 ]xsh
63 181.5 mo
(up to 500 MHz per core )
[5.23433 5.36947 1.79726 3.29044 5.18037 1.86026 4.98234 4.98233 4.98233 1.79727 7.60133 6.18835 
4.20835 1.86027 5.36946 4.73941 3.40744 1.86026 4.04643 5.18037 3.40744 4.7394 0 ]xsh
63 193.497 mo
(Each core contains two 16-bit MACs, two 40-bit ALUs, and a )
[4.80417 4.7502 4.05724 5.27219 1.55966 4.05724 5.19116 3.41824 4.7502 1.49667 4.05724 5.19116 
5.27219 3.30124 4.75021 2.46422 5.27219 3.90425 1.55966 3.30124 6.77522 5.19116 1.49667 4.99312 
4.99313 2.89626 5.33527 2.4642 3.30124 1.55966 7.61215 5.90224 5.35321 3.90425 2.33815 1.55966 
3.30124 6.77522 5.19115 1.49667 4.99313 4.99312 2.89626 5.33528 2.4642 3.30124 1.55966 5.90225 
4.5972 6.13629 3.90424 2.33813 1.55969 4.75018 5.21817 5.36215 1.49664 4.75021 0 ]xsh
72 204.477 mo
(40-bit barrel shifter)
[4.98953 4.98953 2.89266 5.37666 2.46062 3.29764 1.79996 5.37666 4.7466 3.41464 3.41465 4.7466 
2.46954 1.79996 3.90066 5.26859 2.46062 3.06363 3.29764 4.7466 0 ]xsh
63 216.474 mo
(RISC-like register and instruction model for ease of )
[5.32892 2.55694 4.85184 5.34692 2.94395 2.45784 2.45792 4.86997 4.7439 1.79996 3.41194 4.7439 
5.25697 2.45792 3.89796 3.29494 4.7439 3.41196 1.79996 4.7439 5.26588 5.35583 1.86296 2.45792 
5.26588 3.89795 3.29494 3.35794 5.28384 4.05093 3.29492 2.45792 5.18488 5.26588 1.79996 7.7319 
5.18486 5.35583 4.7439 2.52084 1.79996 3.06093 5.18486 3.41194 1.86296 4.7439 4.7439 3.89795 
4.7439 1.79996 5.18488 3.06091 0 ]xsh
NTCUZP+SymbolMT [9 0 0 -9 0 0 ]msf
267.053 216.474 mo
(\000\003)sh
NTCUZP+SymbolMT [9 0 0 -9 0 0 ]msf
267.053 216.474 mo
(\000\003) false chp
.18 lw
0 lc
0 lj
1 ml
[] 0 dsh
false sadj
@
/NTCUZS+MyriadPro-Bold*1 
[32{/.notdef}rp /space /.notdef /copyright 9{/.notdef}rp /comma /hyphen /period 
/slash /zero /one /two /three /four /five /six 
/seven /eight /nine /colon 6{/.notdef}rp /A /B /C 
/D /E /F /.notdef /H /I 2{/.notdef}rp /L 
/M /N /O /P /.notdef /R /S /T 
/U /V /W 9{/.notdef}rp /a /b /c /d 
/e /f /g /h /i /j /k /l 
/m /n /o /p /.notdef /r /s /t 
/u /v /w /x /y /z 133{/.notdef}rp]
NTCUZS+MyriadPro-Bold nf
NTCUZS+MyriadPro-Bold*1 [9 0 0 -9 0 0 ]msf
72 227.517 mo
(programming and comp)
[5.37486 3.41284 5.18577 5.25786 3.41284 4.7448 7.73281 7.7328 2.45882 5.26678 5.25786 1.86026 
4.7448 5.2668 5.35672 1.79727 4.05183 5.18576 7.7328 0 ]xsh
169.2 227.517 mo
(iler-friendly support)
[2.46242 2.47134 4.7484 3.41644 2.89445 3.06543 3.41644 2.46242 4.7484 5.27039 5.36035 2.47134 
4.70335 1.79996 3.90245 5.24333 5.37846 5.37846 5.18938 3.41644 0 ]xsh
63 239.514 mo
(Advanced debug, trace, an)
[5.89415 5.35403 4.76009 4.7421 5.26408 4.04914 4.7421 5.39903 1.79997 5.35403 4.7421 5.37216 
5.23703 5.25516 2.33006 1.79996 3.29314 3.41016 4.7421 4.04915 4.7961 2.27605 1.86296 4.74211 
0 ]xsh
169.56 239.514 mo
(d performance monitoring)
[5.35403 1.79907 5.37216 4.7421 3.41014 3.05913 5.18307 3.41013 7.73012 4.7421 5.26408 4.04913 
4.79611 1.79906 7.7301 5.18306 5.2641 2.45612 3.29315 5.18304 3.41016 2.45612 5.2641 0 
]xsh
54 251.511 mo
(Pipelined Vision Processor prov)
[5.21184 2.44892 5.36496 4.7979 2.45784 2.44892 5.25689 4.73489 5.34684 1.79996 5.70691 2.44892 
3.96095 2.45792 5.17586 5.25688 1.79997 5.21184 3.40294 5.17587 4.04193 4.73491 3.88895 3.88896 
5.22087 3.40294 1.86296 5.36497 3.40294 5.22087 0 ]xsh
180.297 251.511 mo
(ides hardware to process sig-)
[2.45161 5.34955 4.73759 3.89165 1.86026 5.22359 4.8006 3.40564 5.34955 6.81662 4.8006 3.36064 
4.80061 1.79726 3.28864 5.17857 1.86026 5.36768 3.40564 5.17856 4.04462 4.73761 3.89166 3.89163 
1.79727 3.89163 2.45163 5.25067 0 ]xsh
63 262.491 mo
(nal and image algorithms used for pre- and co-processing )
[5.26949 4.7475 2.47044 1.79996 4.7475 5.26949 5.35944 1.86296 2.46152 7.6815 4.7475 5.26056 
4.7475 1.79996 4.8015 2.46144 5.26056 5.18848 3.41554 2.46152 3.29854 5.2695 7.6815 3.90155 
1.86296 5.24243 3.90157 4.7475 5.35944 1.86296 3.06454 5.18846 3.41554 1.79997 5.37756 3.41554 
4.7475 2.89357 1.79996 4.7475 5.26949 5.35944 1.79996 4.05453 5.18848 2.89355 5.37756 3.41556 
5.18845 4.05453 4.7475 3.90158 3.90155 2.46152 5.21548 5.26056 0 ]xsh
63 273.471 mo
(of video frames in ADAS or other video processing )
[5.19027 3.06633 1.86296 4.76729 2.46332 5.36124 4.74931 5.19026 1.79996 3.06633 3.41734 4.7493 
7.7373 4.7493 3.90335 1.79997 2.46332 5.27129 1.79996 5.90135 6.26129 5.90135 4.85724 1.79996 
5.19026 3.41734 1.79996 5.19026 3.30034 5.27129 4.74928 3.41734 1.79997 4.76729 2.4633 5.36125 
4.7493 5.19028 1.79994 5.37938 3.36334 5.19026 4.05635 4.80328 3.90337 3.90335 2.46332 5.21729 
5.26236 0 ]xsh
63 284.514 mo
(applications)
[4.7457 5.37576 5.37576 2.46864 2.45972 4.05273 4.7457 3.29675 2.45972 5.18666 5.26768 0 
]xsh
54 296.511 mo
(Accepts a range of supply voltages for I/O operation. See )
[5.89775 4.05273 4.05273 4.7457 5.37577 3.29674 3.89975 1.79906 4.7457 1.79906 3.41375 4.7457 
5.26768 5.25876 4.7457 1.79907 5.18666 3.06273 1.79906 3.89975 5.24063 5.37578 5.37576 2.52263 
4.68266 1.79906 4.7637 5.18666 2.46864 3.29674 4.7457 5.25876 4.7457 3.89977 1.79906 3.06273 
5.18666 3.41374 1.79907 2.55873 2.97264 6.44666 1.79906 5.18668 5.37576 4.7457 3.41374 4.7457 
3.29674 2.45972 5.18668 5.26767 2.33365 1.86206 4.79965 4.79968 4.7457 0 ]xsh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 1 colr
NTCUZS+MyriadPro-Bold*1 [9 0 0 -9 0 0 ]msf
63 307.491 mo
(Operating Conditions on Page 52)
[6.44306 5.37216 4.7421 3.41014 4.7421 3.29314 2.45612 5.26408 5.25517 1.86027 5.34511 5.18306 
5.26408 5.35403 2.45613 3.29314 2.45612 5.18306 5.2191 3.95915 1.86026 5.18306 5.2641 1.79726 
5.21904 4.74211 5.25516 4.67909 1.79727 4.98503 0 ]xsh
0 gry
/NTCUZS+MyriadPro-Bold*1 
[32{/.notdef}rp /space /.notdef /copyright /multiply 4{/.notdef}rp /parenleft /parenright 
2{/.notdef}rp /comma /hyphen /period /slash /zero /one /two 
/three /four /five /six /seven /eight /nine /colon 
6{/.notdef}rp /A /B /C /D /E /F /G 
/H /I /.notdef /K /L /M /N /O 
/P /.notdef /R /S /T /U /V /W 
/.notdef /Y 7{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /j /k /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /w /x /y /z 133{/.notdef}rp]
NTCUZS+MyriadPro-Bold nf
NTCUZS+MyriadPro-Bold*1 [9 0 0 -9 0 0 ]msf
54 319.488 mo
(Off-chip voltage regulator interface)
[6.44576 3.06183 3.06183 2.93586 4.05183 5.26678 2.45882 5.37487 1.79996 4.76279 5.18576 2.46774 
3.29585 4.7448 5.25786 4.7448 1.79996 3.41284 4.7448 5.25787 5.23973 2.46774 4.7448 3.29584 
5.18576 3.35884 1.86296 2.45882 5.2668 3.29584 4.7448 3.41284 3.06183 4.7448 4.05183 0 
]xsh
54 331.485 mo
(349-ball BGA package \(19 mm # 19 mm\), RoHS compliant)
[4.98413 4.98413 4.98414 2.88725 5.37127 4.7412 2.46414 2.46415 1.86296 5.42524 6.12726 5.93825 
1.79996 5.37126 4.7952 4.04823 4.86726 4.7412 5.25427 4.7412 1.79997 2.81516 5.03813 4.98413 
1.79997 7.7292 7.72922 1.79996 5.35313 1.79997 5.03813 4.97513 1.79997 7.7292 7.7292 2.81517 
2.32915 1.79996 5.32622 5.18216 6.19017 4.84914 1.79996 4.04825 5.18216 7.72919 5.37128 2.46414 
2.45523 4.74121 5.26318 0 ]xsh
NTCUZS+MyriadPro-Bold*1 [9.96 0 0 -9.96 0 0 ]msf
333 155.16 mo
(MEMORY)
[8.46295 5.35544 8.46295 7.17813 6.12244 0 ]xsh
NTCUZS+MyriadPro-Bold*1 [9 0 0 -9 0 0 ]msf
333 170.52 mo
(Each core contains 148K bytes of L1 SRAM memory \(proces-)
[4.79697 4.74301 4.05002 5.26498 1.86298 4.05005 5.18396 3.41104 4.74298 1.79996 4.05005 5.18396 
5.26498 3.29404 4.74301 2.45703 5.26498 3.89703 1.79999 4.9859 4.98596 4.9859 5.517 1.86295 
5.37308 4.69797 3.29401 4.74301 3.96005 1.79996 5.18396 3.06003 1.86298 4.59 4.98593 1.79996 
4.85092 5.32806 5.89502 7.60498 1.79993 7.73102 4.74298 7.73102 5.18402 3.41101 4.698 1.79993 
2.81696 5.37305 3.41107 5.18396 4.05005 4.74298 3.89709 0 ]xsh
342 181.5 mo
(sor core-accessible\) with multi-parity bit protection )
[3.89975 5.18668 3.41373 1.86298 4.05273 5.18665 3.41376 4.7457 2.89175 4.7457 4.05273 4.05273 
4.7457 3.89975 3.89978 2.45972 5.37573 2.46866 4.7457 2.81967 1.79996 6.82471 2.45972 3.29675 
5.2677 1.79996 7.7337 5.24063 2.46866 3.29672 2.52274 2.88275 5.37576 4.7457 3.41373 2.45972 
3.29675 4.70065 1.79996 5.37576 2.45972 3.29672 1.79999 5.37573 3.41376 5.18671 3.29669 4.74573 
4.05273 3.29669 2.45972 5.18671 5.26764 0 ]xsh
333 193.497 mo
(Up to 256K bytes of L2 SRAM memory with ECC protection)
[6.12817 5.37216 1.79996 3.29312 5.18307 1.86298 4.98502 4.98505 4.98502 5.51611 1.79996 5.37216 
4.69705 3.29312 4.74213 3.89612 1.86298 5.18307 3.05911 1.79999 4.58911 4.98505 1.79996 4.85004 
5.32712 5.89417 7.60403 1.79996 7.7301 4.74213 7.7301 5.18307 3.41013 4.74207 1.79996 6.82114 
2.45612 3.29312 5.26407 1.86298 4.79605 5.34512 5.34509 1.79993 5.37219 3.41016 5.18304 3.29315 
4.74207 4.04913 3.29315 2.45612 5.18304 0 ]xsh
333 205.494 mo
(Dynamic memory controller prov)
[6.26221 4.70514 5.2182 4.74118 7.73822 2.4642 4.05725 1.79996 7.73819 4.75021 7.73822 5.19116 
3.41824 4.70514 1.79999 4.05722 5.19116 5.27219 3.30124 3.41824 5.19116 2.47314 2.47314 4.75018 
3.41824 1.86295 5.38028 3.41824 5.19116 0 ]xsh
465.417 205.494 mo
(ides 16-bit interface to a )
[2.45883 5.35672 4.74481 3.89883 1.86298 4.98773 4.98773 2.89084 5.37488 2.4588 3.29584 1.79999 
2.4588 5.26678 3.29584 4.74481 3.41284 3.06183 4.74481 4.05182 4.74481 1.79999 3.29578 5.18579 
1.86298 4.74481 0 ]xsh
342 216.474 mo
(single bank of DDR2 or LPDDR DRAM devices)
[3.89075 2.45071 5.2587 5.24976 2.52264 4.73669 1.79999 5.36676 4.73669 5.25867 4.91678 1.79996 
5.17767 3.05374 1.86295 6.24872 6.24869 5.32172 4.97961 1.79996 5.22266 3.42276 1.79996 4.58374 
5.21362 6.24869 6.24869 5.32172 1.79996 6.24869 5.32172 5.94275 7.56265 1.86295 5.34863 4.73672 
4.75467 2.45074 4.04376 4.73669 0 ]xsh
333 228.471 mo
(Static memory controller with asynchronous memory inter-)
[4.85544 3.29855 4.7475 3.29852 2.46152 4.05453 1.79996 7.7355 4.7475 7.73553 5.18845 3.41556 
4.70245 1.79996 4.05453 5.18845 5.2695 3.29852 3.41556 5.18845 2.47046 2.47046 4.7475 3.41553 
1.79999 6.82651 2.46152 3.29855 5.2695 1.79996 4.7475 3.90155 4.70248 5.26947 4.05453 5.2695 
3.36151 5.21548 5.2695 5.18848 5.24243 3.90155 1.86295 7.7355 4.7475 7.68152 5.21545 3.41553 
4.70251 1.79993 2.46155 5.26947 3.29852 4.7475 3.41559 0 ]xsh
342 239.514 mo
(face that supports 8-bit and 16-bit memories )
[3.06454 4.7475 4.05453 4.7475 1.79996 3.29852 5.2695 4.7475 3.29852 1.79999 3.90155 5.24243 
5.37756 5.37756 5.18845 3.41556 3.29852 3.90155 1.79999 4.99042 2.89355 5.37756 2.46155 3.29852 
1.79996 4.80151 5.21548 5.35944 1.79996 4.99045 4.99042 2.89355 5.37756 2.46155 3.29852 1.79999 
7.73547 4.7475 7.73553 5.18848 3.41553 2.46152 4.74747 3.95557 0 ]xsh
333 251.511 mo
(4 Memory-to-memory DMA streams, 2 of which feature CRC )
[4.98773 1.79996 7.60675 4.74478 7.73282 5.18576 3.41284 4.69977 2.89084 3.29584 5.18576 2.93585 
7.6788 4.7988 7.67883 5.22174 3.41284 4.69977 1.79996 6.30179 7.56174 5.94186 1.79996 3.89883 
3.29584 3.41284 4.74481 4.74481 7.73279 3.89886 2.33273 1.79996 4.98773 1.79996 5.18576 3.06186 
1.79996 6.82382 5.26682 2.4588 4.05188 5.26672 1.79999 3.06183 4.74481 4.74481 3.29584 5.23975 
3.41284 4.74481 1.79999 5.34778 5.32983 5.34784 0 ]xsh
342 262.491 mo
(protection )
[5.38925 3.35526 5.20016 3.31024 4.75919 4.06625 3.31024 2.47321 5.15518 5.28119 0 ]xsh
333 274.488 mo
(Flexible booting options from flash, SD EMMC and SPI mem-)
[4.74115 2.47314 4.75018 4.66919 2.4642 5.38028 2.47314 4.75018 1.79996 5.38028 5.19116 5.19116 
3.30124 2.46423 5.21817 5.26328 1.79996 5.19116 5.38025 3.30127 2.4642 5.19116 5.21817 3.95825 
1.79999 3.0672 3.41827 5.19116 7.73819 1.79996 3.06723 2.47314 4.75021 3.90424 5.2182 2.33813 
1.86295 4.85812 6.26221 1.79996 4.80417 7.61212 7.61215 5.35318 1.79999 4.75018 5.27222 5.36212 
1.79993 4.85815 5.22711 2.56323 1.79999 7.73822 4.75018 7.73822 0 ]xsh
342 285.468 mo
(ories and from SPI, link port and UART hosts)
[5.18127 3.40833 2.45432 4.74033 3.89435 1.86295 4.7403 5.2623 5.35223 1.79996 3.05734 3.40836 
5.18124 7.7283 1.86298 4.84824 5.21725 2.55331 2.32825 1.79999 2.51724 2.46332 5.2623 4.86633 
1.79999 5.37036 5.18127 3.40833 3.29135 1.79996 4.7403 5.2623 5.35223 1.86295 6.1264 5.89233 
5.32532 4.92032 1.79996 5.26227 5.18127 3.89435 3.29132 0 ]xsh
333 297.465 mo
(Memory management unit provides memory protection )
[7.60944 4.7475 7.7355 5.18848 3.41553 4.70245 1.86298 7.68149 4.73853 5.26947 4.7475 5.26056 
4.7475 7.7355 4.7475 5.2695 3.29852 1.79999 5.24243 5.26947 2.46155 3.29852 1.79996 5.37759 
3.41553 5.18848 4.76547 2.46152 5.35944 4.7475 3.90158 1.79996 7.7355 4.7475 7.7355 5.18848 
3.41553 4.70245 1.79999 5.37756 3.41553 5.18848 3.29852 4.7475 4.05457 3.29852 2.46155 5.18848 
5.26947 0 ]xsh
/NTCUZT+MyriadPro-It*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period 2{/.notdef}rp /one 16{/.notdef}rp /B 
/.notdef /D /.notdef /F 9{/.notdef}rp /P 16{/.notdef}rp /a 
/.notdef /c /.notdef /e /.notdef /g /.notdef /i 
/.notdef /k /l /m /.notdef /o 2{/.notdef}rp /r 
/s /.notdef /u 138{/.notdef}rp]
NTCUZT+MyriadPro-It nf
NTCUZT+MyriadPro-It*1 [7.98 0 0 -7.98 0 0 ]msf
260.4 673.86 mo
(Figure 1. Processor Block Diagram)
[3.6955 1.86017 4.1983 4.1983 2.5224 3.59982 1.49631 3.91101 1.66861 4.01801 4.0307 2.57831 
4.15042 3.41626 3.59979 3.00131 3.00128 4.14243 2.57828 1.44046 4.12643 1.81229 4.1983 3.36041 
3.65558 1.44046 5.21973 1.79633 4.1983 4.1983 2.52243 4.1983 0 ]xsh
gsave
54.96 338.52 mo
576 338.52 li
576 661.5 li
54.96 661.5 li
cp
eclp
132.6 661.53 mo
500.52 661.53 li
500.52 342.42 li
132.6 342.42 li
cp
1 gry
f
grestore
gsave
54.96 338.52 mo
576 338.52 li
576 661.5 li
54.96 661.5 li
cp
eclp
477.679 651.541 mo
477.679 656.511 473.415 660.541 468.155 660.541 cv
412.2 660.541 li
406.941 660.541 402.676 656.511 402.676 651.541 cv
402.676 370.842 li
402.676 365.871 406.941 361.842 412.2 361.842 cv
468.155 361.842 li
473.415 361.842 477.679 365.871 477.679 370.842 cv
477.679 651.541 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.808 .808 .804 colr
f
.75 lw
4 ml
true sadj
477.679 651.541 mo
477.679 656.511 473.414 660.541 468.154 660.541 cv
412.199 660.541 li
406.939 660.541 402.676 656.511 402.676 651.541 cv
402.676 370.842 li
402.676 365.871 406.939 361.842 412.199 361.842 cv
468.154 361.842 li
473.414 361.842 477.679 365.871 477.679 370.842 cv
477.679 651.541 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
387.441 382.008 mo
387.441 388.32 383.503 393.437 378.646 393.437 cv
143.944 393.437 li
139.087 393.437 135.149 388.32 135.149 382.008 cv
135.149 367.365 li
135.149 361.053 139.087 355.935 143.944 355.935 cv
378.646 355.935 li
383.503 355.935 387.441 361.053 387.441 367.365 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.808 .808 .804 colr
f
387.441 382.008 mo
387.441 388.32 383.503 393.437 378.646 393.437 cv
143.944 393.437 li
139.087 393.437 135.149 388.32 135.149 382.008 cv
135.149 367.365 li
135.149 361.053 139.087 355.935 143.944 355.935 cv
378.646 355.935 li
383.503 355.935 387.441 361.053 387.441 367.365 cv
387.441 382.008 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
384.066 646.971 mo
384.066 652.136 380.035 656.322 375.065 656.322 cv
257.216 656.322 li
252.246 656.322 248.217 652.136 248.217 646.971 cv
248.217 598.171 li
248.217 593.006 252.246 588.82 257.216 588.82 cv
375.065 588.82 li
380.035 588.82 384.066 593.006 384.066 598.171 cv
384.066 646.971 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.808 .808 .804 colr
f
384.066 646.971 mo
384.066 652.136 380.036 656.322 375.066 656.322 cv
257.217 656.322 li
252.247 656.322 248.217 652.136 248.217 646.971 cv
248.217 598.171 li
248.217 593.006 252.247 588.82 257.217 588.82 cv
375.066 588.82 li
380.036 588.82 384.066 593.006 384.066 598.171 cv
384.066 646.971 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
243.154 629.804 mo
243.154 635.13 239.124 639.447 234.154 639.447 cv
150.056 639.447 li
145.086 639.447 141.056 635.13 141.056 629.804 cv
141.056 598.464 li
141.056 593.138 145.086 588.82 150.056 588.82 cv
234.154 588.82 li
239.124 588.82 243.154 593.138 243.154 598.464 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.808 .808 .804 colr
f
243.154 629.804 mo
243.154 635.13 239.124 639.447 234.154 639.447 cv
150.056 639.447 li
145.086 639.447 141.056 635.13 141.056 629.804 cv
141.056 598.464 li
141.056 593.138 145.086 588.82 150.056 588.82 cv
234.154 588.82 li
239.124 588.82 243.154 593.138 243.154 598.464 cv
243.154 629.804 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
378.159 504.998 mo
378.159 510.283 374.458 514.567 369.891 514.567 cv
319.768 514.567 li
315.201 514.567 311.5 510.283 311.5 504.998 cv
311.5 438.914 li
311.5 433.629 315.201 429.345 319.768 429.345 cv
369.891 429.345 li
374.458 429.345 378.159 433.629 378.159 438.914 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.808 .808 .804 colr
f
378.159 504.998 mo
378.159 510.283 374.458 514.567 369.891 514.567 cv
319.768 514.567 li
315.201 514.567 311.5 510.283 311.5 504.998 cv
311.5 438.914 li
311.5 433.629 315.201 429.345 319.768 429.345 cv
369.891 429.345 li
374.458 429.345 378.159 433.629 378.159 438.914 cv
378.159 504.998 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
294.625 505.754 mo
294.625 510.621 290.724 514.567 285.913 514.567 cv
150.611 514.567 li
145.8 514.567 141.9 510.621 141.9 505.754 cv
141.9 444.064 li
141.9 439.197 145.8 435.251 150.611 435.251 cv
285.913 435.251 li
290.724 435.251 294.625 439.197 294.625 444.064 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.808 .808 .804 colr
f
294.625 505.754 mo
294.625 510.621 290.724 514.567 285.913 514.567 cv
150.611 514.567 li
145.8 514.567 141.9 510.621 141.9 505.754 cv
141.9 444.064 li
141.9 439.197 145.8 435.251 150.611 435.251 cv
285.913 435.251 li
290.724 435.251 294.625 439.197 294.625 444.064 cv
294.625 505.754 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
409.379 392.218 mo
470.132 392.218 li
470.132 375.342 li
409.379 375.342 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
470.132 392.218 mo
409.379 392.218 li
409.379 375.342 li
470.132 375.342 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
409.379 412.469 mo
449.881 412.469 li
449.881 395.593 li
409.379 395.593 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
449.881 412.469 mo
409.379 412.469 li
409.379 395.593 li
449.881 395.593 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
454.1 635.228 mo
470.976 635.228 li
470.976 395.593 li
454.1 395.593 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
470.975 635.228 mo
454.099 635.228 li
454.099 395.593 li
470.975 395.593 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
409.379 432.72 mo
449.881 432.72 li
449.881 415.844 li
409.379 415.844 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
449.881 432.72 mo
409.379 432.72 li
409.379 415.844 li
449.881 415.844 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
409.379 452.971 mo
449.881 452.971 li
449.881 436.095 li
409.379 436.095 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
449.881 452.971 mo
409.379 452.971 li
409.379 436.095 li
449.881 436.095 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
409.379 473.222 mo
449.881 473.222 li
449.881 456.346 li
409.379 456.346 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
449.881 473.222 mo
409.379 473.222 li
409.379 456.346 li
449.881 456.346 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
409.379 493.472 mo
449.881 493.472 li
449.881 476.596 li
409.379 476.596 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
449.881 493.472 mo
409.379 493.472 li
409.379 476.596 li
449.881 476.596 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
409.379 513.723 mo
449.881 513.723 li
449.881 496.847 li
409.379 496.847 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
449.881 513.723 mo
409.379 513.723 li
409.379 496.847 li
449.881 496.847 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
409.379 533.974 mo
449.881 533.974 li
449.881 517.098 li
409.379 517.098 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
449.881 533.974 mo
409.379 533.974 li
409.379 517.098 li
449.881 517.098 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
409.379 554.225 mo
449.881 554.225 li
449.881 537.349 li
409.379 537.349 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
449.881 554.225 mo
409.379 554.225 li
409.379 537.349 li
449.881 537.349 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
409.379 574.476 mo
449.881 574.476 li
449.881 557.6 li
409.379 557.6 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
449.881 574.476 mo
409.379 574.476 li
409.379 557.6 li
449.881 557.6 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
409.379 594.727 mo
449.881 594.727 li
449.881 577.851 li
409.379 577.851 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
449.881 594.727 mo
409.379 594.727 li
409.379 577.851 li
449.881 577.851 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
409.379 614.977 mo
449.881 614.977 li
449.881 598.101 li
409.379 598.101 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
449.881 614.977 mo
409.379 614.977 li
409.379 598.101 li
449.881 598.101 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
409.379 635.228 mo
449.881 635.228 li
449.881 618.352 li
409.379 618.352 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.678 .718 .796 colr
f
409.379 655.479 mo
470.975 655.479 li
470.975 638.603 li
409.379 638.603 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
470.975 655.479 mo
409.379 655.479 li
409.379 638.603 li
470.975 638.603 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
330.064 473.222 mo
360.44 473.222 li
360.44 442.846 li
330.064 442.846 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
360.44 473.222 mo
330.064 473.222 li
330.064 442.846 li
360.44 442.846 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
330.064 506.973 mo
360.44 506.973 li
360.44 476.597 li
330.064 476.597 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
360.44 506.973 mo
330.064 506.973 li
330.064 476.597 li
360.44 476.597 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
142.743 554.225 mo
379.003 554.225 li
379.003 537.349 li
142.743 537.349 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
142.743 537.349 mo
379.003 537.349 li
379.003 554.225 li
142.743 554.225 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
146.119 632.697 mo
186.621 632.697 li
186.621 594.727 li
146.119 594.727 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
186.62 632.697 mo
146.118 632.697 li
146.118 594.727 li
186.62 594.727 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
193.37 632.697 mo
233.872 632.697 li
233.872 594.727 li
193.37 594.727 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
233.872 632.697 mo
193.37 632.697 li
193.37 594.727 li
233.872 594.727 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
252.435 616.665 mo
292.937 616.665 li
292.937 597.914 li
252.435 597.914 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
292.937 616.665 mo
252.435 616.665 li
252.435 597.914 li
292.937 597.914 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
300.531 614.977 mo
374.784 614.977 li
374.784 594.726 li
300.531 594.726 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.678 .718 .796 colr
f
300.531 649.573 mo
374.784 649.573 li
374.784 629.322 li
300.531 629.322 li
cp
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
/NTCUZU+Helvetica-Bold*1 
[33{/.notdef}rp /S /Y /T /E /M /space /C 
/O /N /R /L /B /K /P /I 
/H /A /D /W /F /U /X /two 
/V /three /multiply /four /one /five /eight /slash 
/period /zero /G /six /hyphen 187{/.notdef}rp]
NTCUZU+Helvetica-Bold nf
NTCUZU+Helvetica-Bold*1 [6.0002 0 0 -6.0002 0 0 ]msf
297.156 362.686 mo
(!"!#$%&'\(\)#*\(+&,+\('-!)
[4.00217 4.0022 4.00217 3.66608 4.00217 4.99814 1.66806 4.33212 4.66818 4.33212 3.66608 4.21216 
4.66815 3.66608 1.66806 4.33212 3.66608 4.66815 4.33215 4.33215 0 ]xsh
416.974 369.436 mo
(.$*/.0$*1+!)
[4.00217 4.0022 4.33212 1.66806 4.0022 4.33212 4.0022 4.33212 4.33215 3.66608 0 ]xsh
254.326 631.009 mo
(01*231*$&)
[4.33214 4.33215 4.33215 4.09213 5.30417 4.33215 4.33215 4.00217 0 ]xsh
255.191 638.209 mo
(45\)'#/\(\)!)
[3.66608 4.33215 4.33212 4.33215 3.66608 1.66806 4.66815 4.33215 0 ]xsh
205.899 566.039 mo
($6#$*\)1+)
[4.00218 4.00217 3.66608 4.00218 4.33215 4.33214 4.33215 0 ]xsh
215.763 573.239 mo
(,5!)
[4.27214 4.33215 0 ]xsh
203.259 580.439 mo
(/\)#$*41'$!)
[1.66806 4.33214 3.66608 4.00218 4.33214 3.18607 4.09213 4.33215 4.00217 0 ]xsh
NTCUZU+Helvetica-Bold*1 [4.5002 0 0 -4.5002 0 0 ]msf
145.963 647.041 mo
(+.22*)
[2.74913 3.00122 3.2487 3.24869 0 ]xsh
147.588 652.441 mo
(22*7)
[3.24869 3.2487 3.24869 0 ]xsh
267.811 608.132 mo
('*')
[3.24869 3.24869 0 ]xsh
325.778 603.164 mo
(./.$+/\)$2)
[3.00122 1.25061 3.00122 3.00119 2.74915 1.25061 3.24869 3.00122 0 ]xsh
315.072 608.564 mo
(8/!/\(\)&.*\('$!!\(*)
[3.00122 1.25061 3.00122 1.25058 3.5007 3.24872 1.25104 3.00122 3.15869 3.5007 3.24869 3.00122 
3.00122 3.00122 3.5007 0 ]xsh
331.376 637.757 mo
(./6$+&)
[3.00122 1.25061 3.00122 3.00119 2.74915 0 ]xsh
323.217 643.158 mo
('\(%.\(!/#\(*)
[3.24869 3.5007 3.7482 3.00122 3.5007 3.00122 1.25058 2.56915 3.5007 0 ]xsh
245.872 547.105 mo
(2%1&!"!#$%)
[3.24869 3.74818 3.2487 1.25104 3.00122 3.00122 3.00122 2.74915 3.00122 0 ]xsh
422.816 628.109 mo
(9:&../)
[2.50165 2.62769 1.25104 3.00122 3.00122 0 ]xsh
414.36 607.858 mo
(;:&+/\)-&.\(*#)
[2.50211 2.62811 1.25107 2.74957 1.25107 3.24915 3.24915 1.25104 3.00168 3.50116 3.15915 0 
]xsh
419.908 562.055 mo
(7:&$%1')
[2.50165 2.62769 1.25104 3.00122 3.7482 3.06866 0 ]xsh
423.882 567.455 mo
(3/#0)
[4.2482 1.25104 2.7496 0 ]xsh
415.683 572.855 mo
(7:&/$$$&<=>>)
[2.50211 2.62811 1.25107 1.25104 3.00168 3.00168 3.00165 1.25107 2.50211 2.50211 2.50211 0 
]xsh
418.378 526.953 mo
($%%'?*!/)
[3.00122 3.74817 3.7482 3.24869 1.25061 3.24869 3.00122 0 ]xsh
418.729 466.201 mo
(9:&!.\(*#)
[2.50165 2.62769 1.25104 3.00122 3.00122 3.5007 3.15869 0 ]xsh
423.657 587.976 mo
(7:&!./)
[2.50165 2.62769 1.25104 3.00122 3.00122 0 ]xsh
420.349 506.973 mo
(7:&51*#)
[2.50211 2.62811 1.25107 3.02414 3.24915 3.15912 0 ]xsh
421.569 547.209 mo
(<:&'1\))
[2.50165 2.62769 1.25104 3.24872 3.24869 0 ]xsh
419.665 405.452 mo
(>:&#/%$*)
[2.50211 2.62811 .801483 2.7496 1.25104 3.74866 3.00165 0 ]xsh
420.943 445.855 mo
(7:&.3%)
[2.50165 2.62769 1.25104 3.00122 4.24774 0 ]xsh
415.318 425.604 mo
(<:&'\(5\)#$*)
[2.50165 2.62769 1.25104 3.24872 3.5007 3.24869 3.24869 2.74915 3.00122 0 ]xsh
432.666 385.202 mo
(7:&#3/)
[2.50165 2.62769 .801483 2.74915 4.24771 0 ]xsh
422.514 648.364 mo
(5!,&7@A&0!&\(#B)
[3.24869 3.00122 3.24869 1.25107 2.50165 1.25061 2.50168 1.25104 3.24869 3.00122 1.25107 3.3252 
2.74915 0 ]xsh
NTCUZU+Helvetica-Bold*1 [6.0002 0 0 -6.0002 0 0 ]msf
328.41 436.939 mo
(+7&%$%\(*")
[3.66608 3.33612 1.66803 4.99814 4.00217 4.99814 4.66815 4.03214 0 ]xsh
NTCUZU+Helvetica-Bold*1 [4.5002 0 0 -4.5002 0 0 ]msf
333.247 483.347 mo
(7=C-&,"#$)
[2.50211 2.50211 2.50211 3.24915 1.25107 3.24915 3.00168 2.74957 0 ]xsh
339.75 494.147 mo
($''D)
[3.00122 3.24869 3.24869 0 ]xsh
331.51 499.548 mo
(.*\(#$'#$2)
[3.00168 3.15912 3.32117 2.74957 3.00168 3.24915 2.74957 3.00168 0 ]xsh
338.625 504.948 mo
(!*1%)
[3.00122 3.24869 3.24869 0 ]xsh
334.498 457.192 mo
(97-&,"#$)
[2.50165 2.50168 3.24869 1.25107 3.24869 3.00122 2.74911 0 ]xsh
340.047 462.592 mo
(*\(%)
[3.15915 3.50116 0 ]xsh
458.785 511.433 mo
(<<7)
[2.50211 2.50211 0 ]xsh
459.284 516.833 mo
(B.)
[3.50116 0 ]xsh
459.536 522.233 mo
(/?\()
[1.25107 1.25104 0 ]xsh
192.621 648.734 mo
(4+1!0)
[2.74913 2.74915 3.24869 3.00122 0 ]xsh
193.498 654.134 mo
(!*1%)
[3.00122 3.24869 3.2487 0 ]xsh
139.368 385.468 mo
179.87 385.468 li
179.87 368.592 li
139.368 368.592 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
179.87 385.468 mo
139.368 385.468 li
139.368 368.592 li
179.87 368.592 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
/NTCUZU+Helvetica-Bold*1 
[33{/.notdef}rp /S /Y /T /E /M /space /C 
/O /N /R /L /B /K /P /I 
/H /A /D /W /F /U /X /two 
/V /three /multiply /four /one /five /eight /slash 
/period /zero /G /six /hyphen /ampersand 186{/.notdef}rp]
NTCUZU+Helvetica-Bold nf
NTCUZU+Helvetica-Bold*1 [4.5002 0 0 -4.5002 0 0 ]msf
147.165 375.651 mo
($%5+1#\(*)
[3.00122 3.74818 3.24869 2.74915 2.84367 2.56912 3.5007 0 ]xsh
139.915 381.051 mo
(#$!#&E&'\(\)#*\(+)
[2.74915 3.00121 3.00122 2.74913 1.25107 3.24869 1.25105 3.2487 3.5007 3.24869 2.74915 3.16318 
3.50072 0 ]xsh
189.995 385.468 mo
230.497 385.468 li
230.497 368.592 li
189.995 368.592 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
230.497 385.468 mo
189.995 385.468 li
189.995 368.592 li
230.497 368.592 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
NTCUZU+Helvetica-Bold*1 [4.5002 0 0 -4.5002 0 0 ]msf
194.73 375.651 mo
(.++&E&.\(3$*)
[3.00122 2.74913 2.74915 1.25105 3.24869 1.25105 3.00122 3.2757 4.24774 3.00122 0 ]xsh
193.983 381.051 mo
(%1\)1B$%$\)#)
[3.74818 3.24869 3.2487 3.02368 3.5007 3.00122 3.74818 3.00122 3.24869 0 ]xsh
240.622 385.468 mo
281.124 385.468 li
281.124 368.592 li
240.622 368.592 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
281.124 385.468 mo
240.622 385.468 li
240.622 368.592 li
281.124 368.592 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
NTCUZU+Helvetica-Bold*1 [4.5002 0 0 -4.5002 0 0 ]msf
253.992 375.651 mo
(415+#)
[2.38956 3.02414 3.24915 2.34457 0 ]xsh
244.609 381.051 mo
(%1\)1B$%$\)#)
[3.74818 3.24869 3.2487 3.0237 3.5007 3.00122 3.74817 3.00122 3.24869 0 ]xsh
291.249 385.468 mo
331.751 385.468 li
331.751 368.592 li
291.249 368.592 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
331.751 385.468 mo
291.249 385.468 li
291.249 368.592 li
331.751 368.592 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
NTCUZU+Helvetica-Bold*1 [4.5002 0 0 -4.5002 0 0 ]msf
303.998 375.651 mo
($8$\)#)
[3.00122 3.00122 3.00122 3.24869 0 ]xsh
300.421 381.051 mo
('\(\)#*\(+)
[3.24869 3.5007 3.24872 2.74911 3.15869 3.5007 0 ]xsh
341.876 385.468 mo
382.378 385.468 li
382.378 368.592 li
341.876 368.592 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
382.378 385.468 mo
341.876 385.468 li
341.876 368.592 li
382.378 368.592 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
NTCUZU+Helvetica-Bold*1 [4.5002 0 0 -4.5002 0 0 ]msf
355.991 375.651 mo
(251+)
[3.24915 3.02414 3.24915 0 ]xsh
348.966 381.051 mo
(31#'02\(B)
[3.97818 2.84412 2.7496 3.24915 3.24915 3.24915 3.50116 0 ]xsh
228.809 507.817 mo
284.499 507.817 li
284.499 443.689 li
228.809 443.689 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
284.499 507.817 mo
228.809 507.817 li
228.809 443.689 li
284.499 443.689 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
NTCUZU+Helvetica-Bold*1 [6.0002 0 0 -6.0002 0 0 ]msf
245.696 449.596 mo
('\(*$&<)
[4.33214 4.66817 4.33214 4.00217 1.66806 0 ]xsh
NTCUZU+Helvetica-Bold*1 [4.5002 0 0 -4.5002 0 0 ]msf
244.861 486.722 mo
(<;>-&,"#$)
[2.50211 2.50212 2.50211 3.24915 1.25104 3.24915 3.00168 2.7496 0 ]xsh
230.222 492.122 mo
(.1*/#"&,/#&.*\(#$'#$2)
[2.55165 3.24915 3.24915 1.25105 2.74959 3.00166 1.25105 3.24915 1.25105 2.74959 1.25105 3.00168 
3.15915 3.32114 2.74957 3.00168 3.24915 2.7496 3.00165 0 ]xsh
246.989 497.523 mo
(+<&!*1%)
[2.74913 2.50166 1.25105 3.00122 3.24869 3.24872 0 ]xsh
235.158 502.923 mo
(/\)!#*5'#/\(\)?21#1)
[1.25061 3.24869 3.00122 2.74913 3.15869 3.2487 3.24869 2.74913 1.25061 3.5007 3.24869 1.25061 
3.0687 2.84366 2.34412 0 ]xsh
/NTCUZV+MISCLogos*1 
[33{/.notdef}rp /B 222{/.notdef}rp]
NTCUZV+MISCLogos nf
NTCUZV+MISCLogos*1 [18.0007 0 0 -18.0007 0 0 ]msf
238.936 468.159 mo
(!)sh
grestore
gsave
132.618 342.435 mo
500.508 342.435 li
500.508 671.511 li
132.618 671.511 li
132.618 342.435 li
clp
gsave
132.6 342.42 mo
500.52 342.42 li
500.52 671.52 li
132.6 671.52 li
cp
eclp
201.808 368.592 mo
201.808 350.029 li
200.12 350.029 li
203.496 345.81 li
206.871 350.029 li
205.183 350.029 li
205.183 368.592 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
.75 lw
4 ml
true sadj
201.808 368.592 mo
201.808 350.029 li
200.12 350.029 li
203.496 345.81 li
206.871 350.029 li
205.183 350.029 li
205.183 368.592 li
201.808 368.592 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
174.807 431.032 mo
173.119 431.032 li
176.495 435.251 li
179.87 431.032 li
178.182 431.032 li
178.182 417.531 li
179.87 417.531 li
176.495 413.313 li
173.119 417.531 li
174.807 417.531 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
174.807 431.032 mo
173.119 431.032 li
176.495 435.251 li
179.87 431.032 li
178.182 431.032 li
178.182 417.531 li
179.87 417.531 li
176.495 413.313 li
173.119 417.531 li
174.807 417.531 li
174.807 431.032 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
392.504 655.479 mo
395.879 655.479 li
395.879 375.343 li
392.504 375.343 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
392.504 655.479 mo
395.879 655.479 li
395.879 375.343 li
392.504 375.343 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
405.16 405.719 mo
405.16 407.407 li
409.379 404.031 li
405.16 400.656 li
405.16 402.344 li
400.097 402.344 li
400.097 400.656 li
395.878 404.031 li
400.097 407.407 li
400.097 405.719 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
405.16 405.719 mo
405.16 407.407 li
409.379 404.031 li
405.16 400.656 li
405.16 402.344 li
400.097 402.344 li
400.097 400.656 li
395.878 404.031 li
400.097 407.407 li
400.097 405.719 li
405.16 405.719 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
405.16 426.813 mo
405.16 428.501 li
409.379 425.125 li
405.16 421.75 li
405.16 423.438 li
400.097 423.438 li
400.097 421.75 li
395.878 425.125 li
400.097 428.501 li
400.097 426.813 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
405.16 426.813 mo
405.16 428.501 li
409.379 425.125 li
405.16 421.75 li
405.16 423.438 li
400.097 423.438 li
400.097 421.75 li
395.878 425.125 li
400.097 428.501 li
400.097 426.813 li
405.16 426.813 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
405.16 447.064 mo
405.16 448.752 li
409.379 445.376 li
405.16 442.001 li
405.16 443.689 li
400.097 443.689 li
400.097 442.001 li
395.878 445.376 li
400.097 448.752 li
400.097 447.064 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
405.16 447.064 mo
405.16 448.752 li
409.379 445.376 li
405.16 442.001 li
405.16 443.689 li
400.097 443.689 li
400.097 442.001 li
395.878 445.376 li
400.097 448.752 li
400.097 447.064 li
405.16 447.064 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
405.16 467.315 mo
405.16 469.003 li
409.379 465.627 li
405.16 462.252 li
405.16 463.94 li
400.097 463.94 li
400.097 462.252 li
395.878 465.627 li
400.097 469.003 li
400.097 467.315 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
405.16 467.315 mo
405.16 469.003 li
409.379 465.627 li
405.16 462.252 li
405.16 463.94 li
400.097 463.94 li
400.097 462.252 li
395.878 465.627 li
400.097 469.003 li
400.097 467.315 li
405.16 467.315 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
405.16 487.566 mo
405.16 489.254 li
409.379 485.878 li
405.16 482.503 li
405.16 484.191 li
400.097 484.191 li
400.097 482.503 li
395.878 485.878 li
400.097 489.254 li
400.097 487.566 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
405.16 487.566 mo
405.16 489.254 li
409.379 485.878 li
405.16 482.503 li
405.16 484.191 li
400.097 484.191 li
400.097 482.503 li
395.878 485.878 li
400.097 489.254 li
400.097 487.566 li
405.16 487.566 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
405.16 507.817 mo
405.16 509.505 li
409.379 506.129 li
405.16 502.754 li
405.16 504.442 li
400.097 504.442 li
400.097 502.754 li
395.878 506.129 li
400.097 509.505 li
400.097 507.817 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
405.16 507.817 mo
405.16 509.505 li
409.379 506.129 li
405.16 502.754 li
405.16 504.442 li
400.097 504.442 li
400.097 502.754 li
395.878 506.129 li
400.097 509.505 li
400.097 507.817 li
405.16 507.817 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
405.16 528.068 mo
405.16 529.756 li
409.379 526.38 li
405.16 523.005 li
405.16 524.693 li
400.097 524.693 li
400.097 523.005 li
395.878 526.38 li
400.097 529.756 li
400.097 528.068 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
405.16 528.068 mo
405.16 529.756 li
409.379 526.38 li
405.16 523.005 li
405.16 524.693 li
400.097 524.693 li
400.097 523.005 li
395.878 526.38 li
400.097 529.756 li
400.097 528.068 li
405.16 528.068 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
405.16 548.318 mo
405.16 550.006 li
409.379 546.63 li
405.16 543.255 li
405.16 544.943 li
400.097 544.943 li
400.097 543.255 li
395.878 546.63 li
400.097 550.006 li
400.097 548.318 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
405.16 548.318 mo
405.16 550.006 li
409.379 546.63 li
405.16 543.255 li
405.16 544.943 li
400.097 544.943 li
400.097 543.255 li
395.878 546.63 li
400.097 550.006 li
400.097 548.318 li
405.16 548.318 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
405.16 568.569 mo
405.16 570.257 li
409.379 566.881 li
405.16 563.506 li
405.16 565.194 li
400.097 565.194 li
400.097 563.506 li
395.878 566.881 li
400.097 570.257 li
400.097 568.569 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
405.16 568.569 mo
405.16 570.257 li
409.379 566.881 li
405.16 563.506 li
405.16 565.194 li
400.097 565.194 li
400.097 563.506 li
395.878 566.881 li
400.097 570.257 li
400.097 568.569 li
405.16 568.569 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
405.16 588.82 mo
405.16 590.508 li
409.379 587.132 li
405.16 583.757 li
405.16 585.445 li
400.097 585.445 li
400.097 583.757 li
395.878 587.132 li
400.097 590.508 li
400.097 588.82 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
405.16 588.82 mo
405.16 590.508 li
409.379 587.132 li
405.16 583.757 li
405.16 585.445 li
400.097 585.445 li
400.097 583.757 li
395.878 587.132 li
400.097 590.508 li
400.097 588.82 li
405.16 588.82 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
405.16 609.071 mo
405.16 610.759 li
409.379 607.383 li
405.16 604.008 li
405.16 605.696 li
400.097 605.696 li
400.097 604.008 li
395.878 607.383 li
400.097 610.759 li
400.097 609.071 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
405.16 609.071 mo
405.16 610.759 li
409.379 607.383 li
405.16 604.008 li
405.16 605.696 li
400.097 605.696 li
400.097 604.008 li
395.878 607.383 li
400.097 610.759 li
400.097 609.071 li
405.16 609.071 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
405.16 633.541 mo
405.16 635.229 li
409.379 631.853 li
405.16 628.478 li
405.16 630.166 li
400.097 630.166 li
400.097 628.478 li
395.878 631.853 li
400.097 635.229 li
400.097 633.541 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
405.16 633.541 mo
405.16 635.229 li
409.379 631.853 li
405.16 628.478 li
405.16 630.166 li
400.097 630.166 li
400.097 628.478 li
395.878 631.853 li
400.097 635.229 li
400.097 633.541 li
405.16 633.541 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
405.16 649.573 mo
405.16 651.261 li
409.379 647.885 li
405.16 644.51 li
405.16 646.198 li
400.097 646.198 li
400.097 644.51 li
395.878 647.885 li
400.097 651.261 li
400.097 649.573 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
405.16 649.573 mo
405.16 651.261 li
409.379 647.885 li
405.16 644.51 li
405.16 646.198 li
400.097 646.198 li
400.097 644.51 li
395.878 647.885 li
400.097 651.261 li
400.097 649.573 li
405.16 649.573 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
389.128 636.916 mo
389.128 623.415 li
405.16 623.415 li
405.16 625.103 li
409.379 621.728 li
405.16 618.353 li
405.16 620.04 li
389.128 620.04 li
389.128 606.54 li
379.846 606.54 li
379.846 604.852 li
375.627 608.227 li
379.846 611.602 li
379.846 609.915 li
385.753 609.915 li
385.753 633.541 li
379.846 633.541 li
379.846 631.853 li
375.627 635.228 li
379.846 638.604 li
379.846 636.916 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.561 .647 .8 colr
f
389.128 636.916 mo
389.128 623.415 li
405.16 623.415 li
405.16 625.103 li
409.379 621.728 li
405.16 618.353 li
405.16 620.04 li
389.128 620.04 li
389.128 606.54 li
379.846 606.54 li
379.846 604.852 li
375.627 608.227 li
379.846 611.602 li
379.846 609.915 li
385.753 609.915 li
385.753 633.541 li
379.846 633.541 li
379.846 631.853 li
375.627 635.228 li
379.846 638.604 li
379.846 636.916 li
389.128 636.916 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
388.285 547.475 mo
388.285 549.163 li
392.504 545.787 li
388.285 542.412 li
388.285 544.1 li
383.222 544.1 li
383.222 542.412 li
379.003 545.787 li
383.222 549.163 li
383.222 547.475 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
388.285 547.475 mo
388.285 549.163 li
392.504 545.787 li
388.285 542.412 li
388.285 544.1 li
383.222 544.1 li
383.222 542.412 li
379.003 545.787 li
383.222 549.163 li
383.222 547.475 li
388.285 547.475 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
495.445 517.098 mo
495.445 518.786 li
499.664 515.41 li
495.445 512.035 li
495.445 513.723 li
481.944 513.723 li
481.944 512.035 li
477.726 515.41 li
481.944 518.786 li
481.944 517.098 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
495.445 517.098 mo
495.445 518.786 li
499.664 515.41 li
495.445 512.035 li
495.445 513.723 li
481.944 513.723 li
481.944 512.035 li
477.726 515.41 li
481.944 518.786 li
481.944 517.098 li
495.445 517.098 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
485.32 518.786 mo
492.07 512.036 li
@
151.181 412.469 mo
370.565 412.469 li
370.565 409.094 li
151.181 409.094 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
370.565 409.094 mo
151.181 409.094 li
151.181 412.469 li
370.565 412.469 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
157.931 404.031 mo
156.243 404.031 li
159.619 408.25 li
162.994 404.031 li
161.306 404.031 li
161.306 390.53 li
162.994 390.53 li
159.619 386.312 li
156.243 390.53 li
157.931 390.53 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
157.931 404.031 mo
156.243 404.031 li
159.619 408.25 li
162.994 404.031 li
161.306 404.031 li
161.306 390.53 li
162.994 390.53 li
159.619 386.312 li
156.243 390.53 li
157.931 390.53 li
157.931 404.031 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
208.559 404.031 mo
206.871 404.031 li
210.247 408.25 li
213.622 404.031 li
211.934 404.031 li
211.934 390.53 li
213.622 390.53 li
210.247 386.312 li
206.871 390.53 li
208.559 390.53 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
208.559 404.031 mo
206.871 404.031 li
210.247 408.25 li
213.622 404.031 li
211.934 404.031 li
211.934 390.53 li
213.622 390.53 li
210.247 386.312 li
206.871 390.53 li
208.559 390.53 li
208.559 404.031 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
259.186 404.031 mo
257.498 404.031 li
260.874 408.25 li
264.249 404.031 li
262.561 404.031 li
262.561 390.53 li
264.249 390.53 li
260.874 386.312 li
257.498 390.53 li
259.186 390.53 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
259.186 404.031 mo
257.498 404.031 li
260.874 408.25 li
264.249 404.031 li
262.561 404.031 li
262.561 390.53 li
264.249 390.53 li
260.874 386.312 li
257.498 390.53 li
259.186 390.53 li
259.186 404.031 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
309.813 404.031 mo
308.125 404.031 li
311.501 408.25 li
314.876 404.031 li
313.188 404.031 li
313.188 390.53 li
314.876 390.53 li
311.501 386.312 li
308.125 390.53 li
309.813 390.53 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
309.813 404.031 mo
308.125 404.031 li
311.501 408.25 li
314.876 404.031 li
313.188 404.031 li
313.188 390.53 li
314.876 390.53 li
311.501 386.312 li
308.125 390.53 li
309.813 390.53 li
309.813 404.031 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
360.44 404.031 mo
358.752 404.031 li
362.128 408.25 li
365.503 404.031 li
363.815 404.031 li
363.815 390.53 li
365.503 390.53 li
362.128 386.312 li
358.752 390.53 li
360.44 390.53 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
360.44 404.031 mo
358.752 404.031 li
362.128 408.25 li
365.503 404.031 li
363.815 404.031 li
363.815 390.53 li
365.503 390.53 li
362.128 386.312 li
358.752 390.53 li
360.44 390.53 li
360.44 404.031 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
259.186 431.032 mo
257.498 431.032 li
260.874 435.251 li
264.249 431.032 li
262.561 431.032 li
262.561 417.531 li
264.249 417.531 li
260.874 413.313 li
257.498 417.531 li
259.186 417.531 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
259.186 431.032 mo
257.498 431.032 li
260.874 435.251 li
264.249 431.032 li
262.561 431.032 li
262.561 417.531 li
264.249 417.531 li
260.874 413.313 li
257.498 417.531 li
259.186 417.531 li
259.186 431.032 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
166.369 532.286 mo
164.681 532.286 li
168.057 536.505 li
171.432 532.286 li
169.744 532.286 li
169.744 518.785 li
171.432 518.785 li
168.057 514.567 li
164.681 518.785 li
166.369 518.785 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
166.369 532.286 mo
164.681 532.286 li
168.057 536.505 li
171.432 532.286 li
169.744 532.286 li
169.744 518.785 li
171.432 518.785 li
168.057 514.567 li
164.681 518.785 li
166.369 518.785 li
166.369 532.286 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
250.748 532.286 mo
249.06 532.286 li
252.436 536.505 li
255.811 532.286 li
254.123 532.286 li
254.123 518.785 li
255.811 518.785 li
252.436 514.567 li
249.06 518.785 li
250.748 518.785 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
250.748 532.286 mo
249.06 532.286 li
252.436 536.505 li
255.811 532.286 li
254.123 532.286 li
254.123 518.785 li
255.811 518.785 li
252.436 514.567 li
249.06 518.785 li
250.748 518.785 li
250.748 532.286 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
335.126 532.286 mo
333.438 532.286 li
336.814 536.505 li
340.189 532.286 li
338.501 532.286 li
338.501 518.785 li
340.189 518.785 li
336.814 514.567 li
333.438 518.785 li
335.126 518.785 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
335.126 532.286 mo
333.438 532.286 li
336.814 536.505 li
340.189 532.286 li
338.501 532.286 li
338.501 518.785 li
340.189 518.785 li
336.814 514.567 li
333.438 518.785 li
335.126 518.785 li
335.126 532.286 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
183.62 532.286 mo
181.932 532.286 li
185.308 536.505 li
188.683 532.286 li
186.995 532.286 li
186.995 518.785 li
188.683 518.785 li
185.308 514.567 li
181.932 518.785 li
183.62 518.785 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
183.62 532.286 mo
181.932 532.286 li
185.308 536.505 li
188.683 532.286 li
186.995 532.286 li
186.995 518.785 li
188.683 518.785 li
185.308 514.567 li
181.932 518.785 li
183.62 518.785 li
183.62 532.286 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
267.998 532.286 mo
266.31 532.286 li
269.686 536.505 li
273.061 532.286 li
271.373 532.286 li
271.373 518.785 li
273.061 518.785 li
269.686 514.567 li
266.31 518.785 li
267.998 518.785 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
267.998 532.286 mo
266.31 532.286 li
269.686 536.505 li
273.061 532.286 li
271.373 532.286 li
271.373 518.785 li
273.061 518.785 li
269.686 514.567 li
266.31 518.785 li
267.998 518.785 li
267.998 532.286 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
352.377 532.286 mo
350.689 532.286 li
354.065 536.505 li
357.44 532.286 li
355.752 532.286 li
355.752 518.785 li
357.44 518.785 li
354.065 514.567 li
350.689 518.785 li
352.377 518.785 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
352.377 532.286 mo
350.689 532.286 li
354.065 536.505 li
357.44 532.286 li
355.752 532.286 li
355.752 518.785 li
357.44 518.785 li
354.065 514.567 li
350.689 518.785 li
352.377 518.785 li
352.377 532.286 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
179.682 583.757 mo
177.994 583.757 li
181.37 587.976 li
184.745 583.757 li
183.057 583.757 li
183.057 559.287 li
184.745 559.287 li
181.37 555.068 li
177.994 559.287 li
179.682 559.287 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
179.682 583.757 mo
177.994 583.757 li
181.37 587.976 li
184.745 583.757 li
183.057 583.757 li
183.057 559.287 li
184.745 559.287 li
181.37 555.068 li
177.994 559.287 li
179.682 559.287 li
179.682 583.757 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
196.933 583.757 mo
195.245 583.757 li
198.621 587.976 li
201.996 583.757 li
200.308 583.757 li
200.308 559.287 li
201.996 559.287 li
198.621 555.068 li
195.245 559.287 li
196.933 559.287 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
196.933 583.757 mo
195.245 583.757 li
198.621 587.976 li
201.996 583.757 li
200.308 583.757 li
200.308 559.287 li
201.996 559.287 li
198.621 555.068 li
195.245 559.287 li
196.933 559.287 li
196.933 583.757 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
328.188 583.757 mo
326.5 583.757 li
329.876 587.976 li
333.251 583.757 li
331.563 583.757 li
331.563 559.287 li
333.251 559.287 li
329.876 555.068 li
326.5 559.287 li
328.188 559.287 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
328.188 583.757 mo
326.5 583.757 li
329.876 587.976 li
333.251 583.757 li
331.563 583.757 li
331.563 559.287 li
333.251 559.287 li
329.876 555.068 li
326.5 559.287 li
328.188 559.287 li
328.188 583.757 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
345.439 583.757 mo
343.751 583.757 li
347.127 587.976 li
350.502 583.757 li
348.814 583.757 li
348.814 559.287 li
350.502 559.287 li
347.127 555.068 li
343.751 559.287 li
345.439 559.287 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
345.439 583.757 mo
343.751 583.757 li
347.127 587.976 li
350.502 583.757 li
348.814 583.757 li
348.814 559.287 li
350.502 559.287 li
347.127 555.068 li
343.751 559.287 li
345.439 559.287 li
345.439 583.757 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
272.686 583.757 mo
270.998 583.757 li
274.374 587.976 li
277.749 583.757 li
276.061 583.757 li
276.061 559.287 li
277.749 559.287 li
274.374 555.068 li
270.998 559.287 li
272.686 559.287 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
272.686 583.757 mo
270.998 583.757 li
274.374 587.976 li
277.749 583.757 li
276.061 583.757 li
276.061 559.287 li
277.749 559.287 li
274.374 555.068 li
270.998 559.287 li
272.686 559.287 li
272.686 583.757 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
164.682 651.26 mo
162.994 651.26 li
166.37 655.479 li
169.745 651.26 li
168.057 651.26 li
168.057 637.759 li
169.745 637.759 li
166.37 633.541 li
162.994 637.759 li
164.682 637.759 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
164.682 651.26 mo
162.994 651.26 li
166.37 655.479 li
169.745 651.26 li
168.057 651.26 li
168.057 637.759 li
169.745 637.759 li
166.37 633.541 li
162.994 637.759 li
164.682 637.759 li
164.682 651.26 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
211.934 651.26 mo
210.246 651.26 li
213.622 655.479 li
216.997 651.26 li
215.309 651.26 li
215.309 637.759 li
216.997 637.759 li
213.622 633.541 li
210.246 637.759 li
211.934 637.759 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
211.934 651.26 mo
210.246 651.26 li
213.622 655.479 li
216.997 651.26 li
215.309 651.26 li
215.309 637.759 li
216.997 637.759 li
213.622 633.541 li
210.246 637.759 li
211.934 637.759 li
211.934 651.26 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
210.246 647.885 mo
216.996 641.135 li
@
162.994 647.885 mo
169.744 641.135 li
@
157.931 364.373 mo
156.243 364.373 li
159.619 368.592 li
162.994 364.373 li
161.306 364.373 li
161.306 350.872 li
162.994 350.872 li
159.619 346.654 li
156.243 350.872 li
157.931 350.872 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
157.931 364.373 mo
156.243 364.373 li
159.619 368.592 li
162.994 364.373 li
161.306 364.373 li
161.306 350.872 li
162.994 350.872 li
159.619 346.654 li
156.243 350.872 li
157.931 350.872 li
157.931 364.373 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
215.309 345.81 mo
215.309 364.373 li
213.621 364.373 li
216.997 368.592 li
220.372 364.373 li
218.684 364.373 li
218.684 345.81 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
215.309 345.81 mo
215.309 364.373 li
213.621 364.373 li
216.997 368.592 li
220.372 364.373 li
218.684 364.373 li
218.684 345.81 li
215.309 345.81 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
259.186 368.592 mo
259.186 350.029 li
257.498 350.029 li
260.874 345.81 li
264.249 350.029 li
262.561 350.029 li
262.561 368.592 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
259.186 368.592 mo
259.186 350.029 li
257.498 350.029 li
260.874 345.81 li
264.249 350.029 li
262.561 350.029 li
262.561 368.592 li
259.186 368.592 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
grestore
grestore
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
NTCUZU+Helvetica-Bold*1 [4.5002 0 0 -4.5002 0 0 ]msf
420.562 486.722 mo
(<:&1'%)
[2.50211 2.62811 1.25107 3.06912 3.24915 0 ]xsh
405.16 385.468 mo
405.16 387.156 li
409.379 383.78 li
405.16 380.405 li
405.16 382.093 li
400.097 382.093 li
400.097 380.405 li
395.878 383.78 li
400.097 387.156 li
400.097 385.468 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
.75 lw
4 ml
true sadj
405.16 385.468 mo
405.16 387.156 li
409.379 383.78 li
405.16 380.405 li
405.16 382.093 li
400.097 382.093 li
400.097 380.405 li
395.878 383.78 li
400.097 387.156 li
400.097 385.468 li
405.16 385.468 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
NTCUZU+Helvetica-Bold*1 [4.5002 0 0 -4.5002 0 0 ]msf
173.12 648.729 mo
(<C)
[2.50211 0 ]xsh
218.684 647.887 mo
(<C)
[2.50211 0 ]xsh
155.402 609.914 mo
(2"\)1%/'&)
[2.93413 3.00166 3.24915 3.24915 3.74864 1.25105 3.24915 0 ]xsh
155.731 615.315 mo
(%$%\(*"&)
[3.74818 3.00122 3.74818 3.5007 3.02368 3.00122 0 ]xsh
150.79 620.715 mo
('\(\)#*\(++$*)
[3.24869 3.50072 3.24869 2.74915 3.15868 3.50072 2.74913 2.74915 3.00121 0 ]xsh
206.745 609.068 mo
(!#1#/')
[3.00166 2.34457 2.84413 2.74959 1.25105 0 ]xsh
203.824 614.469 mo
(%$%\(*"&)
[3.74818 3.00122 3.74818 3.5007 3.02368 3.00122 0 ]xsh
198.883 619.869 mo
('\(\)#*\(++$*)
[3.24869 3.50072 3.24869 2.74915 3.15869 3.5007 2.74913 2.74915 3.00121 0 ]xsh
374.784 614.977 mo
300.531 614.977 li
300.531 594.726 li
374.784 594.726 li
cp
374.784 649.573 mo
300.531 649.573 li
300.531 629.322 li
374.784 629.322 li
cp
449.881 635.228 mo
409.379 635.228 li
409.379 618.352 li
449.881 618.352 li
cp
@
NTCUZU+Helvetica-Bold*1 [4.5002 0 0 -4.5002 0 0 ]msf
356.187 620.884 mo
(8/2$\(&)
[3.00122 1.25061 3.24869 3.00122 3.5007 0 ]xsh
349.815 626.284 mo
(!5,!"!#$%)
[3.00122 3.24869 3.24869 3.00122 3.00122 3.00122 2.74915 3.00122 0 ]xsh
.563 lw
217.84 435.251 mo
217.84 514.567 li
@
150.337 507.817 mo
206.027 507.817 li
206.027 443.689 li
150.337 443.689 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
.75 lw
206.027 507.817 mo
150.337 507.817 li
150.337 443.689 li
206.027 443.689 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.216 .208 .208 colr
@
NTCUZU+Helvetica-Bold*1 [6.0002 0 0 -6.0002 0 0 ]msf
167.224 449.596 mo
('\(*$&A)
[4.33214 4.66817 4.33214 4.00218 1.66805 0 ]xsh
NTCUZU+Helvetica-Bold*1 [4.5002 0 0 -4.5002 0 0 ]msf
166.389 486.722 mo
(<;>-&,"#$)
[2.50211 2.50212 2.50211 3.24915 1.25105 3.24915 3.00166 2.74959 0 ]xsh
151.75 492.122 mo
(.1*/#"&,/#&.*\(#$'#$2)
[2.55165 3.24915 3.24915 1.25105 2.74959 3.00166 1.25105 3.24915 1.25105 2.74959 1.25105 3.00168 
3.15913 3.32115 2.74959 3.00166 3.24915 2.74959 3.00166 0 ]xsh
168.518 497.523 mo
(+<&!*1%)
[2.74915 2.50165 1.25105 3.00122 3.2487 3.24869 0 ]xsh
156.687 502.923 mo
(/\)!#*5'#/\(\)?21#1)
[1.25061 3.24869 3.00122 2.74913 3.15869 3.2487 3.24869 2.74915 1.2506 3.5007 3.2487 1.2506 
3.0687 2.84367 2.34412 0 ]xsh
NTCUZV+MISCLogos*1 [18.0007 0 0 -18.0007 0 0 ]msf
160.464 468.159 mo
(!)sh
3 lw
192.527 419.219 mo
192.527 430.188 li
@
189.152 419.219 mo
192.527 412.469 li
195.902 419.219 li
f
.188 lw
189.152 419.219 mo
192.527 412.469 li
195.902 419.219 li
189.152 419.219 li
cp
@
195.902 428.501 mo
192.527 435.251 li
189.152 428.501 li
f
195.902 428.501 mo
192.527 435.251 li
189.152 428.501 li
195.902 428.501 li
cp
@
3 lw
245.685 419.219 mo
245.685 430.188 li
@
242.31 419.219 mo
245.685 412.469 li
249.06 419.219 li
f
.188 lw
242.31 419.219 mo
245.685 412.469 li
249.06 419.219 li
242.31 419.219 li
cp
@
249.06 428.501 mo
245.685 435.251 li
242.31 428.501 li
f
249.06 428.501 mo
245.685 435.251 li
242.31 428.501 li
249.06 428.501 li
cp
@
.375 lw
378.159 474.909 mo
311.5 474.909 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
true set_gvm
/NTCUZV+MISCLogos*1 uf
/NTCUZV+MISCLogos uf
/TFBAAA+MISCLogos uf
reset_gvm
true set_gvm
/NTCUZT+MyriadPro-It*1 uf
/NTCUZT+MyriadPro-It uf
/LZQAAA+MyriadPro-It uf
reset_gvm
true set_gvm
/NTCUZU+Helvetica-Bold*1 uf
/NTCUZU+Helvetica-Bold uf
/OYUBAA+Helvetica-Bold uf
reset_gvm
true set_gvm
/NTCUZP+SymbolMT-Identity-H uf
/NTCUZP+SymbolMT /CIDFont ur
reset_gvm
true set_gvm
/NTCUZS+MyriadPro-Bold*1 uf
/NTCUZS+MyriadPro-Bold uf
/IBGBAA+MyriadPro-Bold uf
reset_gvm
true set_gvm
/NTCUZR+TradeGothicLTStd-BdCn20*1 uf
/NTCUZR+TradeGothicLTStd-BdCn20 uf
/JAKBAA+TradeGothicLTStd-BdCn20 uf
reset_gvm
true set_gvm
/NTCUZQ+MinionPro-Regular*1 uf
/NTCUZQ+MinionPro-Regular uf
/XSVBAA+MinionPro-Regular uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: font LZQAAA+MyriadPro-It
%%+ font OYUBAA+Helvetica-Bold
%%+ font XSVBAA+MinionPro-Regular
%%+ font TFBAAA+MISCLogos
%%+ font HANBAA+SymbolMT-Identity-H
%%+ font IBGBAA+MyriadPro-Bold
%%+ font JAKBAA+TradeGothicLTStd-BdCn20
%%+ procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
