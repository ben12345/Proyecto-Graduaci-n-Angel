//-----------------------------------------------------------------------------------------------
//
//     BBBBBBBBBBBBBBBBB   DDDDDDDDDDDDD       TTTTTTTTTTTTTTTTTTTTTTT  iiii
//     B::::::::::::::::B  D::::::::::::DDD    T:::::::::::::::::::::T i::::i
//     B::::::BBBBBB:::::B D:::::::::::::::DD  T:::::::::::::::::::::T  iiii
//     BB:::::B     B:::::BDDD:::::DDDDD:::::D T:::::TT:::::::TT:::::T
//       B::::B     B:::::B  D:::::D    D:::::DTTTTTT  T:::::T  TTTTTTiiiiiii
//       B::::B     B:::::B  D:::::D     D:::::D       T:::::T        i:::::i
//       B::::BBBBBB:::::B   D:::::D     D:::::D       T:::::T         i::::i
//       B:::::::::::::BB    D:::::D     D:::::D       T:::::T         i::::i
//       B::::BBBBBB:::::B   D:::::D     D:::::D       T:::::T         i::::i
//       B::::B     B:::::B  D:::::D     D:::::D       T:::::T         i::::i
//       B::::B     B:::::B  D:::::D     D:::::D       T:::::T         i::::i
//       B::::B     B:::::B  D:::::D    D:::::D        T:::::T         i::::i
//     BB:::::BBBBBB::::::BDDD:::::DDDDD:::::D       TT:::::::TT      i::::::i
//     B:::::::::::::::::B D:::::::::::::::DD        T:::::::::T      i::::::i
//     B::::::::::::::::B  D::::::::::::DDD          T:::::::::T      i::::::i
//     BBBBBBBBBBBBBBBBB   DDDDDDDDDDDDD             TTTTTTTTTTT      iiiiiiii
//
//-----------------------------------------------------------------------------------------------
// ADI BF60x Dice-Counting Demo Developed by Berkeley Design Technology, Inc. (BDTI)
//
// BDTI provides expert engineering services, including algorithm design and implementation of
// software for embedded vision applications. For questions regarding this demo or information
// on BDTI’s engineering services, contact BDTI:
//
// info@BDTI.com                      +1 510-451-1800                   http://www.BDTI.com
//
// Berkeley Design Technology, Inc.(BDTI) makes no warranty for the use of this software, which
// has been developed for demonstration purposes only.  This software is provided  "as is".  BDTI
// assumes no responsibility for any errors which may appear in this software, nor does it make
// a commitment to update the information contained herein. BDTI specifically disclaims any implied
// warranties of fitness for a particular purpose.  You are solely responsible for determining
// the suitability of this software for your purposes and you use it at your own risk. In no event
// shall BDTI be held liable for any damages of any kind arising out of your use of or inability to
// use this software.
//-----------------------------------------------------------------------------------------------

/*********************************************************************************

Copyright(c) 2012 Analog Devices, Inc. All Rights Reserved.

This software is proprietary and confidential.  By using this software you agree
to the terms of the associated Analog Devices License Agreement.

*********************************************************************************/
/*!
 * @file      EdgeDetection.c
 * @brief     Edge Detection using PVP and video loopback example.
 * @version:  $ $
 * @date:     $ $
 *
 * @details
 *            This is the primary source file for the edge trace using PVP with video loop back.
 *
 */


/*=============  I N C L U D E S   =============*/
/* Standard include Files */
#include <builtins.h>
#include <blackfin.h>
#include <stdio.h>
#include <string.h>
#include <ccblkfn.h>
/* Power Service includes */
#include <services/pwr/adi_pwr.h>
/* Interrupt Manager includes */
#include <services/int/adi_int.h>
/* SEC includes */
#include <services/int/adi_sec.h>
/* TWI driver includes */
#include <drivers/twi/adi_twi.h>
/* PPI driver includes */
#include <drivers/ppi/adi_ppi.h>
/* Encoder include file */
#include "encoder.h"
/* Video sensor include file */
#include "Sensor.h"
/*video analytic toolbox  include file */
#include "adi_vat.h"
#include "adi_codec.h"
/* demo include file */
#include "EdgeDetection.h"
#include "finboard_bsp.h"

/* ADI initialization header */
#include "system/adi_initialize.h"
#include "bf609_mcapi_msg_core0.h"
#include "adi_common.h"


/*=============  D E F I N E S  =============*/
//extern void ConfigSoftSwitches_BF609(void);
extern mcapi_status_t get_data_from_coreb(void );
void InitCoreBprocessing(void);
/*=============  D E F I N E S  =============*/

uint32_t NumFilledFrames = 0;
/* Buffer to store the edge trace output */
#pragma alignment_region (32)
#pragma section ("sdram_bank4_A")
static uint8_t    EdgeTraceOut[INPUT_VIDEO_WIDTH*INPUT_VIDEO_HEIGHT*2];
#pragma alignment_region_end
uint32_t NumCameraBufsInQ;
uint32_t NumEncBufsInQ;
/* Buffer pointers for managing the input and output video*/
MT9M114_VIDEO_BUF *pLastEncBuf;
MT9M114_VIDEO_BUF *pNextEncBuf;
MT9M114_VIDEO_BUF *pEncDispStartBuf;
MT9M114_VIDEO_BUF *pCameraBufToSubmit;
MT9M114_VIDEO_BUF *pEncBufToSubmit;
MT9M114_VIDEO_BUF *pgfxBufToSubmit;
MT9M114_VIDEO_BUF *pProcessedEncBuf;
MT9M114_VIDEO_BUF *pLastCameraBuf;
/* Counter for PEC buffer processed */
uint32_t nPECProcCount=0;
uint32_t nEdgeTraceIndex = 0;
uint8_t *pEdgeTrace;
/* Switch for drawing the bounding rectangle */
extern volatile uint32_t nBoundingRectFlag;
#if defined(FINBOARD)
extern volatile uint32_t nIllumination;
uint32_t prevIllumination;
#endif
/* Video Frames, enlaces con el archivo Sensor.c
 * para almacenar las imagenes
 */
extern MT9M114_VIDEO_BUF VideoBuf0;
extern MT9M114_VIDEO_BUF VideoBuf1;
extern MT9M114_VIDEO_BUF VideoBuf2;
extern MT9M114_VIDEO_BUF VideoBuf3;
extern MT9M114_VIDEO_BUF VideoBuf4;
extern MT9M114_VIDEO_BUF VideoBuftemp;

MESSAGE_INFO *pMessageInfo;
/*
 * Buffer de comunicación entre el Core A y Core B
 */
extern unsigned char buffer[];
extern mcapi_status_t initialize_comms(void);

void main(void)
{
// test start
FILE *fp1, *fp2;
uint32_t FrameNumber = 0;
// test end

    uint32_t nResult= SUCCESS;	
   /* Buffer pointer used to get the  frames with data */
    void * pPECFrame,*pVideoBuffer=NULL, *pIIMFrame;
    /*
     * Puntero de buffer temporal
     */
    MT9M114_VIDEO_BUF *pBufTemp;
    uint32_t       *pBuf;
    int32_t        nSize;
    uint32_t retVal = PASS;
   /* Initialize the ADI components such as pin muxing etc */
    adi_initComponents(); /* auto-generated code */
   /* Initialize  DMC */
    adi_DMCamInit();
   /* By default, Graphics is not used to draw the bounding rectangle around the detected dot */

    nBoundingRectFlag = 0;
#if defined(FINBOARD)
	nIllumination = prevIllumination = 1;
#endif
    /* Registering the MDMA callback for Channel-1(Dest) with Interrupt ID 91 (page 219, HRM)
     * to Core-B since it is used to mark the canny output */
    adi_sec_SetCoreID  ( INTR_MDMA1_DST, ADI_SEC_CORE_1);
    /*
     * Puntero al buffer de comunicación casteado char a uint32_t
     */
    pBuf = (uint32_t*)buffer;
    nSize = sizeof(uint32_t);

    /******************************************************/
    mcapi_status_t mcapi_status = MCAPI_ERR_GENERAL;

    adi_core_1_enable();

    initialize_comms();


    /*mcapi_finalize(&mcapi_status);
    if (MCAPI_SUCCESS != mcapi_status) {
        exit(1);
    }*/
#ifdef DEBUG_INFO
    printf("[CORE A]: BF609_MCAPI_msg: %s\n", retVal == PASS ? "All done" : "Error...");
#endif
     /******************************************************/

    do
    {
			/* Initialize the power services*/
		if (adi_pwr_Init (PROC_CLOCK_IN, PROC_MAX_CORE_CLOCK, PROC_MAX_SYS_CLOCK, PROC_MIN_VCO_CLOCK) != ADI_PWR_SUCCESS)
		{
			printf ("Failed to initialize Power service\n");
			nResult= FAILURE;
			break;
		}
		 /* Set the required core clock and system clock */
		if(adi_pwr_SetFreq(PROC_REQ_CORE_CLOCK, PROC_REQ_SYS_CLOCK)!= ADI_PWR_SUCCESS )
		{
			printf ("Failed to initialize Power service\n");
			nResult= FAILURE;
			break;
		}
		/* Initialize the GPIO for enabling/disabling the PB1 which inturn control the graphics to
		   draw the  rectangle around the detected dots
		 */
		if(Init_GPIO()!= SUCCESS)
		{
			printf("\n GPIO initialization failed \n");
			nResult= FAILURE;
			break;
		}

#if !defined(FINBOARD)
		/* Configure the Software controlled switches on BF609 EZ-Board */
		ConfigSoftSwitches_BF609();
#else // !defined(FINBOARD)
		FINBOARD_CLK_Synth_Restore(); // restore firmware settings
		FINBOARD_LED_Drivers_Init();
		FINBOARD_LED_Drivers_Config( nIllumination );
#endif // defined(FINBOARD)

	   /* Initialize the Edge trace module */
		InitEdgeTrace();

		/* Configure the sensor */
		if(ConfigureSensor() != SUCCESS)
		{
			printf("Failed to configure Sensor \n");
			nResult= FAILURE;
			break;
		}
        /* Initialize the buffers with the STRING */
	    pBuf[1] = NULL;
	    pBuf[0] =(uint32_t) &VideoBuf0;
	    retVal = main_node0_init(&adi_mcapi_info);
	    while(pBuf[1] == NULL);

	    pBuf[1] = NULL;
	    pBuf[0] = (uint32_t)&VideoBuf1;
	    retVal = main_node0_init(&adi_mcapi_info);
	    while(pBuf[1] == NULL);

	    pBuf[1] = NULL;
	    pBuf[0] = (uint32_t)&VideoBuf2;
	    retVal = main_node0_init(&adi_mcapi_info);
	    while(pBuf[1] == NULL);

	    pBuf[1] = NULL;
	    pBuf[0] = (uint32_t)&VideoBuf3;
	    retVal = main_node0_init(&adi_mcapi_info);
	    while(pBuf[1] == NULL);

	    pBuf[1] = NULL;
	    pBuf[0] = (uint32_t)&VideoBuf4;
	    retVal = main_node0_init(&adi_mcapi_info);
	    while(pBuf[1] == NULL);

	    pBuf[1] = NULL;
	    pBuf[0] = (uint32_t)&VideoBuftemp;
	    retVal = main_node0_init(&adi_mcapi_info);
	    while(pBuf[1] == NULL);

	    InitCoreBprocessing();
		/* Configure the sensor for display
		 * La funcion se encuentra en el Archivo encoder.c */
		if(ConfigureEncoder() != SUCCESS)
		{
			printf("Failed to configure LCD \n");
			nResult= FAILURE;
			break;
		}

#if defined(FINBOARD)
		FINBOARD_ADV7511_16bit_Mode();
#endif

		/* Submit the first frame for filling*/
		if(SubmitEmptyVideoFrame() != SUCCESS)
		{
			printf("Failed to submit empty video frame to the sensor \n");
			nResult= FAILURE;
			break;
		}

		/* Submit the second frame for filling*/
		if(SubmitEmptyVideoFrame() != SUCCESS)
		{
			printf("Failed to submit empty video frame to the sensor \n");
			nResult= FAILURE;
			break;
		}
		/* Submit first buffer to encoder */
		if(SubmitEncBuf(pEncDispStartBuf) != SUCCESS)
		{
			printf("Failed to submit  video frame to the encoder \n");
			nResult= FAILURE;
			break;
		}
		/* Submit same buffer since we will be waiting for the first frame from the sensor*/
		if(SubmitEncBuf(pEncDispStartBuf) != SUCCESS)
		{
			printf("Failed to submit  video frame to the encoder \n");
			nResult= FAILURE;
			break;
		}
		/* Initialize the PVP. This will initialize the all the required blocks of PVP engine */
		if(InitPVP() != 0)
		{
			printf("Failed to configure Video Encoder \n");
			nResult= FAILURE;
			break;
		}
	    pEdgeTrace = (uint8_t *)&EdgeTraceOut[0*INPUT_VIDEO_WIDTH*INPUT_VIDEO_HEIGHT];
	    /* Call the edge trace */
	    EdgeTracePVPOut((uint8_t *)&EdgeTraceOut[1*INPUT_VIDEO_WIDTH*INPUT_VIDEO_HEIGHT], pEdgeTrace);

		/* Start the display */
		if(EnableDisplay(true) != SUCCESS)
		{
			printf("Failed to enable video encoder  \n");
			nResult= FAILURE;
			break;
		}
		/* Wait till the first frame is captured */
		/* Enable the sensor to capture the frames */
		if(EnableSensor(true) != SUCCESS)
		{
			printf("Failed to enable sensor \n");
			nResult= FAILURE;
			break;
		}
		while( NumFramesCaptured == 0 );

    }while(0);

	/* Enable the PVP */
	if(enablePVP() != 0)
	{
		printf("Failed to configure Video Encoder \n");
		nResult= FAILURE;

	}

    pMessageInfo = (MESSAGE_INFO *)buffer; /* use memory from buffer */
    pMessageInfo->nCompletionFlag = 1;

    printf( "\nVersion: %s-%s\n", __DATE__, __TIME__);

    /* A while loop to timeout the example*/
    while(NumFramesCaptured < EXAMPLE_TIMEOUT && nResult == SUCCESS )
    {
    	   /* Get the PEC buffer */
           GetPECOutputBuffer(&pPECFrame);
           if(pPECFrame == NULL)
               continue;
           pEdgeTrace = (uint8_t *)&EdgeTraceOut[nEdgeTraceIndex*INPUT_VIDEO_WIDTH*INPUT_VIDEO_HEIGHT];
           /* Call the edge trace */
           EdgeTracePVPOut(pPECFrame, pEdgeTrace);

#if 0
// EMG start
   if( FrameNumber++ > 20 )
   {
	   // Moved here for dropbox indication
       fp1=fopen( "PECout.dat","wb");
       fp2 =fopen( "EDGEout.dat", "wb");
       printf( "Capturing data - \n" );
       fwrite( pPECFrame, 1, (720*480), fp1);
       fwrite( EdgeTraceOut, 1, (720*480), fp2);
       fclose(fp1);
       fclose(fp2);
       printf( "Data Captured\n" );
       while(1);
   }
// EMGend
#endif

          /* Free the PEC output buffer so that it can be used by the PEC */
           FreePECOutputBuffer(pPECFrame);
          /* Increment the  counter */
           nPECProcCount++;
           if(nPECProcCount>1)
           {
        	   get_data_from_coreb();
           }
          while(pMessageInfo->nCompletionFlag == 0);
           pMessageInfo->pBuf1 = pEdgeTrace;
           /* Get the video display frame */
           pVideoBuffer = NULL;
           while(pVideoBuffer == NULL)
           {
               GetProcessedSensorBuf (&pVideoBuffer);
           }
           if(pVideoBuffer != NULL )
           {
               pMessageInfo->pBuf2 = pVideoBuffer;
               pMessageInfo->nWidth = INPUT_VIDEO_WIDTH;
               pMessageInfo->nHeight = INPUT_VIDEO_HEIGHT;
               pMessageInfo->nCompletionFlag = 0;
               pMessageInfo->nBoundingRectFlag = nBoundingRectFlag;
#if defined(FINBOARD)
               if ( prevIllumination != nIllumination )
               {
            	  prevIllumination = nIllumination;
                  FINBOARD_LED_Drivers_Config( nIllumination );
               }
#endif
               nEdgeTraceIndex = 1 - nEdgeTraceIndex;
               /*Call graphics to write the dot count on the display  buffer if the  buffer is  not NULL */
      	       /* send command to CORE B to execute contours and graphics */
               retVal = main_node0_process(&adi_mcapi_info);
           }

#ifdef ENABLE_IIM_MODULE
           /* Get the IIM buffer output */
           GetIIMOutputBuffer(&pIIMFrame);
           if(pIIMFrame != NULL)
           {
/* ====================================================================
              PROCESS THE IIM OUTPUT AND FREE THE BUFFER
 ==================================================================== */
        	   FreeIIMOutputBuffer(pIIMFrame);
           }
#endif
           /* Increment the counter */
           NumFilledFrames++;
    }
    /* end of while loop */
    if(nResult == SUCCESS)
    {
         printf("All done \n");
    }
    else
    {
	 printf("Failed to run dot count application.\n");
    }
}

void InitCoreBprocessing()
{
	uint32_t i,j;
	for(i=0;i<INPUT_VIDEO_HEIGHT;i++)
	{
		for(j=0;j<INPUT_VIDEO_WIDTH;j++)
		{
			if(j&0X01)
			EdgeTraceOut[i*INPUT_VIDEO_WIDTH+j] =0;
			else
			EdgeTraceOut[i*INPUT_VIDEO_WIDTH+j] =1;
		}
	}
    pMessageInfo = (MESSAGE_INFO *)buffer; /* use memory from buffer */
    pMessageInfo->pBuf2 =(uint8_t*)&VideoBuftemp;
    pMessageInfo->nWidth = INPUT_VIDEO_WIDTH;
    pMessageInfo->nHeight = INPUT_VIDEO_HEIGHT;
    pMessageInfo->nCompletionFlag = 0;
    pMessageInfo->nBoundingRectFlag = nBoundingRectFlag;
    nEdgeTraceIndex = 1 - nEdgeTraceIndex;
    pMessageInfo->pBuf1= &EdgeTraceOut[0];
    main_node0_process(&adi_mcapi_info);
    get_data_from_coreb();
    while(pMessageInfo->nCompletionFlag == 0);
}
