//-----------------------------------------------------------------------------------------------
//
//     BBBBBBBBBBBBBBBBB   DDDDDDDDDDDDD       TTTTTTTTTTTTTTTTTTTTTTT  iiii
//     B::::::::::::::::B  D::::::::::::DDD    T:::::::::::::::::::::T i::::i
//     B::::::BBBBBB:::::B D:::::::::::::::DD  T:::::::::::::::::::::T  iiii
//     BB:::::B     B:::::BDDD:::::DDDDD:::::D T:::::TT:::::::TT:::::T
//       B::::B     B:::::B  D:::::D    D:::::DTTTTTT  T:::::T  TTTTTTiiiiiii
//       B::::B     B:::::B  D:::::D     D:::::D       T:::::T        i:::::i
//       B::::BBBBBB:::::B   D:::::D     D:::::D       T:::::T         i::::i
//       B:::::::::::::BB    D:::::D     D:::::D       T:::::T         i::::i
//       B::::BBBBBB:::::B   D:::::D     D:::::D       T:::::T         i::::i
//       B::::B     B:::::B  D:::::D     D:::::D       T:::::T         i::::i
//       B::::B     B:::::B  D:::::D     D:::::D       T:::::T         i::::i
//       B::::B     B:::::B  D:::::D    D:::::D        T:::::T         i::::i
//     BB:::::BBBBBB::::::BDDD:::::DDDDD:::::D       TT:::::::TT      i::::::i
//     B:::::::::::::::::B D:::::::::::::::DD        T:::::::::T      i::::::i
//     B::::::::::::::::B  D::::::::::::DDD          T:::::::::T      i::::::i
//     BBBBBBBBBBBBBBBBB   DDDDDDDDDDDDD             TTTTTTTTTTT      iiiiiiii
//
//-----------------------------------------------------------------------------------------------
// ADI BF60x Dice-Counting Demo Developed by Berkeley Design Technology, Inc. (BDTI)
//
// BDTI provides expert engineering services, including algorithm design and implementation of
// software for embedded vision applications. For questions regarding this demo or information
// on BDTI’s engineering services, contact BDTI:
//
// info@BDTI.com                      +1 510-451-1800                   http://www.BDTI.com
//
// Berkeley Design Technology, Inc.(BDTI) makes no warranty for the use of this software, which
// has been developed for demonstration purposes only.  This software is provided  "as is".  BDTI
// assumes no responsibility for any errors which may appear in this software, nor does it make
// a commitment to update the information contained herein. BDTI specifically disclaims any implied
// warranties of fitness for a particular purpose.  You are solely responsible for determining
// the suitability of this software for your purposes and you use it at your own risk. In no event
// shall BDTI be held liable for any damages of any kind arising out of your use of or inability to
// use this software.
//-----------------------------------------------------------------------------------------------

/*********************************************************************************

Copyright(c) 2012 Analog Devices, Inc. All Rights Reserved.

This software is proprietary and confidential.  By using this software you agree
to the terms of the associated Analog Devices License Agreement.

*********************************************************************************/
/*!
 * @file      EdgeDetection.c
 * @brief     Edge Detection using PVP and video loopback example.
 * @version:  $ $
 * @date:     $ $
 *
 * @details
 *            This is the primary source file for the edge trace using PVP with video loop back.
 *
 */


/*=============  I N C L U D E S   =============*/
/* Standard include Files */
#include <builtins.h>
#include <blackfin.h>
#include <stdio.h>
#include <string.h>
#include <ccblkfn.h>
/* Power Service includes */
#include <services/pwr/adi_pwr.h>
/* Interrupt Manager includes */
#include <services/int/adi_int.h>
/* SEC includes */
#include <services/int/adi_sec.h>
/* TWI driver includes */
#include <drivers/twi/adi_twi.h>
/* PPI driver includes */
#include <drivers/ppi/adi_ppi.h>
/* Encoder include file */
#include "encoder.h"
/* Video sensor include file */
#include "Sensor.h"
/*video analytic toolbox  include file */
#include "adi_vat.h"
#include "adi_codec.h"
/* demo include file */
#include "Stage_1.h"
#include "finboard_bsp.h"

/* ADI initialization header */
#include "adi_initialize.h"
#include "adi_common.h"


/*=============  D E F I N E S  =============*/
//extern void ConfigSoftSwitches_BF609(void);
//extern mcapi_status_t get_data_from_coreb(void );
//void InitCoreBprocessing(void);
/*=============  D E F I N E S  =============*/

unsigned char buffer[MSG_MAX];
extern void InitTitle(void *ptr);

uint32_t NumFilledFrames = 0;
/* Buffer to store the edge trace output */
#pragma alignment_region (32)
#pragma section ("sdram_bank4_A")
//static uint8_t    EdgeTraceOut[INPUT_VIDEO_WIDTH*INPUT_VIDEO_HEIGHT*2];
#pragma alignment_region_end
uint32_t NumCameraBufsInQ;
uint32_t NumEncBufsInQ;
/* Buffer pointers for managing the input and output video*/
MT9M114_VIDEO_BUF *pLastEncBuf;
MT9M114_VIDEO_BUF *pNextEncBuf;
MT9M114_VIDEO_BUF *pEncDispStartBuf;
MT9M114_VIDEO_BUF *pCameraBufToSubmit;
MT9M114_VIDEO_BUF *pEncBufToSubmit;
MT9M114_VIDEO_BUF *pgfxBufToSubmit;
MT9M114_VIDEO_BUF *pProcessedEncBuf;
MT9M114_VIDEO_BUF *pLastCameraBuf;
/* Counter for PEC buffer processed */
uint32_t nPECProcCount=0;
uint32_t nEdgeTraceIndex = 0;
uint8_t *pEdgeTrace;
/* Switch for drawing the bounding rectangle */
extern volatile uint32_t nBoundingRectFlag;
#if defined(FINBOARD)
extern volatile uint32_t nIllumination;
uint32_t prevIllumination;
#endif
//extern MT9M114_VIDEO_BUF VideoBuf0;
//extern MT9M114_VIDEO_BUF VideoBuf1;
//extern MT9M114_VIDEO_BUF VideoBuf2;
//extern MT9M114_VIDEO_BUF VideoBuf3;
//extern MT9M114_VIDEO_BUF VideoBuf4;
//extern MT9M114_VIDEO_BUF VideoBuftemp;

MESSAGE_INFO *pMessageInfo;

//extern unsigned char buffer[];
//extern mcapi_status_t initialize_comms(void);

void main(void)
{
    uint32_t nResult= SUCCESS;	
   /* Buffer pointer used to get the  frames with data */
    void *pVideoBuffer=NULL;
    uint32_t *pTemp = (uint32_t *)&buffer[0];
    //MT9M114_VIDEO_BUF *pBufTemp;
    //uint32_t       *pBuf;
    //int32_t        nSize;
   /* Initialize the ADI components such as pin muxing etc */
    adi_initComponents(); /* auto-generated code */
   /* Initialize  DMC */
    adi_DMCamInit();
   /* By default, Graphics is not used to draw the bounding rectangle around the detected dot */
    InitTitle((void*)(*pTemp));

    nBoundingRectFlag = 0;
#if defined(FINBOARD)
	nIllumination = prevIllumination = 1;
#endif
    /* Registering the MDMA callback for Channel-1(Dest) with Interrupt ID 91 (page 219, HRM)
     * to Core-B since it is used to mark the canny output */
    //nSize = sizeof(uint32_t);

    /******************************************************/


    /*mcapi_finalize(&mcapi_status);
    if (MCAPI_SUCCESS != mcapi_status) {
        exit(1);
    }*/
#ifdef DEBUG_INFO
    printf("[CORE A]: BF609_MCAPI_msg: %s\n", retVal == PASS ? "All done" : "Error...");
#endif
     /******************************************************/

    do
    {
			/* Initialize the power services*/
		if (adi_pwr_Init (PROC_CLOCK_IN, PROC_MAX_CORE_CLOCK, PROC_MAX_SYS_CLOCK, PROC_MIN_VCO_CLOCK) != ADI_PWR_SUCCESS)
		{
			printf ("Failed to initialize Power service\n");
			nResult= FAILURE;
			break;
		}
		 /* Set the required core clock and system clock */
		if(adi_pwr_SetFreq(PROC_REQ_CORE_CLOCK, PROC_REQ_SYS_CLOCK)!= ADI_PWR_SUCCESS )
		{
			printf ("Failed to initialize Power service\n");
			nResult= FAILURE;
			break;
		}
		/* Initialize the GPIO for enabling/disabling the PB1 which inturn control the graphics to
		   draw the  rectangle around the detected dots
		 */
		if(Init_GPIO()!= SUCCESS)
		{
			printf("\n GPIO initialization failed \n");
			nResult= FAILURE;
			break;
		}

#if !defined(FINBOARD)
		/* Configure the Software controlled switches on BF609 EZ-Board */
		ConfigSoftSwitches_BF609();
#else // !defined(FINBOARD)
		FINBOARD_CLK_Synth_Restore(); // restore firmware settings
		FINBOARD_LED_Drivers_Init();
		FINBOARD_LED_Drivers_Config( nIllumination );
#endif // defined(FINBOARD)

		/* Configure the sensor */
		if(ConfigureSensor() != SUCCESS)
		{
			printf("Failed to configure Sensor \n");
			nResult= FAILURE;
			break;
		}
		/* Configure the sensor for display */
		if(ConfigureEncoder() != SUCCESS)
		{
			printf("Failed to configure LCD \n");
			nResult= FAILURE;
			break;
		}

#if defined(FINBOARD)
		FINBOARD_ADV7511_16bit_Mode();
#endif

		/* Submit the first frame for filling */
		if(SubmitEmptyVideoFrame() != SUCCESS)
		{
			printf("Failed to submit empty video frame to the sensor \n");
			nResult= FAILURE;
			break;
		}

		/* Submit the second frame for filling */
		if(SubmitEmptyVideoFrame() != SUCCESS)
		{
			printf("Failed to submit empty video frame to the sensor \n");
			nResult= FAILURE;
			break;
		}
		/* Submit first buffer to encoder */
		if(SubmitEncBuf(pEncDispStartBuf) != SUCCESS)
		{
			printf("Failed to submit  video frame to the encoder \n");
			nResult= FAILURE;
			break;
		}
		/* Submit same buffer since we will be waiting for the first frame from the sensor */
		if(SubmitEncBuf(pEncDispStartBuf) != SUCCESS)
		{
			printf("Failed to submit  video frame to the encoder \n");
			nResult= FAILURE;
			break;
		}

		/* Start the display */
		if(EnableDisplay(true) != SUCCESS)
		{
			printf("Failed to enable video encoder  \n");
			nResult= FAILURE;
			break;
		}
		/* Wait till the first frame is captured */
		/* Enable the sensor to capture the frames */
		if(EnableSensor(true) != SUCCESS)
		{
			printf("Failed to enable sensor \n");
			nResult= FAILURE;
			break;
		}
		while( NumFramesCaptured == 0 );

    }while(0);

    printf( "\nVersion: %s-%s\n", __DATE__, __TIME__);

    /* A while loop to timeout the example*/
    while(NumFramesCaptured < EXAMPLE_TIMEOUT && nResult == SUCCESS )
    {
    	           /* Get the video display frame */
           pVideoBuffer = NULL;
           while(pVideoBuffer == NULL)
           {
               GetProcessedSensorBuf (&pVideoBuffer);
           }
           if(pVideoBuffer != NULL )
           {
        	   pGFxBuff =(VIDEO_BUF *) pVideoBuffer;
#if defined(FINBOARD)
               if ( prevIllumination != nIllumination )
               {
            	  prevIllumination = nIllumination;
                  FINBOARD_LED_Drivers_Config( nIllumination );
               }
#endif
           }
           /* Increment the counter */
           //NumFilledFrames++;
    }
    /* end of while loop */
    if(nResult == SUCCESS)
    {
         printf("All done \n");
    }
    else
    {
	 printf("Failed to run dot count application.\n");
    }
}
